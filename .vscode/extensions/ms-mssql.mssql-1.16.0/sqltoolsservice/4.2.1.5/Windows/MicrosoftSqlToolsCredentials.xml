<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MicrosoftSqlToolsCredentials</name>
    </assembly>
    <members>
        <member name="T:Microsoft.SqlTools.Credentials.Contracts.Credential">
            <summary>
            A Credential containing information needed to log into a resource. This is primarily 
            defined as a unique <see cref="P:Microsoft.SqlTools.Credentials.Contracts.Credential.CredentialId"/> with an associated <see cref="P:Microsoft.SqlTools.Credentials.Contracts.Credential.Password"/>
            that's linked to it. 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Credentials.Contracts.Credential.CredentialId">
            <summary>
            A unique ID to identify the credential being saved. 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Credentials.Contracts.Credential.Password">
            <summary>
            The Password stored for this credential. 
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Contracts.Credential.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Contracts.Credential.#ctor(System.String)">
            <summary>
            Constructor used when only <paramref name="credentialId"/> is known
            </summary>
            <param name="credentialId"><see cref="P:Microsoft.SqlTools.Credentials.Contracts.Credential.CredentialId"/></param>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Contracts.Credential.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="credentialId"><see cref="P:Microsoft.SqlTools.Credentials.Contracts.Credential.CredentialId"/></param>
            <param name="password"><see cref="P:Microsoft.SqlTools.Credentials.Contracts.Credential.Password"/></param>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Contracts.Credential.ValidateForLookup(Microsoft.SqlTools.Credentials.Contracts.Credential)">
            <summary>
            Validates the credential has all the properties needed to look up the password
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Contracts.Credential.ValidateForSave(Microsoft.SqlTools.Credentials.Contracts.Credential)">
            <summary>
            Validates the credential has all the properties needed to save a password
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.Credentials.Contracts.ReadCredentialRequest">
            <summary>
            Read Credential request mapping entry. Expects a Credential with CredentialId, 
            and responds with the <see cref="P:Microsoft.SqlTools.Credentials.Contracts.Credential.Password"/> filled in if found
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.Credentials.Contracts.ReadCredentialRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.Credentials.Contracts.SaveCredentialRequest">
            <summary>
            Save Credential request mapping entry
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.Credentials.Contracts.SaveCredentialRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.Credentials.Contracts.DeleteCredentialRequest">
            <summary>
            Delete Credential request mapping entry
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.Credentials.Contracts.DeleteCredentialRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.Credentials.CredentialService">
            <summary>
            Service responsible for securing credentials in a platform-neutral manner. This provides
            a generic API for read, save and delete credentials
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.Credentials.CredentialService.instance">
            <summary>
            Singleton service instance
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.Credentials.CredentialService.Instance">
            <summary>
            Gets the singleton service instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.CredentialService.#ctor">
            <summary>
            Default constructor is private since it's a singleton class
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.CredentialService.#ctor(Microsoft.SqlTools.Credentials.ICredentialStore,Microsoft.SqlTools.Credentials.Linux.StoreConfig)">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.CredentialService.GetStoreForOS(Microsoft.SqlTools.Credentials.Linux.StoreConfig)">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.Credentials.ICredentialStore">
            <summary>
            An <see cref="T:Microsoft.SqlTools.Credentials.ICredentialStore"/> support securely saving and retrieving passwords
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.ICredentialStore.Save(Microsoft.SqlTools.Credentials.Contracts.Credential)">
            <summary>
            Saves a Password linked to a given Credential
            </summary>
            <param name="credential">
            A <see cref="T:Microsoft.SqlTools.Credentials.Contracts.Credential"/> to be saved. 
            <see cref="P:Microsoft.SqlTools.Credentials.Contracts.Credential.CredentialId"/> and <see cref="P:Microsoft.SqlTools.Credentials.Contracts.Credential.Password"/> are required
            </param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.ICredentialStore.TryGetPassword(System.String,System.String@)">
            <summary>
            Gets a Password and sets it into a <see cref="T:Microsoft.SqlTools.Credentials.Contracts.Credential"/> object
            </summary>
            <param name="credentialId">The name of the credential to find the password for. This is required</param>
            <param name="password">Out value</param>
            <returns>true if password was found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.ICredentialStore.DeletePassword(System.String)">
            <summary>
            Deletes a password linked to a given credential
            </summary>
            <param name="credentialId">The name of the credential to find the password for. This is required</param>
            <returns>True if password existed and was deleted, false otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.InteropUtils.GetLengthInBytes(System.String)">
            <summary>
            Gets the length in bytes for a Unicode string, for use in interop where length must be defined
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.Credentials.Linux.CredentialsWrapper">
            <summary>
            Simplified class to enable writing a set of credentials to/from disk
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.Credentials.Linux.StoreConfig">
            <summary>
            Store configuration struct
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.Credentials.Linux.LinuxCredentialStore">
            <summary>
            Linux implementation of the credential store.
            
            <remarks>
            This entire implementation may need to be revised to support encryption of
            passwords and protection of them when loaded into memory.
            </remarks>
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Linux.LinuxCredentialStore.LoadCredentialsAndFilterById(System.String,System.Collections.Generic.IEnumerable{Microsoft.SqlTools.Credentials.Contracts.Credential}@)">
            <summary>
            Gets filtered credentials with a specific ID filtered out
            </summary>
            <returns>True if the credential to filter was removed, false if it was not found</returns>
        </member>
        <member name="P:Microsoft.SqlTools.Credentials.Linux.LinuxCredentialStore.CredentialFolderPath">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Linux.LinuxCredentialStore.GetUserScopedDirectory(System.String)">
            <summary>
            Concatenates a directory to the user home directory's path
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Linux.LinuxCredentialStore.GetHomeDirectory">
            <summary>Gets the current user's home directory.</summary>
            <returns>The path to the home directory, or null if it could not be determined.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Linux.LinuxCredentialStore.TryGetHomeDirectoryFromPasswd(System.Int32,System.String@)">
            <summary>Wrapper for getpwuid_r.</summary>
            <param name="bufLen">The length of the buffer to use when storing the password result.</param>
            <param name="path">The resulting path; null if the user didn't have an entry.</param>
            <returns>true if the call was successful (path may still be null); false is a larger buffer is needed.</returns>
        </member>
        <member name="T:Microsoft.SqlTools.Credentials.Interop.Error">
            <summary>Common Unix errno error codes.</summary>
        </member>
        <member name="T:Microsoft.SqlTools.Credentials.Interop.CoreFoundation.CFStringBuiltInEncodings">
            <summary>
            Tells the OS what encoding the passed in String is in. These come from the CFString.h header file in the CoreFoundation framework.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Interop.CoreFoundation.CFStringCreateWithCString(System.IntPtr,System.String,Microsoft.SqlTools.Credentials.Interop.CoreFoundation.CFStringBuiltInEncodings)">
            <summary>
            Creates a CFStringRef from a 8-bit String object. Follows the "Create Rule" where if you create it, you delete it.
            </summary>
            <param name="allocator">Should be IntPtr.Zero</param>
            <param name="str">The string to get a CFStringRef for</param>
            <param name="encoding">The encoding of the str variable. This should be UTF 8 for OS X</param>
            <returns>Returns a pointer to a CFString on success; otherwise, returns IntPtr.Zero</returns>
            <remarks>For *nix systems, the CLR maps ANSI to UTF-8, so be explicit about that</remarks>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Interop.CoreFoundation.CFStringCreateWithCString(System.String)">
            <summary>
            Creates a CFStringRef from a 8-bit String object. Follows the "Create Rule" where if you create it, you delete it.
            </summary>
            <param name="str">The string to get a CFStringRef for</param>
            <returns>Returns a valid SafeCreateHandle to a CFString on success; otherwise, returns an invalid SafeCreateHandle</returns>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Interop.CoreFoundation.CFArrayCreate(System.IntPtr,System.IntPtr[],System.UInt64,System.IntPtr)">
            <summary>
            Creates a pointer to an unmanaged CFArray containing the input values. Follows the "Create Rule" where if you create it, you delete it.
            </summary>
            <param name="allocator">Should be IntPtr.Zero</param>
            <param name="values">The values to put in the array</param>
            <param name="numValues">The number of values in the array</param>
            <param name="callbacks">Should be IntPtr.Zero</param>
            <returns>Returns a pointer to a CFArray on success; otherwise, returns IntPtr.Zero</returns>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Interop.CoreFoundation.CFArrayCreate(System.IntPtr[],System.UInt64)">
            <summary>
            Creates a pointer to an unmanaged CFArray containing the input values. Follows the "Create Rule" where if you create it, you delete it.
            </summary>
            <param name="values">The values to put in the array</param>
            <param name="numValues">The number of values in the array</param>
            <returns>Returns a valid SafeCreateHandle to a CFArray on success; otherwise, returns an invalid SafeCreateHandle</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlTools.Credentials.Interop.CoreFoundation.CFRetain(System.IntPtr)" -->
        <member name="M:Microsoft.SqlTools.Credentials.Interop.CoreFoundation.CFRelease(System.IntPtr)">
            <summary>
            Decrements the reference count on the specified object and, if the ref count hits 0, cleans up the object.
            </summary>
            <param name="ptr">The pointer on which to decrement the reference count.</param>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Interop.Security.SecKeychainFindGenericPassword(System.IntPtr,System.UInt32,System.String,System.UInt32,System.String,System.UInt32@,System.IntPtr@,System.IntPtr@)">
            <summary>
            Find a generic password based on the attributes passed            
            </summary>
            <param name="keyChainRef">
            A reference to an array of keychains to search, a single keychain, or NULL to search the user's default keychain search list.
            </param>
            <param name="serviceNameLength">The length of the buffer pointed to by serviceName.</param>
            <param name="serviceName">A pointer to a string containing the service name.</param>
            <param name="accountNameLength">The length of the buffer pointed to by accountName.</param>
            <param name="accountName">A pointer to a string containing the account name.</param>
            <param name="passwordLength">On return, the length of the buffer pointed to by passwordData.</param>
            <param name="password">
            On return, a pointer to a data buffer containing the password. 
            Your application must call SecKeychainItemFreeContent(NULL, passwordData) 
            to release this data buffer when it is no longer needed.Pass NULL if you are not interested in retrieving the password data at
            this time, but simply want to find the item reference.
            </param>
            <param name="itemRef">On return, a reference to the keychain item which was found.</param>
            <returns>A result code that should be in <see cref="T:Microsoft.SqlTools.Credentials.Interop.Security.OSStatus"/></returns>
            <remarks>
            The SecKeychainFindGenericPassword function finds the first generic password item which matches the attributes you provide. 
            Most attributes are optional; you should pass only as many as you need to narrow the search sufficiently for your application's intended use. 
            SecKeychainFindGenericPassword optionally returns a reference to the found item.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Interop.Security.SecKeychainItemFreeContent(System.IntPtr,System.IntPtr)">
            <summary>
            Releases the memory used by the keychain attribute list and the keychain data retrieved in a previous call to SecKeychainItemCopyContent.
            </summary>
            <param name="attrList">A pointer to the attribute list to release. Pass NULL to ignore this parameter.</param>
            <param name="data">A pointer to the data buffer to release. Pass NULL to ignore this parameter.</param>
            <returns>A result code that should be in <see cref="T:Microsoft.SqlTools.Credentials.Interop.Security.OSStatus"/></returns>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Interop.Security.SecKeychainItemDelete(System.Runtime.InteropServices.SafeHandle)">
            <summary>
            Deletes a keychain item from the default keychain's permanent data store.
            </summary>
            <param name="itemRef">A keychain item reference of the item to delete.</param>
            <returns>A result code that should be in <see cref="T:Microsoft.SqlTools.Credentials.Interop.Security.OSStatus"/></returns>
            <remarks>
            If itemRef has not previously been added to the keychain, SecKeychainItemDelete does nothing and returns ErrSecSuccess. 
            IMPORTANT: SecKeychainItemDelete does not dispose the memory occupied by the item reference itself; 
            use the CFRelease function when you are completely * * finished with an item.
            </remarks>
        </member>
        <member name="T:Microsoft.SqlTools.Credentials.Interop.Security.OSStatus">
            <summary>Common Unix errno error codes.</summary>
        </member>
        <member name="T:Microsoft.SqlTools.Credentials.OSX.OSXCredentialStore">
            <summary>
            OSX implementation of the credential store
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.OSX.OSXCredentialStore.FindPassword(System.String,System.String@)">
            <summary>
            Finds the first password matching this credential
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.Credentials.SafeCreateHandle">
            <summary>
            This class is a wrapper around the Create pattern in OS X where
            if a Create* function is called, the caller must also CFRelease 
            on the same pointer in order to correctly free the memory.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.Credentials.Win32.Win32CredentialStore">
            <summary>
            Win32 implementation of the credential store
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.Credentials.Utility.HostLoader">
            <summary>
            Provides support for starting up a service host. This is a common responsibility
            for both the main service program and test driver that interacts with it
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Utility.HostLoader.InitializeHostedServices(Microsoft.SqlTools.Extensibility.RegisteredServiceProvider,Microsoft.SqlTools.Hosting.Protocol.IProtocolEndpoint)">
            <summary>
            Internal to support testing. Initializes <see cref="T:Microsoft.SqlTools.Hosting.IHostedService"/> instances in the service,
            and registers them for their preferred service type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.Credentials.Program">
            <summary>
            Main application class for Credentials Service Host executable
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.Credentials.Program.Main(System.String[])">
            <summary>
            Main entry point into the Credentials Service Host
            </summary>
        </member>
    </members>
</doc>
