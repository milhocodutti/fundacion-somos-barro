<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.SqlTools.ResourceProvider.Core</name>
    </assembly>
    <members>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.AccountOptionsHelper.IsMsAccount">
            <summary>
            The name of the IsMsAccount option
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.AccountOptionsHelper.Tenants">
            <summary>
            The name of the Tenants option
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.AuthenticationService.#ctor">
            <summary>
            The default constructor is required for MEF-based composable services
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Authentication.AccountTokenWrapper">
            <summary>
            Contains an account and related token information usable for login purposes
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.AccountTokenWrapper.Account">
            <summary>
            Account defining a connected service login
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.AccountTokenWrapper.SecurityTokenMappings">
            <summary>
            Token mappings from tentant ID to their access token
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAccountManager">
            <summary>
            An account manager has the information of currently logged in user and can authenticate the user
            Implementing classes must add a <see cref="T:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableAttribute" />
            to the class in order to be found by the extension manager,
            and to define the type and category supported
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAccountManager.GetUserNeedsReauthenticationAsync">
            <summary>
            Returns true is user needs reauthentication
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAccountManager.AuthenticateAsync">
            <summary>
            Authenticates the user
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAccountManager.AddUserAccountAsync">
            <summary>
            Prompt the login dialog to login to a new use that has not been cached
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAccountManager.SetCurrentAccountAsync(System.Object)">
            <summary>
            Set the current loaged in user in the cache
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAccountManager.GetCurrentAccountAsync">
            <summary>
            Returns the current logged in user
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAccountManager.HasLoginDialog">
            <summary>
            Returns true if the API supports a login control
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAccountManager.CurrentAccountChanged">
            <summary>
            Event to raise when the current logged in user changed
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureAuthenticationManager">
            <summary>
            Provides functionality to authenticate to Azure and discover associated accounts and subscriptions
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureAuthenticationManager.UserAccounts">
            <summary>
            User accounts associated to the logged in user
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureAuthenticationManager.GetSubscriptionsAsync">
            <summary>
            Azure subscriptions associated to the logged in user
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureAuthenticationManager.GetSelectedSubscriptionsAsync">
            <summary>
            Returns user's azure subscriptions
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureAuthenticationManager.TryParseSubscriptionIdentifier(System.String,Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureSubscriptionIdentifier@)">
            <summary>
            Finds a subscription given subscription id
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureAuthenticationManager.SetSelectedSubscriptionsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Stores the selected subscriptions given the ids
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureSubscriptionContext">
            Contains information about an Azure subscription
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureSubscriptionContext.Subscription">
            <summary>
            Subscription Identifier
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureSubscriptionContext.SubscriptionName">
            <summary>
            Subscription name
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureSubscriptionIdentifier">
            <summary>
            Contains information about an azure subscription identifier
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureSubscriptionIdentifier.ServiceManagementEndpoint">
            <summary>
            Service endpoint
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureSubscriptionIdentifier.SubscriptionId">
            <summary>
            Subscription id
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureTenant">
            <summary>
            User account authentication information to be used by <see cref="T:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAccountManager" />
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureTenant.TenantId">
            <summary>
            The unique Id for the tenant
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureTenant.AccountDisplayableId">
            <summary>
            Display ID
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureUserAccount">
            <summary>
            Contains information about an Azure user account
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureUserAccount.DisplayInfo">
            <summary>
            User Account Display Info
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureUserAccount.TenantId">
            <summary>
            Primary Tenant Id
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureUserAccount.AllTenants">
            <summary>
            All tenant IDs
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureUserAccountDisplayInfo">
            <summary>
            Contains information about an Azure user display
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureUserAccountDisplayInfo.AccountDisplayName">
            <summary>
            Account Display Name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureUserAccountDisplayInfo.AccountLogo">
            <summary>
            Account Logo
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureUserAccountDisplayInfo.ProviderDisplayName">
            <summary>
            Provider Dislay Name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureUserAccountDisplayInfo.ProviderLogo">
            <summary>
            Provider Logo
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureUserAccountDisplayInfo.UserName">
            <summary>
            User Name
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureUserAccountSubscriptionContext">
            <summary>
            Contains information about an Azure user account subscription
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureUserAccountSubscriptionContext.UserAccount">
            <summary>
            User Account
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IUserAccount">
            <summary>
            User account authentication information to be used by <see cref="T:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAccountManager" />
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IUserAccount.UniqueId">
            <summary>
            The unique Id for the user
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Authentication.IUserAccount.NeedsReauthentication">
            <summary>
            Returns true if user needs reauthentication
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.CommonUtil">
            <summary>
            Utilities used by resource provider related code
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.CommonUtil.CheckForNull(System.Object,System.String)">
            <summary>
            Throw an exception if the object is null.
            </summary>
            <param name="var">the object to check</param>
            <param name="varName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.CommonUtil.CheckStringForNullOrEmpty(System.String,System.String)">
            <summary>
            Throw an exception if a string is null or empty.
            </summary>
            <param name="stringVar">string to check</param>
            <param name="stringVarName">the variable or parameter name to display</param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.CommonUtil.CheckStringForNullOrEmpty(System.String,System.String,System.Boolean)">
            <summary>
            Throw an exception if a string is null or empty.
            </summary>
            <param name="stringVar">string to check</param>
            <param name="stringVarName">the variable or parameter name to display</param>
            <param name="trim">If true, will trim the string after it is determined not to be null</param>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.ConnectionConstants">
            <summary>
            Telemetry constants for Connection Dialog
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.ConnectionConstants.MasterDatabaseName">
            <summary>
            Constant value for master database name
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.ExceptionUtil">
            <summary>
            Extension methods and utils for exceptions
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ExceptionUtil.IsUserNeedsReauthenticateException(System.Exception)">
            <summary>
            Returns true if given exception if any of the inner exceptions is UserNeedsAuthenticationException
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ExceptionUtil.IsDbException(System.Exception)">
            <summary>
            Returns true if given exception if any of the inner exceptions is sql exception
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ExceptionUtil.IsExceptionType(System.Exception,System.Type)">
            <summary>
            Returns true if given exception if any of the inner exceptions is same type of given type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.ExpiredTokenException">
            <summary>
            The exception is used if any operation fails as a request failed due to an expired token
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ExpiredTokenException.#ctor">
            <summary>
            Initializes a new instance of the ServiceFailedException class.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ExpiredTokenException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ServiceFailedException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ExpiredTokenException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ServiceFailedException class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified</param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ExpiredTokenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ServiceFailedException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.ServiceExceptionBase">
            <summary>
            Base class for service exceptions
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ServiceExceptionBase.#ctor">
            <summary>
            Initializes a new instance of the AuthenticationFailedException class.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ServiceExceptionBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AuthenticationFailedException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ServiceExceptionBase.#ctor(System.String,System.Net.HttpStatusCode,System.Exception)">
            <summary>
            Initializes a new instance of the AuthenticationFailedException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="httpStatusCode">The Http error code. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified</param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ServiceExceptionBase.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the AuthenticationFailedException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="httpStatusCode">The Http error code. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified</param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ServiceExceptionBase.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AuthenticationFailedException class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified</param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ServiceExceptionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the AuthenticationFailedException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.ServiceExceptionBase.HttpStatusCode">
            <summary>
            The Http status code included in the exception
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.ServiceFailedException">
            <summary>
            The exception is used if any operation inside a service or provider fails
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ServiceFailedException.#ctor">
            <summary>
            Initializes a new instance of the ServiceFailedException class.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ServiceFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ServiceFailedException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ServiceFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ServiceFailedException class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified</param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ServiceFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ServiceFailedException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ServiceFailedException.CreateException(System.String,Microsoft.SqlTools.ResourceProvider.Core.ServerDefinition,System.Exception)">
            <summary>
            Creates a new instance of ServiceFailedException by adding the server definition info to the given message
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.UserNeedsAuthenticationException">
            <summary>
            The exception is used if any operation fails becauase user needs to reauthenticate
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.UserNeedsAuthenticationException.#ctor">
            <summary>
            Initializes a new instance of the ServiceFailedException class.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.UserNeedsAuthenticationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ServiceFailedException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.UserNeedsAuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ServiceFailedException class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified</param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.UserNeedsAuthenticationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ServiceFailedException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Contracts.Account">
            <summary>
            An object, usable in <see cref="T:Microsoft.SqlTools.ResourceProvider.Core.Contracts.CreateFirewallRuleRequest"/>s and other messages
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.Account.Key">
            <summary>
            The key that identifies the account
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.Account.DisplayInfo">
            <summary>
            Display information for the account
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.Account.Properties">
            <summary>
            Customizable properties, which will include the access token or similar authentication support
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.Account.IsStale">
            <summary>
            Indicates if the account needs refreshing
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Contracts.AccountProperties">
            <summary>
            Azure-specific properties. Note that ideally with would reuse GeneralRequestDetails but
            this isn't feasible right now as that is specific to having an Options property to hang it off
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.AccountProperties.IsMsAccount">
            <summary>
            Is this a Microsoft account, such as live.com, or not?
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.AccountProperties.Tenants">
            <summary>
            Tenants for each object
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Contracts.AccountProperties.ProviderSettings">
            <summary>
            Information about the auth provider
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Contracts.ProviderSettings.DisplayName">
            <summary>
            Display name of the provider
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Contracts.ProviderSettings.Id">
            <summary>
            ID of the provider
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Contracts.ProviderSettings.Settings">
            <summary>
            Settings for the provider itself
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Contracts.ProviderSettingsObject.Host">
            <summary>
            Actual sign in link
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Contracts.ProviderSettingsObject.ClientId">
            <summary>
            ClientID used
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Contracts.ResourceSetting.Endpoint">
            <summary>
            Endpoint of the resource
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Contracts.AccountKey">
            <summary>
            Represents a key that identifies an account.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.AccountKey.ProviderId">
            <summary>
            Identifier of the provider
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.AccountKey.AccountId">
            <summary>
            Identifier for the account, unique to the provider
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Contracts.AccountDisplayInfo">
            <summary>
            Represents display information for an account.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.AccountDisplayInfo.ContextualDisplayName">
            <summary>
            A display name that offers context for the account, such as "Contoso".
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.AccountDisplayInfo.DisplayName" -->
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Contracts.Tenant">
            <summary>
            Represents a tenant (an Azure Active Directory instance) to which a user has access
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.Tenant.Id">
            <summary>
            Globally unique identifier of the tenant
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.Tenant.DisplayName">
            <summary>
            Display name of the tenant
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.Tenant.UserId">
            <summary>
            Identifier of the user in the tenant
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Contracts.AccountSecurityToken">
            <summary>
            Contains key information about a Token used to log in to a resource provider
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.AccountSecurityToken.ExpiresOn">
            <summary>
            Expiration time for the token
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.AccountSecurityToken.Resource">
            <summary>
            URI defining the root for resource lookup
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.AccountSecurityToken.Token">
            <summary>
            The actual token
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.AccountSecurityToken.TokenType">
            <summary>
            The type of token being sent - for example "Bearer" for most resource queries
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Contracts.CreateFirewallRuleRequest">
            <summary>
            A request to open up a firewall rule
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Contracts.CreateFirewallRuleParams">
            <summary>
            A FirewallRule object, usable in <see cref="T:Microsoft.SqlTools.ResourceProvider.Core.Contracts.CreateFirewallRuleRequest"/>s and other messages
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.CreateFirewallRuleParams.Account">
            <summary>
            Account information to use in connecting to Azure
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.CreateFirewallRuleParams.SecurityTokenMappings">
            <summary>
            Per-tenant token mappings. Ideally would be set independently of this call, but for
            now this allows us to get the tokens necessary to find a server and open a firewall rule
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.CreateFirewallRuleParams.ServerName">
            <summary>
            Fully qualified name of the server to create a new firewall rule on
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.CreateFirewallRuleParams.StartIpAddress">
            <summary>
            Start of the IP address range
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.CreateFirewallRuleParams.EndIpAddress">
            <summary>
            End of the IP address range
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.CreateFirewallRuleResponse.ErrorMessage">
            <summary>
            An error message for why the request failed, if any
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.HandleFirewallRuleParams.ErrorCode">
            <summary>
            The error code used to defined the error type
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.HandleFirewallRuleParams.ErrorMessage">
            <summary>
            The error message from which to parse the IP address
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.HandleFirewallRuleParams.ConnectionTypeId">
            <summary>
            The connection type, for example MSSQL
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Contracts.HandleFirewallRuleResponse">
            <summary>
            Response to the check for Firewall rule support given an error message
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.HandleFirewallRuleResponse.Result">
            <summary>
            Can this be handled?
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.HandleFirewallRuleResponse.ErrorMessage">
            <summary>
            If not, why?
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.HandleFirewallRuleResponse.IpAddress">
            <summary>
            If it can be handled, is there a default IP address to send back so users
            can tell what their blocked IP is?
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Contracts.TokenReliantResponse">
            <summary>
            Any response which relies on a token may indicated that the operation failed due to token being expired.
            All operational response messages should inherit from this class in order to support a standard method for defining
            this failure path
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.TokenReliantResponse.Result">
            <summary>
            Did this succeed?
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Contracts.TokenReliantResponse.IsTokenExpiredFailure">
            <summary>
            If this failed, was it due to a token expiring?
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.AzureDatabaseDiscoveryProvider">
            <summary>
            Default implementation for <see cref="T:Microsoft.SqlTools.ResourceProvider.Core.IDatabaseDiscoveryProvider"/> for Azure Sql databases.
            A discovery provider capable of finding Sql Azure databases for a specific Azure user account.
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ResourceProvider.Core.AzureDatabaseDiscoveryProvider.DatabaseFound">
            <summary>
            the event to raise when a database is found
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.AzureDatabaseDiscoveryProvider.RefreshCacheAsync(System.Threading.CancellationToken)">
            <summary>
            Updates the cache for current selected subscriptions
            </summary>
            <returns>The new cached data</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.AzureDatabaseDiscoveryProvider.ClearCacheAsync">
            <summary>
            Clears the cache for current selected subscriptions
            </summary>
            <returns>True if cache refreshed successfully. Otherwise returns false</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.AzureDatabaseDiscoveryProvider.GetDatabaseInstancesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the databases for given server name. Using the account manager to get the databases
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.AzureDatabaseDiscoveryProvider.AzureResourceManager">
            <summary>
            Returns the resource manager that has same metadata as this class
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.AzureDatabaseDiscoveryProvider.AzureAccountManager">
            <summary>
            Returns the account manager that has same metadata as this class
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.AzureDatabaseDiscoveryProvider.DefaultDatabaseDiscoveryProvider">
            <summary>
            Returns the account manager that has same metadata as this class
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.AzureDatabaseDiscoveryProvider.AccountManager">
            <summary>
            Account Manager
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.AzureDatabaseDiscoveryProvider.GetSubscriptionsAsync(System.Boolean)">
            <summary>
            Returns azure subscriptions.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.AzureDatabaseDiscoveryProvider.GetFromCacheAsync(System.String)">
            <summary>
            There was a wired nullReferencedException was running the tasks parallel. It only got fixed when I put the getting from cache insed an async method
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.AzureDatabaseDiscoveryProvider.GetDatabaseForSubscriptionAsync(System.Object,Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureUserAccountSubscriptionContext,System.String,System.Threading.CancellationToken,System.Threading.CancellationToken)">
            <summary>
            Returns a  list of Azure sql databases for given subscription
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.AzureDatabaseDiscoveryProvider.GetDatabaseForSubscriptionFromServiceAsync(Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureUserAccountSubscriptionContext,System.String,System.Threading.CancellationToken,System.Threading.CancellationToken)">
            <summary>
            Returns a  list of Azure sql databases for given subscription
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.AzureDatabaseDiscoveryProvider.OnDatabaseFound(Microsoft.SqlTools.ResourceProvider.Core.DatabaseInstanceInfo)">
            <summary>
            Raises DatabaseFound event with the given databases info
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ResourceProvider.Core.AzureServerDatabaseDiscoveryProvider.DatabaseFound">
            <summary>
            the event to raise when a database is found
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.AzureServerDatabaseDiscoveryProvider.AzureResourceManager">
            <summary>
            Returns the resource manager that has same metadata as this class
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.AzureServerDatabaseDiscoveryProvider.OnDatabaseFound(Microsoft.SqlTools.ResourceProvider.Core.DatabaseInstanceInfo)">
            <summary>
            Raises DatabaseFound event with the given databases info
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.AzureServerDatabaseDiscoveryProvider.ConvertToModel(Microsoft.SqlTools.ResourceProvider.Core.ServerInstanceInfo,Microsoft.SqlTools.ResourceProvider.Core.IAzureResource)">
            <summary>
            Converts the resource to DatabaseInstanceInfo
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.AzureSqlServerDiscoveryProvider">
            <summary>
            Default implementation for <see cref="T:Microsoft.SqlTools.ResourceProvider.Core.IServerDiscoveryProvider"/> for Azure Sql servers.
            A discovery provider capable of finding Sql Azure servers for a specific Azure user account.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.AzureSqlServerDiscoveryProvider.AzureResourceManager">
            <summary>
            Returns the resource manager that has same metadata as this class
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.AzureSqlServerDiscoveryProvider.AzureAccountManager">
            <summary>
            Returns the account manager that has same metadata as this class
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.AzureSqlServerDiscoveryProvider.AccountManager">
            <summary>
            Account Manager
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.AzureUtil">
            <summary>
            Utils class supporting parallel querying of Azure resources
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.AzureUtil.ExecuteGetAzureResourceAsParallel``3(``0,System.Collections.Generic.IEnumerable{``1},System.String,System.Threading.CancellationToken,System.Func{``0,``1,System.String,System.Threading.CancellationToken,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.SqlTools.ResourceProvider.Core.ServiceResponse{``2}}})">
            <summary>
            Execute an async action for each input in the a list of input in parallel.
            If any task fails, adds the exeption message to the response errors
            If cancellation token is set to cancel, returns empty response.
            Note: Will not throw if errors occur. Instead the caller should check for errors and either notify
            or rethrow as needed.
            </summary>
            <param name="session">Resource management session to use to call the resource manager</param>
            <param name="inputs">List of inputs</param>
            <param name="lookupKey">optional lookup key to filter the result</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="asyncAction">Async action</param>
            <returns>ServiceResponse including the list of data and errors</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.DatabaseInfoEventArgs">
            <summary>
            Event arguments to use for database info events
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.DatabaseInfoEventArgs.Database">
            <summary>
            Database Info
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.DatabaseInstanceInfo">
            <summary>
            Includes the data for a discovered database
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.DatabaseInstanceInfo.#ctor(Microsoft.SqlTools.ResourceProvider.Core.ServerInstanceInfo)">
            <summary>
            Default constructor to initialize the instance
            </summary>
            <param name="serverInstanceInfo"></param>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.DatabaseInstanceInfo.ServerInstanceInfo">
            <summary>
            Server instance info associated to the database instance
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.DatabaseInstanceInfo.Name">
            <summary>
            Database Name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.DatabaseInstanceInfo.IsMaster">
            <summary>
            Returns true if the database is the master database
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.IAzureResource">
            <summary>
            Interface for any implementation of azure resource
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.IAzureResource.Name">
            <summary>
            Azure Resource Name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.IAzureResource.Type">
            <summary>
            Azure Resource Type
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.IAzureResource.Id">
            <summary>
            Azure Resource Id
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.IAzureResource.ResourceGroupName">
            <summary>
            Resource Group Name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.IAzureResource.Location">
            <summary>
            Resource Location
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.IAzureResourceManagementSession">
            <summary>
            A session used by <see cref="T:Microsoft.SqlTools.ResourceProvider.Core.IAzureResourceManager" />. Includes all the clients that the resource management needs to get ther resources
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.IAzureResourceManagementSession.CloseSession">
            <summary>
            Closes the session
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.IAzureResourceManagementSession.SubscriptionContext">
            <summary>
            Teh subscription for the current session
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.IAzureResourceManager">
            <summary>
            Provides functionality to get azure resources by making Http request to the Azure REST API
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.IAzureResourceManager.GetAzureDatabasesAsync(Microsoft.SqlTools.ResourceProvider.Core.IAzureResourceManagementSession,System.String,System.String)">
            <summary>
            Returns a list of azure databases given subscription resource group name and server name
            </summary>
            <param name="azureResourceManagementSession">Subscription Context which includes credentials to use in the resource manager</param>
            <param name="resourceGroupName">Resource Group Name</param>
            <param name="serverName">Server name</param>
            <returns>The list of databases</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.IAzureResourceManager.GetSqlServerAzureResourcesAsync(Microsoft.SqlTools.ResourceProvider.Core.IAzureResourceManagementSession)">
            <summary>
            Returns a list of azure servers given subscription
            </summary>
            <param name="azureResourceManagementSession">Subscription Context which includes credentials to use in the resource manager</param>
            <returns>The list of Sql server resources</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.IAzureResourceManager.CreateFirewallRuleAsync(Microsoft.SqlTools.ResourceProvider.Core.IAzureResourceManagementSession,Microsoft.SqlTools.ResourceProvider.Core.IAzureSqlServerResource,Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleRequest)">
            <summary>
            Create new firewall rule given user subscription, Sql server resource and the firewall rule request
            </summary>
            <param name="azureResourceManagementSession">Subscription Context which includes credentials to use in the resource manager</param>
            <param name="azureSqlServer">Sql server resource to create firewall rule for</param>
            <param name="firewallRuleRequest">Firewall rule request including the name and IP address range</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.IAzureResourceManager.GetSubscriptionContextsAsync(Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureUserAccount)">
            <summary>
            Gets all subscription contexts under a specific user account. Queries all tenants for the account and uses these to log in
            and retrieve subscription information as needed
            <param name="userAccount">Account whose subscriptions should be queried</param>
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.IAzureSqlServerResource">
            <summary>
            An Azure Sql server resource
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.IAzureSqlServerResource.FullyQualifiedDomainName">
            <summary>
            Fully qualified domain name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.IAzureSqlServerResource.AdministratorLogin">
            <summary>
            Administrator Login
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.ICacheable`1">
            <summary>
            Defines a class as cachable
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ICacheable`1.ClearCacheAsync">
            <summary>
            Clears the cache for current user
            </summary>
            <returns>True if cache refreshed successfully. Otherwise returns false</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ICacheable`1.RefreshCacheAsync(System.Threading.CancellationToken)">
            <summary>
            Updates the cache for current selected subscriptions
            </summary>
            <returns>The new cached data</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.IDatabaseDiscoveryProvider">
            <summary>
            A discovery provider capable of finding databases for a given server type and category.
            For example: finding SQL Server databases in Azure, or on the local network.
            Implementing classes must add a <see cref="T:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableAttribute" />
            to the class in order to be found by the extension manager,
            and to define the type and category supported
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.IDatabaseDiscoveryProvider.GetDatabaseInstancesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the databases for given server name.
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ResourceProvider.Core.IDatabaseDiscoveryProvider.DatabaseFound">
            <summary>
            the event to raise when a database is found
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.ISecureService">
            <summary>
            Defines a class as secure which requires an account to function
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.ISecureService.AccountManager">
            <summary>
            Gets the account manager instance
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.IServerDiscoveryProvider">
            <summary>
            A discovery provider capable of finding servers for a given  server type and category.
            For example: finding SQL Servers in Azure, or on the local network.
            Implementing classes must add a <see cref="T:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableAttribute" />
            to the class in order to be found by the extension manager,
            and to define the type and category supported
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.IServerDiscoveryProvider.GetServerInstancesAsync">
            <summary>
            Discovers the server instances
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.IServerDefinition">
            <summary>
            Defines a server grouping based on the type of server connection supported (SQL Server, Reporting Server, Analysis Server)
            and a Category by which these should be shown to the user.
            Built in examples of categories include Local, Network, and Azure and additional categories can be defined as needed.
            Note that the Connection Dialog UI may require Category to be set for some resource types such as<see cref="T:Microsoft.SqlTools.ResourceProvider.Core.IServerDiscoveryProvider" />.
            In addition a UI section matching that category may be required, or else the provider will not be used by any UI part and never be called.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.IServerDefinition.Category">
            <summary>
            Category by which resources can be grouped. Built in examples of categories include Local, Network, and Azure and additional categories can be defined as needed.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.IServerDefinition.ServerType">
            <summary>
            The type of server connection supported. Examples include SQL Server, Reporting Server, Analysis Server.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.ServerDefinition">
            <summary>
            The implementation of the server definition that implements the properties
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.ServerDefinition.ServerType">
            <summary>
            <see cref="P:Microsoft.SqlTools.ResourceProvider.Core.IServerDefinition.ServerType"/>
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.ServerDefinition.Category">
            <summary>
            <see cref="P:Microsoft.SqlTools.ResourceProvider.Core.IServerDefinition.Category"/>
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.ServerDefinition.Default">
            <summary>
            Default value for the server definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.ServerInstanceInfo">
            <summary>
            Contains information about a server discovered by <see cref="T:Microsoft.SqlTools.ResourceProvider.Core.IServerDiscoveryProvider" />
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ServerInstanceInfo.#ctor(Microsoft.SqlTools.ResourceProvider.Core.IServerDefinition)">
            <summary>
            Initializes the new instance with server and location
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.ServerInstanceInfo.Name">
            <summary>
            Server Name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.ServerInstanceInfo.FullyQualifiedDomainName">
            <summary>
            Fully qualified domain name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.ServerInstanceInfo.AdministratorLogin">
            <summary>
            Administrator Login
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.ServerTypes">
            <summary>
            List of built-in server types used in <see cref="!:ExportableAttribute" />.
            Defines a server grouping based on the type of server connection supported (SQL Server, Reporting Server, Analysis Server)
            Additional server types can be defined as needed.
            Note that the Connection Dialog UI may require server type to be set for some resource types such as<see cref="T:Microsoft.SqlTools.ResourceProvider.Core.IServerDiscoveryProvider" />.
            In addition a UI section matching that category may be required, or else the provider will not be used by any UI part and never be called.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.ServerTypes.SqlServer">
            <summary>
            Sql server
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.ServerTypes.SqlReportingServer">
            <summary>
            Reporting server
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.ServerTypes.SqlIntegrationServer">
            <summary>
            Integration server
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.ServerTypes.SqlAnalysisServer">
            <summary>
            Analysis server
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Categories">
            <summary>
            List of built-in categories used in <see cref="!:ExportableAttribute" />
            Defines a server grouping based on the category of server connection supported (Network, Local, Azure)
            Additional categories can be defined as needed.
            Note that the Connection Dialog UI may require Category to be set for some resource types such as<see cref="T:Microsoft.SqlTools.ResourceProvider.Core.IServerDiscoveryProvider" />.
            In addition a UI section matching that category may be required, or else the provider will not be used by any UI part and never be called.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Categories.Network">
            <summary>
            Network category
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Categories.Azure">
            <summary>
            Azure category
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Categories.Local">
            <summary>
            local category
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Categories.LocalDb">
            <summary>
            local db category
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.ServiceResponse`1">
            <summary>
            Contains the data that a service wants to returns plus the errors happened during getting some of the data
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ServiceResponse`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Creates new instance given data and errors
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ServiceResponse`1.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Creates new instance given errors
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ServiceResponse`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates new instance given data
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ServiceResponse`1.#ctor">
            <summary>
            Creating new empry instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ServiceResponse`1.#ctor(System.Exception)">
            <summary>
            Creates new instance given exception to create the error list
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.ServiceResponse`1.Data">
            <summary>
            Information a service wants to returns
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.ServiceResponse`1.Errors">
            <summary>
            The errors that heppend during retrieving data
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.ServiceResponse`1.HasError">
            <summary>
            Return true if the response includes errors
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.ServiceResponse`1.ErrorMessage">
            <summary>
            Concatenates the messages into one error message
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.ServiceResponse`1.Found">
            <summary>
            Returns true if a response already found. it's used when we need to filter the responses
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableAttribute">
            <summary>
            Attribute defining a service export, and the metadata about that service. Implements IServiceMetadata,
            which should be used on the importer side to ensure type consistency. Services and providers have to add this property
            in order to be found by the extension manager
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableAttribute.#ctor(System.String,System.String,System.Type,System.String,System.Int32,System.String)">
            <summary>
            Default constructor to initialize the metadata of the exportable
            </summary>
            <param name="serverType">The server type supported by the exportable. If not set, exportable supports all server types</param>
            <param name="category">The category supported by the exportable. If not set, exportable supports all categories </param>
            <param name="type">The type of the exportable to be used by the extension manager to find the exportable</param>
            <param name="id">The unique id of the exportable. Used by the extension manager to pick only one from exportables with same id in the same assembly</param>
            <param name="priority">The priority of the exportable. The extension manager will pick the exportable with the highest priority if multiple found</param>
            <param name="displayName">The display name of the exportable. This field is optional</param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableAttribute.#ctor(System.Type,System.String,System.Int32,System.String)">
            <summary>
            The constructor to define an exportable by type, id and priority only. To be used by the exportables that support all server types and categories.
            For example: the implementation of <see cref="T:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ITrace" /> can be used for all server types and categories.
            </summary>
            <param name="type">The type of the exportable to be used by the extension manager to find the exportable</param>
            <param name="id">The unique id of the exportable. Used by the extension manager to pick only one from exportables with same id in the same assembly</param>
            <param name="priority">The priority of the exportable. The extension manager will pick the exportable with the highest priority if multiple found</param>
            <param name="displayName">The display name of the exportable. This field is optional</param>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableAttribute.Category">
            <summary>
            Thye category of the service
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableAttribute.ServerType">
            <summary>
            The server type of that the service supports
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableAttribute.Version">
            <summary>
             The version of this extension
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableAttribute.Id">
            <summary>
            The id of the extension
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableAttribute.DisplayName">
            <summary>
            The display name for the extension
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableAttribute.Priority">
            <summary>
            priority of the extension. Can be used to filter the extensions if multiple found
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableBase">
            <summary>
            The base class for all exportable classes.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableBase.Metadata">
            <summary>
            The exportable metadata
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableBase.ServiceProvider">
            <summary>
            Gets or sets the dependency manager to provider the dependencies of the class
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableBase.GetService``1">
            <summary>
            Finds a service of specific type which has the same metadata as class using the dependency manager.
            If multiple services found, the one with the highest priority will be returned
            </summary>
            <typeparam name="T">The type of the service</typeparam>
            <returns>A service of type T or null if not found</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableBase.GetService``1(Microsoft.SqlTools.ResourceProvider.Core.Extensibility.IExportableMetadata)">
            <summary>
            Finds a service of specific type which has the same metadata as class using the dependency manager.
            If multiple services found, the one with the highest priority will be returned
            </summary>
            <typeparam name="T">The type of the service</typeparam>
            <returns>A service of type T or null if not found</returns>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableBase.Trace">
            <summary>
            An instance of ITrace which is exported to the extension manager
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableBase.ServerDefinition">
            <summary>
            ServerDefinition created from the metadata
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableStatus">
            <summary>
            Includes the status of the exportable - whether it failed to load and any error message
            returned during loading
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableStatus.LoadingFailed">
            <summary>
            Returns true if the loading of the exportable failed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableStatus.ErrorMessage">
            <summary>
            An error message if the loading failed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableStatus.InfoLink">
            <summary>
            An info link to navigate to
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExtensionUtils">
            <summary>
            Extension methods for exportable and service
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExtensionUtils.GetService``1(Microsoft.SqlTools.Extensibility.IMultiServiceProvider,Microsoft.SqlTools.ResourceProvider.Core.IServerDefinition)">
            <summary>
            Finds a service of specific type which has the same metadata as class using the service provider.
            If multiple services found, the one with the highest priority will be returned
            </summary>
            <typeparam name="T">The type of the service</typeparam>
            <returns>A service of type T or null if not found</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExtensionUtils.IsSecure(Microsoft.SqlTools.ResourceProvider.Core.IServerDefinition)">
            <summary>
            Returns true if the given server definition is secure type. (i.e.  Azure)
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExtensionUtils.Match(Microsoft.SqlTools.ResourceProvider.Core.IServerDefinition,Microsoft.SqlTools.ResourceProvider.Core.IServerDefinition)">
            <summary>
            Returns true if the metadata matches the given server definition
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExtensionUtils.MatchMetaData(System.String,System.String)">
            <summary>
            Returns true if the metadata value matches the given value
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.IExportable">
            <summary>
            An interface to be implemented by any class that needs to be exportable
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.IExportable.Metadata">
            <summary>
            The metadata assigned to the exportable
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.IExportable.Status">
            <summary>
            Returns the status of the exportable
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.IExportableMetadata">
            <summary>
            The metadata describing an extension
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.IExportableMetadata.Priority">
            <summary>
            Exportable priority tobe used when multiple of same type found
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableMetadata.#ctor(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Default constructor to initialize the metadata of the exportable
            </summary>
            <param name="serverType">The server type supported by the exportable. If not set, exportable supports all server types</param>
            <param name="category">The category supported by the exportable. If not set, exportable supports all categories </param>
            <param name="id">The unique id of the exportable. Used by the extension manager to pick only one from exportables with same id in the same assembly</param>
            <param name="priority">The priority of the exportable. The extension manager will pick the exportable with the highest priority if multiple found</param>
            <param name="displayName">The display name of the exportable. This field is optional</param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableMetadata.#ctor(System.String,System.Int32,System.String)">
            <summary>
            The constructor to define an exportable by type, id and priority only. To be used by the exportables that support all server types and categories.
            For example: the implementation of <see cref="T:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ITrace" /> can be used for all server types and categories.
            </summary>
            <param name="id">The unique id of the exportable. Used by the extension manager to pick only one from exportables with same id in the same assembly</param>
            <param name="priority">The priority of the exportable. The extension manager will pick the exportable with the highest priority if multiple found</param>
            <param name="displayName">The display name of the exportable. This field is optional</param>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ITrace">
            <summary>
            Provides facility to trace code execution through calls to Trace* methods.
            Implementing classes must add a <see cref="T:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ExportableAttribute" />
            to the class in order to be found by the extension manager
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ITrace.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Write a formatted trace event message to the underlying trace source.
            </summary>
            <param name="eventType">Event type that specifies the verbosity level of the trace.</param>
            <param name="traceId">The category of the caller's product feature.</param>
            <param name="message">Format string of the message to be traced along with the event.</param>
            <param name="args">Object array containing zero or more objects to format.</param>
            <returns>True if event was successfully written</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.ITrace.TraceException(System.Diagnostics.TraceEventType,System.Int32,System.Exception,System.String,System.Int32,System.String,System.String)">
            <summary>
            Write a trace event with a message and exception details to the underlying trace source.
            </summary>
            <param name="eventType">Event type that specifies the verbosity level of the trace.</param>
            <param name="traceId">The category of the caller's product feature.</param>
            <param name="exception">The exception to be logged.</param>
            <param name="message">String message to be traced along with the event.</param>
            <param name="lineNumber">Compile time property to trace the line number of the calling code. Used to trace location error occurred</param>
            <param name="fileName">Compile time property  to trace the fileName of the calling code. Used to trace location error occurred</param>
            <param name="memberName">Compile time property  to trace the name of the calling method. Used to trace location error occurred</param>
            <returns>True if event was successfully written</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.Traceable">
            <summary>
            Enables tracing feature for classes
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceableBase">
            <summary>
            An abstract class to be used for classes that need to have trace feature
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceableBase.Trace">
            <summary>
            Returns the first implementation of trace in the catalog that has highest priority
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceableBase.TraceEvent(System.Diagnostics.TraceEventType,Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId,System.String,System.Object[])">
            <summary>
             Write a trace event message to the underlying trace source.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceableBase.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
             Write a trace event message to the underlying trace source.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceableBase.AssertTraceEvent(System.Boolean,System.Diagnostics.TraceEventType,Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId,System.String)">
            <summary>
            Write a formatted trace event message to the underlying trace source and issue a Debug.Fail() call
            if condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceableBase.AssertTraceEvent(System.Boolean,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Write a formatted trace event message to the underlying trace source and issue a Debug.Fail() call
            if condition is false.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceableBase.AssertTraceException(System.Boolean,System.Diagnostics.TraceEventType,Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId,System.Exception,System.String)">
            <summary>
            Write a trace event with a message and exception details to the underlying trace source and issue a
            Debug.Fail() call if the condition is false.
            </summary>
            <remarks>
            Note: often the fact that an exception has been thrown by itself is enough to determine that the message
            should be logged. If so please use DebugTraceException() instead. This method is for if the exception should
            only be logged if some additional condition is also false.
            </remarks>
            <param name="condition">Must be false for Debug or Trace event to be issued.</param>
            <param name="eventType">Event type that specifies the verbosity level of the trace.</param>
            <param name="traceId">The category of the caller's product feature.</param>
            <param name="exception">The exception to be logged.</param>
            <param name="message">Message to be traced along with the event.</param>
            <returns>True if event was successfully written or the condition was true</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceableBase.AssertTraceException2(System.Boolean,System.Diagnostics.TraceEventType,Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId,System.Exception,System.String,System.Int32,System.String,System.String)">
            <summary>
            Write a trace event with a message and exception details to the underlying trace source and issue a
            Debug.Fail() call if the condition is false.
            </summary>
            <remarks>
            Note: often the fact that an exception has been thrown by itself is enough to determine that the message
            should be logged. If so please use DebugTraceException() instead. This method is for if the exception should
            only be logged if some additional condition is also false.
            </remarks>
            <param name="condition">Must be false for Debug or Trace event to be issued.</param>
            <param name="eventType">Event type that specifies the verbosity level of the trace.</param>
            <param name="traceId">The category of the caller's product feature.</param>
            <param name="exception">The exception to be logged.</param>
            <param name="message">Message to be traced along with the event.</param>
            <returns>True if event was successfully written or the condition was true</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceableBase.AssertTraceException(System.Boolean,System.Diagnostics.TraceEventType,System.Int32,System.Exception,System.String)">
            <summary>
            Write a trace event with a message and exception details to the underlying trace source and issue a
            Debug.Fail() call if the condition is false.
            </summary>
            <remarks>
            Note: often the fact that an exception has been thrown by itself is enough to determine that the message
            should be logged. If so please use DebugTraceException() instead. This method is for if the exception should
            only be logged if some additional condition is also false.
            </remarks>
            <param name="condition">Must be false for Debug or Trace event to be issued.</param>
            <param name="eventType">Event type that specifies the verbosity level of the trace.</param>
            <param name="traceId">The category of the caller's product feature.</param>
            <param name="exception">The exception to be logged.</param>
            <param name="message">Message to be traced along with the event.</param>
            <returns>True if event was successfully written or the condition was true</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceableBase.DebugTraceException(System.Diagnostics.TraceEventType,System.Int32,System.Exception,System.String)">
            <summary>
            Write a trace event with a message and exception details to the underlying trace source and issue a
            Debug.Fail() call with the same message.
            </summary>
            <param name="eventType">Event type that specifies the verbosity level of the trace.</param>
            <param name="traceId">The category of the caller's product feature.</param>
            <param name="exception">The exception to be logged.</param>
            <param name="message">Message to be traced along with the event.</param>
            <returns>True if event was successfully written</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceableBase.TraceException(System.Diagnostics.TraceEventType,Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId,System.Exception,System.String,System.Int32,System.String,System.String)">
            <summary>
            Write a trace event with a message and exception details to the underlying trace source.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceableBase.TraceException(System.Diagnostics.TraceEventType,System.Int32,System.Exception,System.String,System.Int32,System.String,System.String)">
            <summary>
            Write a trace event with a message and exception details to the underlying trace source.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceableBase.DebugTraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Write a formatted trace event message to the underlying trace source and issue a Debug.Fail() with
            the same message.
            </summary>
            <param name="eventType">Event type that specifies the verbosity level of the trace.</param>
            <param name="traceId">The category of the caller's product feature.</param>
            <param name="message">Message to be output via Debug.Fail() and traced along with the event.</param>
            <returns>True if event was successfully written</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceableBase.SafeTrace(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies ITrace instance is  not null before tracing
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceableBase.SafeTraceException(System.Diagnostics.TraceEventType,System.Int32,System.Exception,System.String,System.Int32,System.String,System.String)">
            <summary>
            Verifies ITrace instance is  not null before tracing the exception
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId">
            <summary>
            Enumeration of values used as trace event identifiers that semantically represent the major categories of product features.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId.AzureAuthentication">
            <summary>
            Trace Id for Azure Authentication traces
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId.AzureResource">
            <summary>
            Trace Id for azure resource traces
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId.Sections">
            <summary>
            Trace Id for UI sections traces
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId.Connection">
            <summary>
            Trace Id for connection traces
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId.FirewallRule">
            <summary>
            Trace Id for firewall rule traces
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId.AzureSection">
            <summary>
            Trace Id for Azure browse traces
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId.NetworkServers">
            <summary>
            Trace Id for network servers
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId.LocalServers">
            <summary>
            Trace Id for local servers
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId.SqlDatabase">
            <summary>
            Trace Id for sql database discovery
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId.LocalSection">
            <summary>
            Trace Id for local browse traces
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId.AccountPicker">
            <summary>
            Trace Id for account picker traces
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId.NetworkSection">
            <summary>
            Trace Id for network browse traces
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId.UiInfra">
            <summary>
            Trace Id for main dialog traces
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId.HistoryPage">
            <summary>
            Trace Id for hostory page traces
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ResourceProvider.Core.Extensibility.TraceId.Telemetry">
            <summary>
            TraceId for Telemetry
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.IFirewallErrorParser.ParseErrorMessage(System.String,System.Int32)">
            <summary>
            Parses given error message and error code to see if it's firewall rule error
            and finds the blocked ip address
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.IFirewallErrorParser.ParseException(Microsoft.Data.SqlClient.SqlException)">
            <summary>
            Parses given error message and error code to see if it's firewall rule error
            and finds the blocked ip address
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallErrorParser">
            <summary>
            Parses an error to check for firewall rule error. Will include the blocked ip address if firewall rule error is detected
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallErrorParser.ParseException(Microsoft.Data.SqlClient.SqlException)">
            <summary>
            Parses given error message and error code to see if it's firewall rule error
            and finds the blocked ip address
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallErrorParser.ParseErrorMessage(System.String,System.Int32)">
            <summary>
            Parses given error message and error code to see if it's firewall rule error
            and finds the blocked ip address
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallErrorParser.TryParseClientIp(System.String,System.Net.IPAddress@)">
            <summary>
            Parses the given message to find the blocked ip address
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallErrorParser.IsSqlAzureFirewallBlocked(System.Int32)">
            <summary>
            Returns true if given error code is firewall rule blocked error code
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallParserResponse">
            <summary>
            The response that's created by firewall rule parser
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallParserResponse.FirewallRuleErrorDetected">
            <summary>
            Returns true if firewall rule is detected, otherwise returns false.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallParserResponse.BlockedIpAddress">
            <summary>
            Returns the blocked ip address if firewall rule is detected
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleException">
            <summary>
            Exception used by firewall service to indicate when firewall rule operation fails
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleException.#ctor">
            <summary>
            Initializes a new instance of the AuthenticationFailedException class.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AuthenticationFailedException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleException.#ctor(System.String,System.Net.HttpStatusCode,System.Exception)">
            <summary>
            Initializes a new instance of the AuthenticationFailedException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="httpStatusCode">The Http error code. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified</param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the AuthenticationFailedException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="httpStatusCode">The Http error code. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified</param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AuthenticationFailedException class with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified</param>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the AuthenticationFailedException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleRequest">
            <summary>
            Includes all the information needed to create a firewall rule
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleRequest.StartIpAddress">
            <summary>
            Start IP address
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleRequest.EndIpAddress">
            <summary>
            End IP address
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleRequest.FirewallRuleName">
            <summary>
            Firewall rule name
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleResource">
            <summary>
            Includes azure resource and subscription needed to create firewall rule
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleResource.AzureResource">
            <summary>
            Azure resource
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleResource.SubscriptionContext">
            <summary>
            Azure Subscription
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleResource.IsValid">
            <summary>
            Returns true if the resource and subscription are not null
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleResponse">
            <summary>
            The response that's created when the firewall rule creation request is complete
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleResponse.EndIpAddress">
            <summary>
            End IP address
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleResponse.StartIpAddress">
            <summary>
            Start IP address
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleResponse.Created">
            <summary>
            Indicates whether the firewall rule created successfully or not
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.IFirewallRuleService.CreateFirewallRuleAsync(System.String,System.String,System.String)">
            <summary>
            Creates firewall rule for given server name and IP address range. Throws exception if operation fails
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.IFirewallRuleService.CreateFirewallRuleAsync(System.String,System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Creates firewall rule for given server name and IP address range. Throws exception if operation fails
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Firewall.IFirewallRuleService.ResourceManager">
            <summary>
            Sets and gets azure resource manager instance. can be used by unit tests
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Firewall.IFirewallRuleService.AuthenticationManager">
            <summary>
            Sets and gets authentication manager instance. can be used by unit tests
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleService">
            <summary>
            Service to be used by the controls to create firewall rule
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleService.CreateFirewallRuleAsync(System.String,System.String,System.String)">
            <summary>
            Creates firewall rule for given server name and IP address range. Throws exception if operation fails
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleService.CreateFirewallRuleAsync(System.String,System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Creates firewall rule for given server name and IP address range. Throws exception if operation fails
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleService.ResourceManager">
            <summary>
            Sets and gets azure resource manager instance. can be used by unit tests
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleService.AuthenticationManager">
            <summary>
            Sets and gets authentication manager instance. can be used by unit tests
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleService.CreateFirewallRule(Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleResource,System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Creates firewall rule for given subscription and IP address range
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleService.FindAzureResourceAsync(System.String)">
            <summary>
            Finds an azure resource for given server name under user's subscriptions
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleService.TryFindAzureResourceForSubscriptionAsync(System.Object,Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureUserAccountSubscriptionContext,System.String,System.Threading.CancellationToken,System.Threading.CancellationToken)">
            <summary>
            Returns a  list of Azure sql databases for given subscription
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleService.HandleError(Microsoft.SqlTools.ResourceProvider.Core.ServiceExceptionBase,System.String,Microsoft.SqlTools.ResourceProvider.Core.Authentication.IAzureUserAccountSubscriptionContext)">
            <summary>
            Throws a firewallRule exception based on give status code
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.Firewall.FirewallRuleService.FindAzureResourceForSubscriptionAsync(System.String,Microsoft.SqlTools.ResourceProvider.Core.IAzureResourceManagementSession)">
            <summary>
            Finds Azure resource for the given subscription and server name
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ResourceProviderService.#ctor">
            <summary>
            The default constructor is required for MEF-based composable services
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ResourceProvider.Core.ResourceProviderService.HandleCreateFirewallRuleRequest(Microsoft.SqlTools.ResourceProvider.Core.Contracts.CreateFirewallRuleParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ResourceProvider.Core.Contracts.CreateFirewallRuleResponse})">
            <summary>
            Handles a firewall rule creation request. It does this by matching the server name to an Azure Server resource,
            then issuing the command to create a new firewall rule for the specified IP address against that instance
            </summary>
            <param name="firewallRule"></param>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
    </members>
</doc>
