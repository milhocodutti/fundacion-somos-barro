<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MicrosoftSqlToolsServiceLayer</name>
    </assembly>
    <members>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.AdminService">
            <summary>
            Admin task service class
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.AdminService.#ctor">
            <summary>
            Default, parameterless constructor.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.AdminService.ConnectionServiceInstance">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.AdminService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.AdminService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the service instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.AdminService.HandleDefaultDatabaseInfoRequest(Microsoft.SqlTools.ServiceLayer.Admin.Contracts.DefaultDatabaseInfoParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Admin.Contracts.DefaultDatabaseInfoResponse})">
            <summary>
            Handle a request for the default database prototype info
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.AdminService.HandleCreateDatabaseRequest(Microsoft.SqlTools.ServiceLayer.Admin.Contracts.CreateDatabaseParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Admin.Contracts.CreateDatabaseResponse})">
            <summary>
            Handles a create database request
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.AdminService.HandleGetDatabaseInfoRequest(Microsoft.SqlTools.ServiceLayer.Admin.Contracts.GetDatabaseInfoParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Admin.Contracts.GetDatabaseInfoResponse})">
            <summary>
            Handle get database info request
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.AdminService.GetDatabaseInfo(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo)">
            <summary>
            Return database info for a specific database
            </summary>
            <param name="connInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.AdminService.CreateDatabaseTaskHelper(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,System.Boolean)">
            <summary>
            Create database task helper
            </summary>
            <param name="connInfo">connection info</param>
            <param name="databaseExists">flag indicating whether to create taskhelper for existing database or not</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.AdminService.HandleCreateLoginRequest(Microsoft.SqlTools.ServiceLayer.Admin.Contracts.CreateLoginParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Admin.Contracts.CreateLoginResponse})">
            <summary>
            Handles a create login request
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.AdminServicesProviderOptionsHelper">
            <summary>
            Helper class for providing metadata about admin services
            </summary>         
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.Contracts.DatabaseInfo.Options">
            <summary>
            Gets or sets the options
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.SqlTools.ServiceLayer.Admin.Contracts.GetDatabaseInfoParams" -->
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.Contracts.GetDatabaseInfoParams.OwnerUri">
            <summary>
            Uri identifier for the connection to get the database info for
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.Contracts.GetDatabaseInfoResponse">
            <summary>
            Response object for get database info
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.Contracts.GetDatabaseInfoResponse.DatabaseInfo">
            <summary>
            The object containing the database info
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.Contracts.GetDatabaseInfoRequest">
            <summary>
            Get database info request mapping
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.AzureServiceObjectivesRegSubKey">
            <summary>
            Registry sub key for the AzureServiceObjectives overrides
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.AzureEdition">
            <summary>
            Contains the various editions available for an Azure Database
            </summary>
            ****IMPORTANT**** - If updating this enum make sure that the other logic in this class is updated as well
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.AzureEditionDatabaseSizeMappings">
            <summary>
            Provides a mapping of Azure DB Editions to their respective size options
            </summary>
            Values below are taken from http://msdn.microsoft.com/en-us/library/dn268335.aspx
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.AzureServiceObjectiveInfo">
            <summary>
            Maps Azure DB Editions to their corresponding Service Objective (Performance Level) options. These values are the default but
            can be overridden by use of the ImportExportWizard registry key (see static initializer above).
            
            The key is the index of the default value for the list
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.#cctor">
            <summary>
            Static initializer to read in the registry key values for the Service Objective mappings, which allows the user to override the defaults set for
            the service objective list. We allow them to do this as a temporary measure so that if we change the service objectives in the future we
            can tell people to use the registry key to use the new values until an updated SSMS can be released.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.TryGetDatabaseSizeInfo(Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.AzureEdition,System.Collections.Generic.KeyValuePair{System.Int32,Microsoft.SqlTools.ServiceLayer.Management.DbSize[]}@)">
            <summary>
            Gets the list of databases sizes applicable for the specified Azure DB edition (if such
            a mapping exists) as well as the index of the default size for that edition.
            
            Outputs an empty array with an index of -1 if no such mapping exists
            </summary>
            <param name="edition"></param>
            <param name="databaseSizeInfo"></param>
            <returns>TRUE if a mapping exists, FALSE if it does not</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.TryGetServiceObjectiveInfo(Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.AzureEdition,System.Collections.Generic.KeyValuePair{System.Int32,System.String[]}@)">
            <summary>
            Gets a KeyValuePair containing a list of the ServiceObjective names mapped to a particular Azure DB Edition
            (if such a mapping exists) as well as the index of the default Service Objective for that edition.
            Outputs an empty array with a default index of -1 if no such mapping exists. 
            </summary>
            <param name="edition"></param>
            <param name="serviceObjectiveInfo"></param>
            <returns>TRUE if a mapping exists, FALSE if it did not</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.GetDatabaseDefaultSize(Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.AzureEdition)">
            <summary>
            Gets the default database size for a specified Azure Edition
            </summary>
            <param name="edition"></param>
            <returns>The default size, or NULL if no default exists</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.GetDefaultServiceObjective(Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.AzureEdition)">
            <summary>
            Gets the default Service Objective name for a particular Azure DB edition
            </summary>
            <param name="edition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.GetAzureEditionDisplayName(Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.AzureEdition)">
            <summary>
            Gets the localized Azure Edition display name
            </summary>
            <param name="edition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.TryGetAzureEditionFromDisplayName(System.String,Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.AzureEdition@)">
            <summary>
            Parses a display name back into its corresponding AzureEdition. 
            </summary>
            <param name="displayName"></param>
            <param name="edition"></param>
            <returns>TRUE if the conversion succeeded, FALSE if it did not. </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.GetValidAzureEditionOptions(Microsoft.SqlServer.Management.Common.ServerVersion)">
            <summary>
            Returns a list of AzureEditions that are valid values for the EDITION option
            when creating a database.
            </summary>
            We do this so that the AzureEdition enum can have values such as NONE or DEFAULT added
            without requiring clients to explicitly filter out those values themselves each time. 
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.CDataContainerExtender.IsQueryStoreSupported(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,Microsoft.SqlServer.Management.Smo.Database)">
            <summary>
            Check if Query Store is supported.
            </summary>
            <param name="dataContainer">The data container.</param>
            <param name="database">The database.</param>
            <returns>True, if the Query Store feature is supported.</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype">
            <summary>
            FileGroup Prototype
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.FilegroupData.#ctor">
            <summary>
            Creates an instance of FilegroupData
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.FilegroupData.#ctor(Microsoft.SqlServer.Management.Smo.FileGroupType)">
            <summary>
            Creates an instance of FilegroupData
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.FilegroupData.#ctor(System.String,System.Boolean,System.Boolean,Microsoft.SqlServer.Management.Smo.FileGroupType)">
            <summary>
            Initializes a new instance of the FilegroupData class.
            </summary>
            <param name="name">filegroup name</param>
            <param name="isReadOnly">Readonly or not</param>
            <param name="isDefault">Default filegroup or not</param>
            <param name="fileGroupType">FileGroupType</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.FilegroupData.#ctor(Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.FilegroupData)">
            <summary>
            Creates an instance of FilegroupData from another instance
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.FilegroupData.Clone">
            <summary>
            Clones the instance oc FileGroupData
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.Name">
            <summary>
            The name of the filegroup
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.IsReadOnly">
            <summary>
            Whether the filegroup is read-only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.IsDefault">
            <summary>
            Whether the filegroup is the default filegroup
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.IsFileStream">
            <summary>
            Whether the filegroup is of filestream type
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.IsMemoryOptimized">
            <summary>
            Whether the filegroup is of memory Optimized type
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.FileGroupType">
            <summary>
            FileGroupType
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.Exists">
            <summary>
            Whether the file group exists on the server
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.Removed">
            <summary>
            Whether the filegroup was removed
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.OnFileGroupNameChangedHandler">
            <summary>
            File group name changed event
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.OnFileGroupDefaultChangedHandler">
            <summary>
            File group default status changed event
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.OnFileGroupDeletedHandler">
            <summary>
            File group deleted event
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.#ctor(Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.#ctor(Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype,Microsoft.SqlServer.Management.Smo.FileGroupType)">
            <summary>
            Creates an instance of FilegroupPrototype
            </summary>
            <param name="parent"></param>
            <param name="filegroupType"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.#ctor(Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype,System.String,System.Boolean,System.Boolean,Microsoft.SqlServer.Management.Smo.FileGroupType,System.Boolean)">
            <summary>
             Initializes a new instance of the FilegroupPrototype class.
            </summary>
            <param name="parent">instance of DatabasePrototype</param>
            <param name="name">file group name</param>
            <param name="isReadOnly">whether it is readonly or not</param>
            <param name="isDefault">is default or not</param>
            <param name="filegroupType">filegrouptype</param>
            <param name="exists">filegroup exists or not</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.ApplyChanges(Microsoft.SqlServer.Management.Smo.Database)">
            <summary>
            Create, Alter, or Drop the filegroup on the server
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.ChangesExist">
            <summary>
            Would applying changes do anything?
            </summary>
            <returns>True if changes exist, false otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.NotifyFileGroupDeleted(Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype)">
            <summary>
            Notify listeners that this filegroup has been deleted
            </summary>
            <param name="defaultFilegroup"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.NotifyFileGroupNameChanged(System.String,System.String)">
            <summary>
            Notify observers that the file group name has changed
            </summary>
            <param name="oldName">The file group name before the change</param>
            <param name="newName">The file group name after the change</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype.NotifyFileGroupDefaultChanged(System.Boolean,System.Boolean)">
            <summary>
            Notify observers that the file group's default status has changed
            </summary>
            <param name="oldValue">The old default-ness</param>
            <param name="newValue">THe new default-ness</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.FileType">
            <summary>
            File type - Data or Log
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth">
            <summary>
            File auto-growth data
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth.IsEnabled">
            <summary>
            Whether auto-growth is enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth.IsGrowthInPercent">
            <summary>
            Whether auto-growth is in percent
            </summary>
            <remarks>
            true means growth is in percent, false means growth is in megabytes
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth.GrowthInPercent">
            <summary>
            How much the file grows when it grows, in percent
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth.GrowthInKilobytes">
            <summary>
            How much the file grows when it grows in  kilobytes
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth.GrowthInMegabytes">
            <summary>
            How much the file grows when it grows in  kilobytes
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth.IsGrowthRestricted">
            <summary>
            Whether file growth is restricted
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth.MaximumFileSizeInMegabytes">
            <summary>
            The maximum size of the file in megabytes
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth.MaximumFileSizeInKilobytes">
            <summary>
            The maximum size of the file in megabytes
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth.#ctor(Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth.#ctor(Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth)">
            <summary>
            Copy constructor
            </summary>
            <param name="other">the instance to copy</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth.#ctor(Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype,Microsoft.SqlServer.Management.Smo.DataFile)">
            <summary>
            Constructor - extracts autogrowth information from a SMO DataFile object
            </summary>
            <param name="parent"></param>
            <param name="file">The file whose autogrowth information is to be extracted</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth.#ctor(Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype,Microsoft.SqlServer.Management.Smo.LogFile)">
            <summary>
            Constructor - extracts autogrowth information from a SMO LogFile object
            </summary>
            <param name="parent"></param>
            <param name="file">The file whose autogrowth information is to be extracted</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth.Reset">
            <summary>
            Reset the property values to their defaults
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth.HasSameValueAs(Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth)">
            <summary>
            Determine whether this Autogrowth has the same value as another Autogrowth
            </summary>
            <param name="other">The Autogrowth to compare with</param>
            <returns>True if values are the same, false otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.Autogrowth.ToString">
            <summary>
            Represent the auto-growth settings as a single string
            </summary>
            <remarks>
            The format is such that the result can be put into the Autogrowth column
            of the grid on the CreateDatabaseGeneral form.
            </remarks>
            <returns>The string representation</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype">
            <summary>
            Prototype database file
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.FileData.#ctor(Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype,Microsoft.SqlTools.ServiceLayer.Admin.FileType)">
            <summary>
            Creates instance of FileData
            </summary>
            <param name="parent"></param>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.FileData.#ctor(Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype,Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype,Microsoft.SqlServer.Management.Smo.DataFile)">
            <summary>
            Creates instaance of FileData
            </summary>
            <param name="parent"></param>
            <param name="filegroup"></param>
            <param name="file"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.FileData.#ctor(Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype,Microsoft.SqlServer.Management.Smo.LogFile)">
            <summary>
            Creates instance of FileData
            </summary>
            <param name="parent"></param>
            <param name="file"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.FileData.#ctor(Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.FileData)">
            <summary>
            Creates a instance of FileData from another instance
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.FileData.Clone">
            <summary>
            Clone current instance of FileData
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.Name">
            <summary>
            The logical name of the file, without extension
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.PhysicalName">
            <summary>
            The physical name of the file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.Folder">
            <summary>
            The folder in which the file is to be created
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.DatabaseFileType">
            <summary>
            The type of the file, either Log or Data
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.FileGroup">
            <summary>
            The prototype of the filegroup that is to contain this file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.InitialSize">
            <summary>
            The initial size of the file in Megabytes
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.Autogrowth">
            <summary>
            Auto-growth data for the file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.IsPrimaryFile">
            <summary>
            Whether this is the primary data file (the file with the .mdf extension)
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.DefaultFolder">
            <summary>
            The default folder for this file type
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.DefaultSize">
            <summary>
            The default size for this file type
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.DefaultAutogrowth">
            <summary>
            The default size for this file type
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.Exists">
            <summary>
            Whether the file exists on the server
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.Removed">
            <summary>
            Whether the file was removed
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.#ctor(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype,Microsoft.SqlTools.ServiceLayer.Admin.FileType)">
            <summary>
            Constructor for new files
            </summary>
            <param name="context">server information</param>
            <param name="database">The parent database prototype</param>
            <param name="type">The type of the file</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.#ctor(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype,Microsoft.SqlTools.ServiceLayer.Admin.FileType,System.String)">
            <summary>
            Constructor for new files whose name is known
            </summary>
            <param name="context">server information</param>
            <param name="database">The parent database prototype</param>
            <param name="type">The type of the file</param>
            <param name="name">The name of the file, without extension</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.#ctor(Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype,Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype,Microsoft.SqlServer.Management.Smo.DataFile)">
            <summary>
            Constructor for existing data files
            </summary>
            <param name="database">Prototype database containing the prototype file</param>
            <param name="filegroup">Prototype file group containing the prototype file</param>
            <param name="file">The SMO DataFile object whose definition is to be extracted</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.#ctor(Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype,Microsoft.SqlServer.Management.Smo.LogFile)">
            <summary>
            Constructor for existing log files
            </summary>
            <param name="database">Prototype database containing the prototype file</param>
            <param name="file">The SMO LogFile object whose definition is to be extracted</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.ApplyChanges(Microsoft.SqlServer.Management.Smo.Database)">
            <summary>
            Apply the changes to the database
            </summary>
            <param name="db">The database whose definition is being modified</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.ChangesExist">
            <summary>
            Would calling ApplyChanges change anything?
            </summary>
            <returns>True if changes exist, false otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.RemoveFile(Microsoft.SqlServer.Management.Smo.Database)">
            <summary>
            Remove an existing file from the database
            </summary>
            <param name="db">The database from which the file is to be removed</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.CreateOrAlterDataFile(Microsoft.SqlServer.Management.Smo.Database)">
            <summary>
            Create a data file
            </summary>
            <param name="db">The database object that is to contain the new file</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.CreateOrAlterFileStreamFile(Microsoft.SqlServer.Management.Smo.Database)">
            <summary>
            Create a filestream file
            </summary>
            <param name="db">The database object that is to contain the new file</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.CreateOrAlterLogFile(Microsoft.SqlServer.Management.Smo.Database)">
            <summary>
            Create a log file
            </summary>
            <param name="db">The database object that is to contain the new file</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.Initialize(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype,Microsoft.SqlTools.ServiceLayer.Admin.FileType)">
            <summary>
            Shared construction code for new files
            </summary>
            <param name="context"></param>
            <param name="database">The parent database prototype</param>
            <param name="type">The type of the file</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.GetDefaultValues(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer)">
            <summary>
            Get the default folder for log and data files
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.GetDefaultAutoGrowthValues(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer)">
            <summary>
            Get the default Autogrowth values for log or data files
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.InitializeDataFile(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer)">
            <summary>
            Initialize a data file, called during construction
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.InitializeLogFile(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer)">
            <summary>
            Initialize a new log file prototype, called during construction
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.OnFilegroupDeleted(System.Object,Microsoft.SqlTools.ServiceLayer.Admin.FilegroupDeletedEventArgs)">
            <summary>
            Handle deleted events from the filegroup that contains the file
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.CheckFileName(System.String)">
            <summary>
            Check whether a proposed file name is valid.  An exception is thrown if the check fails.
            </summary>
            <param name="fileName">The proposed file name to check</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.KilobytesToMegabytes(System.Double)">
            <summary>
            Get the number of megabytes equivalent to an input number of kilobytes, rounding up.
            </summary>
            <param name="kilobytes">The number of kilobytes to convert</param>
            <returns>The equivalent number of megabytes</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.MegabytesToKilobytes(System.Int32)">
            <summary>
            Get the number of kilobytes equivalent to an input number of megabytes.
            </summary>
            <param name="megabytes">The number of megabytes to convert</param>
            <returns>The equivalent number of kilobytes</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.RoundUpToNearestMegabyte(System.Double)">
            <summary>
            Get the number of kilobytes that is a round number of megabytes
            larger than the input number of kilobytes.  e.g. 1600 kb -> 2048 kb
            </summary>
            <param name="kilobytes">The number of kilobytes to round up</param>
            <returns>The number of kb in the next larger mb</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype.MakeDiskFileName(System.String,System.String,System.String)">
            <summary>
            Create the Physical file name for the data file to be created on disk
            from user preferred logical and physical Name. This also verifies the
            logical file name provided to the data file.
            If a valid physical name is provided then that is returned with proper extension.
            Else logical name is used.
            
            MakeDiskFileName returns the actual physical filename that could be used for the T-SQL query
            It makes sure:
            1. provide a way to provide different physical and logical file names to a database file.
            2. Its optional if preferred physical name is blank then logical name is used to generate the physical file name. (logical name and
               physical filename are then same. (except that the physical filename has a proper extension)
            3. since logical file name check is not that stringent in t-sql; this check is relaxed only when a physical name is explicitly provided.
            4. we don't enable the physical file name input control for filestream files since the filename passed to t-sql in this case is simply ignored. Internally
               we evaluate the final file name in case of filestreams also in the same manner for consistency (and if in future t-sql starts using the physical filename
               apart from the path.)
            5. Also if the preferred physical filename is without a file extension then default extension is appended.
               Otherwise the user defined extension is used.
            </summary>
            <param name="logicalName">Logical name of the data file. Cannot be blank. Its verified.</param>
            <param name="preferredPhysicalName">User Preferred Physical name of the file. Can be blank.</param>
            <param name="suffix">Preferred suffix of the file. can be String.Empty. If provided physical name doesn't
            have an extension or is empty then this is used.</param>
            <returns>full filename for the disk. The filename
            is prefixed with this.Folder path to generate the full name.</returns>
            <exception cref="T:System.InvalidOperationException">If logical name is empty, or physical name is invalid.</exception>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.NameChangedEventArgs">
            <summary>
            Information regarding a name-change event
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.NameChangedEventArgs.OldName">
            <summary>
            The name before the change
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.NameChangedEventArgs.NewName">
            <summary>
            The name after the change
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.NameChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="oldName">The name before the change</param>
            <param name="newName">The name after the change</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.BooleanValueChangedEventArgs">
            <summary>
            Information regarding a changes to boolean property values
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.BooleanValueChangedEventArgs.OldValue">
            <summary>
            The value before the change
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.BooleanValueChangedEventArgs.NewValue">
            <summary>
            The value after the change
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.BooleanValueChangedEventArgs.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="oldValue">The value before the change</param>
            <param name="newValue">The value after the change</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupDeletedEventArgs">
            <summary>
            Information regarding the deletion of a filegroup
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupDeletedEventArgs.DefaultFilegroup">
            <summary>
            The default filegroup for the database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupDeletedEventArgs.DeletedFilegroup">
            <summary>
            The filegroup that was deleted
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.FilegroupDeletedEventArgs.#ctor(Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype,Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype)">
            <summary>
            Constructor
            </summary>
            <param name="deletedFilegroup">The filegroup that was deleted</param>
            <param name="defaultFilegroup">The default filegroup for the database</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DefaultCursorTypes.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This method returns a list of default cursor Types
            which will be populated as a drop down list.
            </summary>
            <param name="context"></param>
            <returns>List of DefaultCursor Types </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.ParameterizationTypes.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This method returns a list of parameterization Types
            which will be populated as a drop down list.
            </summary>
            <param name="context"></param>
            <returns>List of Parameterization Types </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.PageVerifyTypes80.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This method returns a list of pageverify Types
            which will be populated as a drop down list.
            </summary>
            <param name="context"></param>
            <returns>List of Page Verify Types </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.PageVerifyTypes90.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This method returns a list of pageverify Types
            which will be populated as a drop down list.
            </summary>
            <param name="context"></param>
            <returns>List of Page Verify Types </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.RestrictAccessTypes.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This method returns a list of Access Types
            which will be populated as a drop down list.
            </summary>
            <param name="context"></param>
            <returns>List of Restrict Access Types </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseStatusTypes.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This method returns a list of database status Types
            which will be populated as a drop down list.
            </summary>
            <param name="context"></param>
            <returns>List of Database Status Types </returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype">
            <summary>
            Database Prototype
            </summary>
            <remarks>
            This exposes properties common to all server versions.  Properties specific to
            versions after 7.0 are in a derived class.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.DatabaseData.#ctor(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer)">
            <summary>
            Constructor for new databases using default data
            </summary>
            <remarks>
            This method is only called when the user doesn't have access to the model database
            </remarks>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.DatabaseData.dbSloQuery">
            <summary>
            Query to get the current and configured SLO for a target DB. Must be ran on the master DB.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.DatabaseData.#ctor(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,System.String)">
            <summary>
            Constructor for existing databases
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.DatabaseData.GetServiceLevelObjectiveValues(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer)">
            <summary>
            Fetches the values of the current and configured Service Level Objective
            for the target DB of this object
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.DatabaseData.#ctor(Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.DatabaseData)">
            <summary>
            Creates an instance of DatabaseData  - Copy constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.DatabaseData.Clone">
            <summary>
            Clones this instance of DatabaseData
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.DatabaseData.HasSameValueAs(Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.DatabaseData)">
            <summary>
            Compares 2 instances of DatabaseData
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.HideFileSettings">
            <summary>
            Whether or not the UI should show File Groups
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.Name">
            <summary>
            The name of the database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.Owner">
            <summary>
            The owner of the database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.RecoveryModel">
            <summary>
            The recovery model for the database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.LastBackupDate">
            <summary>
            The last backup date for the database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.LastLogBackupDate">
            <summary>
            The last log backup date for the database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.Collation">
            <summary>
            The collation for the database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.IsSystemDB">
            <summary>
            Property return true for System DB
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.RestrictAccess">
            <summary>
            DatabaseUserAccess for the database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.DatabaseStateDisplay">
            <summary>
            Status of the database as text
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.DatabaseState">
            <summary>
            Status of the database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.CloseCursorOnCommit">
            <summary>
            Whether cursors should be closed on transaction commit
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.DefaultCursorDisplay">
            <summary>
            The default cursor type (local or global)
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.FilestreamNonTransactedAccess">
            <summary>
            Filestream Non-Transacted Access setting for database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.FilestreamDirectoryName">
            <summary>
            Filestream share directory name.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.AutoClose">
            <summary>
            Auto-close
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.AutoShrink">
            <summary>
            Auto-shrink
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.AutoCreateStatistics">
            <summary>
            Auto-create statistics
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.AutoCreateStatisticsIncremental">
            <summary>
            Auto-update statistics
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.AutoUpdateStatistics">
            <summary>
            Auto-update statistics
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.AnsiNullDefault">
            <summary>
            Use ANSI Null defaults
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.AnsiNulls">
            <summary>
            Use ANSI Nulls
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.QuotedIdentifier">
            <summary>
            Whether quoted identifiers are enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.RecursiveTriggers">
            <summary>
            Whether recursive triggers are enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.DatabaseCompatibilityLevel">
            <summary>
            Database compatibility level
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.FullTextIndexing">
            <summary>
            Whether full-text indexing is enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.Filegroups">
            <summary>
            the set of prototype filegroups associated with this prototype database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.Files">
            <summary>
            The set of prototype files associated with this prototype database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.DefaultFilegroup">
            <summary>
            The default filegroup
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.DefaultFileStreamFilegroup">
            <summary>
            The default filestream filegroup
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.DefaultMemoryOptimizedFilegroup">
            <summary>
            The default memory optimized filegroup
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.Exists">
            <summary>
            Whether the database exists on the server
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.OriginalName">
            <summary>
            The name of the database on the server
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.NumberOfLogFiles">
            <summary>
            The number of log files defined for the database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.IsCollationSupported">
            <summary>
            Whether the server version supports per-database collation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.MirrorSafetyLevel">
            <summary>
            Mirror Safety level
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.MirrorWitness">
            <summary>
            Mirror Witness
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.IsYukonOrLater">
            <summary>
            Whether the server is Yukon or later
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.IsFilestreamEnabled">
            <summary>
            Whether filestream is enabled or not.
            </summary>       
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.#ctor(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer)">
            <summary>
            Creates an instance of DatabasePrototype
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.Clear">
            <summary>
            Return the prototype database to default values
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.LoadDefinition(System.String)">
            <summary>
            Set prototype database state to match the state of the existing database
            </summary>
            <param name="newName">The name of the database whose definition we are loading</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.ApplyChanges">
            <summary>
            Create or Alter the database on the server
            </summary>
            <param name="marshallingControl">The control through which UI interactions are to be marshalled</param>
            <returns>The SMO database object that was created or modified</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.PurgeQueryStoreData">
            <summary>
            Purge Query Store Data.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.Add(Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype)">
            <summary>
            Add a filegroup prototype to the set of filegroup prototypes
            </summary>
            <param name="filegroup">The filegroup prototype to add</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.Add(Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype)">
            <summary>
            Add a file prototype to the set of file prototypes
            </summary>
            <param name="file">The file prototype to add</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.Remove(Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype)">
            <summary>
            Remove a filegroup prototype from the set of filegroup prototypes
            </summary>
            <param name="filegroup">The filegroup prototype to removed</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.Remove(Microsoft.SqlTools.ServiceLayer.Admin.DatabaseFilePrototype)">
            <summary>
            Remove a file prototype from the set of file prototypes 
            </summary>
            <param name="file">The file prototype to remove</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.LoadFilesAndFilegroups">
            <summary>
            Reset files and filegroups to match the existing database
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.SaveProperties(Microsoft.SqlServer.Management.Smo.Database)">
            <summary>
            Commit property changes to the database
            </summary>
            <param name="db">The database whose properties we are changing</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.ChangesExist">
            <summary>
            Will calling ApplyChanges do anything?
            </summary>
            <returns>True if there are changes to apply, false otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.FileGroupChangesExist">
            <summary>
            Are there any changes associated with filegroups?
            </summary>
            <returns>True if there are filegroup changes, false otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.FileChangesExist">
            <summary>
            Are there any changes associated with files
            </summary>
            <returns>True if there are file changes, false otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.ResetFilegroups">
            <summary>
            Release current filegroups and create a new default filegroup prototype
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.ResetFiles">
            <summary>
            Release current files and create new default prototype files
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.OnFileGroupDefaultChanged(System.Object,Microsoft.SqlTools.ServiceLayer.Admin.BooleanValueChangedEventArgs)">
            <summary>
            Event handler for changes to file group default-ness
            </summary>
            <param name="sender">The object that changed</param>
            <param name="e">EventArgs describing the change</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.SetNewDefaultFileGroup(Microsoft.SqlTools.ServiceLayer.Admin.FilegroupPrototype)">
            <summary>
            Makes all the filegroups that a not the new default filegroup not default
            </summary>
            <param name="newDefault">The new default filegroup</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.AppendState(System.String,System.String)">
            <summary>
            Appends a state flag to a string reprenting a combination of flags
            </summary>
            <param name="fullState">The flag combination, such as "OFFLINE | RECOVERING"</param>
            <param name="stateFlag">The flag to append, such as "AUTO_CLOSED"</param>
            <returns>The new combination of flags, such as "OFFLINE | RECOVERING | AUTO_CLOSED"</returns>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.Changed">
            <summary>
            Property to access the observable event.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.NotifyObservers(System.Object,System.EventArgs)">
            <summary>
            Notify all observers that this object has changed.
            </summary>
            <param name="sender">The object that changed</param>
            <param name="e">Hint for the notification, usually null</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype.NotifyObservers">
            <summary>
            Notify all observers that this object has changed.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype100">
            <summary>
            Database properties for SqlServer 2008
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype100.VarDecimalEnabled">
            <summary>
            Whether vardecimal compression is enabled on the server
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype100.EncryptionEnabled">
            <summary>
            Whether database is encrypted or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype100.HonorBrokerPriority">
            <summary>
            Honor Broker Priority
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype100.SaveProperties(Microsoft.SqlServer.Management.Smo.Database)">
            <summary>
            Commit changes to the database
            </summary>
            <param name="db">The database whose properties we are changing</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype100.GetDatabaseScopedConfigDisplayText(Microsoft.SqlServer.Management.Smo.DatabaseScopedConfigurationOnOff)">
            <summary>
            Gets the display text for a database scoped configuration setting.
            </summary>
            <param name="onOffValue">The database scoped configuration setting value.</param>
            <returns>A string from the resource manager representing the value.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype100.SetDatabaseScopedConfigHelper(System.String,System.Boolean)">
            <summary>
            Translates a string to a database scoped configuration enum value for the set method.
            </summary>
            <param name="displayText">The display text.</param>
            <param name="forSecondary">Whether this is for a secondary in which case "PRIMARY" is allowable.</param>
            <returns>The database scoped configuration enum value that matches the display text.</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype110">
            <summary>
            Database properties for SqlServer 2011
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype110.DatabaseContainmentType">
            <summary>
            Database compatibility level
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype110.SaveProperties(Microsoft.SqlServer.Management.Smo.Database)">
            <summary>
            Commit changes to the database
            </summary>
            <param name="db">The database whose properties we are changing</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype80">
            <summary>
            Database Prototype for SqlServer 2000 and later servers
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype80.IsReadOnly">
            <summary>
            Whether the database is read-only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype80.PageVerifyDisplay">
            <summary>
            Whether torn page detection is enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype80.AnsiPadding">
            <summary>
            ANSI Padding enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype80.AnsiWarnings">
            <summary>
            Use ANSI warnings
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype80.Arithabort">
            <summary>
            Arithabort
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype80.ConcatNullYieldsNull">
            <summary>
            Whether contatenating a null string yields a null result
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype80.NumericRoundAbort">
            <summary>
            Numeric Roundabout
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype80.SaveProperties(Microsoft.SqlServer.Management.Smo.Database)">
            <summary>
            Commit property changes to the database
            </summary>
            <param name="db">The database whose properties we are changing</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype80SP3">
            <summary>
            Database Prototype for SqlServer 2000 SP3 and later servers
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype80SP3.DbChaining">
            <summary>
            ANSI Padding enabled
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype90">
            <summary>
            Database Prototype for SqlServer 2005 and later servers
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype90.AutoUpdateStatisticsAsync">
            <summary>
            Whether torn page detection is enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype90.PageVerifyDisplay">
            <summary>
            Whether torn page detection is enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype90.Trustworthy">
            <summary>
            Use ANSI warnings
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype90.DateCorrelationOptimization">
            <summary>
            Arithabort
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype90.AllowSnapshotIsolation">
            <summary>
            AllowSnapshotIsolation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype90.IsReadCommittedSnapshotOn">
            <summary>
            IsReadCommittedSnapshotOn
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype90.BrokerEnabled">
            <summary>
            BrokerEnabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype90.Parameterization">
            <summary>
            Whether contatenating a null string yields a null result
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype90.ServiceBrokerGuid">
            <summary>
            Service Broker Guid
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype90.SaveProperties(Microsoft.SqlServer.Management.Smo.Database)">
            <summary>
            Commit property changes to the database
            </summary>
            <param name="db">The database whose properties we are changing</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype90EnterpriseSP2">
            <summary>
            Database Prototype for SqlServer 2005 Enterprise SP2 and later servers
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype90EnterpriseSP2.VarDecimalEnabled">
            <summary>
            Whether vardecimal compression is enabled on the server
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototype90EnterpriseSP2.SaveProperties(Microsoft.SqlServer.Management.Smo.Database)">
            <summary>
            Commit property changes to the database
            </summary>
            <param name="db">The database whose properties we are changing</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototypeAzure">
            <summary>
            Database properties for SQL Azure DB.
             Business/Web editions are up to compat level 100 now   
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototypeAzure.ApplyChanges">
            <summary>
            Commit changes to the database
            </summary>
            <param name="marshallingControl">The control through which UI interactions are to be marshalled</param>
            <returns>The SMO database object that was created or modified</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototypeAzure.CreateAzureDbSetIsReadOnlyStatement(System.String,System.Boolean)">
            <summary>
            Creates an ALTER DATABASE statement to modify the Read-Only status of the target DB
            </summary>
            <param name="dbName"></param>
            <param name="isReadOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototypeAzure.CreateAzureDbSetRecursiveTriggersStatement(System.String,System.Boolean)">
            <summary>
            Creates an ALTER DATABASE statement to modify the RECURSIVE_TRIGGERS option of the target DB
            </summary>
            <param name="dbName"></param>
            <param name="recursiveTriggersEnabled"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototypeAzure.CreateModifyAzureDbOptionsStatement(System.String,Microsoft.SqlTools.ServiceLayer.Admin.AzureSqlDbHelper.AzureEdition,System.String,System.String)">
            <summary>
            Creates an ALTER DATABASE statement to modify the Azure Database properties (Edition, MaxSize and Service Level Objective)
            for the target database
            </summary>
            <param name="dbName"></param>
            <param name="edition"></param>
            <param name="maxSize"></param>
            <param name="serviceLevelObjective"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototypeAzure.CreateModifySqlDwDbOptionsStatement(System.String,System.String,System.String)">
            <summary>
            Creates an ALTER DATABASE statement to modify the Azure DataWarehouse properties  (MaxSize and Service Level Objective)
            for the target database
            </summary>
            <param name="dbName">Name of the database</param>
            <param name="maxSize">MaxSize of the database</param>
            <param name="serviceLevelObjective">New SLO of the database</param>
            <returns>Sql Statement to Alter the database.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Admin.DatabasePrototypeAzure.CreateAzureAlterDbStatement(System.String,System.String)">
            <summary>
            Creates the ALTER DATABASE statement from the given op
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Admin.DatabaseTaskHelper.Prototype">
            <summary>
            Expose database prototype to internal classes 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.AgentService">
            <summary>
            Main class for Agent Service functionality
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentService.#ctor">
            <summary>
            Construct a new AgentService instance with default parameters
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentService.ConnectionServiceInstance">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentService.ServiceHost">
            <summary>
            Service host object for sending/receiving requests/events.
            Internal for testing purposes.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the service instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentService.HandleAgentJobsRequest(Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobsParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobsResult})">
            <summary>
            Handle request to get Agent job activities
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentService.HandleJobHistoryRequest(Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobHistoryParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobHistoryResult})">
            <summary>
            Handle request to get Agent Job history
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentService.HandleJobActionRequest(Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobActionParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Utility.ResultStatus})">
            <summary>
            Handle request to Run a Job
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentService.HandleAgentAlertsRequest(Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentAlertsParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentAlertsResult})">
            <summary>
            Handle request to get the alerts list
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentService.HandleCreateAgentAlertRequest(Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentAlertParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentAlertResult})">
            <summary>
            Handle request to create an alert
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentService.HandleUpdateAgentAlertRequest(Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentAlertParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentAlertResult})">
            <summary>
            Handle request to update an alert
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentService.HandleDeleteAgentAlertRequest(Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentAlertParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Utility.ResultStatus})">
            <summary>
            Handle request to delete an alert
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.AgentAction">
            <summary>
            Main class all af the "immediate" agent actions derive from. These actions execute immediately
            are not scriptable. We use the progress reporting dialog to give the user feedback on progress
            etc.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.AgentAction.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentAction.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentAction.GenerateActions">
            <summary>
            Generate the actions the dialog will perform. Derived classes should add
            IAction based actions to the actions collection.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.EnableAgentAlerts">
            <summary>
            Enables one or more alerts.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.EnableAgentAlerts.EnableAlertAction">
            <summary>
            Performs the actual enabling
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.EnableAgentAlerts.EnableAlertAction.ToString">
            <summary>
            Generate a user friendly description of this task.Used in the description
            of the progress dialog.
            </summary>
            <returns>Description of the aler</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.EnableAgentAlerts.EnableAlertAction.DoAction(Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection,System.Int32)">
            <summary>
            Enable the alert
            </summary>
            <param name="actions">Actions collection</param>
            <param name="index">this actions index into the actions collection</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.DisableAgentAlerts">
            <summary>
            Disable one or more alerts
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.DisableAgentAlerts.DisableAlertAction">
            <summary>
            Actually disable the alert
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.DisableAgentAlerts.DisableAlertAction.DoAction(Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection,System.Int32)">
            <summary>
            Disable the alert
            </summary>
            <param name="actions">Actions collection</param>
            <param name="index">this actions index into the actions collection</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobAction.InitializeContext">
            <summary>
            Initialize context for actions on Jobs
            Job Activity monitor can call with list if jobids.
            All other existing callers may call with list of urns 
            To support above 2 scenarios,  this method in base class initializes urnParameters if it was not initialized by 
            AgentAction class's constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.EnableAgentJobs.EnableJobAction.ToString">
            <summary>
            Generate user friendly description of the action. This is displayed in the
            progress dialog.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.EnableAgentJobs.EnableJobAction.DoAction(Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection,System.Int32)">
            <summary>
            Enable the Job
            </summary>
            <param name="actions">Actions collection</param>
            <param name="index">this actions index into the actions collection</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.DisableAgentJobs">
            <summary>
            Disable a job
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.DisableAgentJobs.DisableJobAction.DoAction(Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection,System.Int32)">
            <summary>
            Disable the Job
            </summary>
            <param name="actions">Actions collection</param>
            <param name="index">this actions index into the actions collection</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.StartAgentJobs">
            <summary>
            Start an agent job. If the jobs have multiple steps we will show a dialog that asks
            which step the job should be started on.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.StartAgentJobs.GenerateActions">
            <summary>
            The method is generates list of actions and it is gets called from the OnLaod of base Form method
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.StartAgentJobs.GetJobDataSteps(Microsoft.SqlServer.Management.Smo.Agent.Job)">
            <summary>
            Returns list of steps of the given job
            </summary>
            <param name="job"></param>
            <returns>returns list of steps</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.StartAgentJobs.WaitForJobToFinishAction">
            <summary>
            This class implements the feature described in project tracking bug 37519.
            The point is to poll the server for the status of the job to give the user
            some indication of whether the job succeeded or failed.  Polls every 3 seconds.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.StartAgentJobs.WaitForJobToFinishAction.#ctor">
            <summary>
            Prevent default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.StartAgentJobs.WaitForJobToFinishAction.ToString">
            <summary>
            generates a friendly description of this step. Used by the progress dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.StartAgentJobs.WaitForJobToFinishAction.Abort">
            <summary>
            This method triggers abort event for the action thread
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.StartAgentJobs.WaitForJobToFinishAction.DoAction(Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection,System.Int32)">
            <summary>
            Perform the action for this class
            </summary>
            <param name="actions">Actions collection</param>
            <param name="index">array index of this particular action</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.StartAgentJobs.StartJobAction">
            <summary>
            starts a job
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.StartAgentJobs.StartJobAction.ToString">
            <summary>
            generates a friendly description of this step. Used by the progress dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.StartAgentJobs.StartJobAction.DoAction(Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection,System.Int32)">
            <summary>
            Start the Job
            </summary>
            <param name="actions">Actions collection</param>
            <param name="index">this actions index into the actions collection</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.StopAgentJobs">
            <summary>
            stop a job
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.StopAgentJobs.StopJobAction">
            <summary>
            class that actually stops a running job
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.StopAgentJobs.StopJobAction.ToString">
            <summary>
            Generate a user friendly description of this task. Used in the description
            of the progress dialog.
            </summary>
            <returns>Description of the action</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.StopAgentJobs.StopJobAction.DoAction(Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection,System.Int32)">
            <summary>
            Stop the Job
            </summary>
            <param name="actions">Actions collection</param>
            <param name="index">this actions index into the actions collection</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.LogSourceAggregation.#ctor(Microsoft.SqlTools.ServiceLayer.Agent.LogAggregator,System.String,Microsoft.SqlTools.ServiceLayer.Agent.ILogSource[],Microsoft.SqlTools.ServiceLayer.Agent.ILogConstraints)">
            <summary>
            
            </summary>
            <param name="owner"></param>
            <param name="name"></param>
            <param name="sources"></param>
            <param name="filter">if null no filter, else use it to filter every ILogEntry</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.LogSourceAggregation.AggregateFieldNames(Microsoft.SqlTools.ServiceLayer.Agent.ILogSource[])">
            <summary>
            computes the available fields for the aggregated log source
            </summary>
            <param name="sources"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.LogSourceAggregation.AggregateColumnTypes(Microsoft.SqlTools.ServiceLayer.Agent.ILogSource[])">
            <summary>
            computes the available column types for the aggregated log source
            </summary>
            <param name="sources"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.LogSourceAggregation.IsCanceled">
            <summary>
            checks to see if somebody decided to cancel or stop the operation
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.LogSourceAggregation.ConditionalDEBUG_ValidateLogEntriesOrder(System.Collections.Generic.List{Microsoft.SqlTools.ServiceLayer.Agent.ILogEntry},System.Boolean)">
            <summary>
            validate if entries are in correct order
            
            costly operation so we compile this only if "DEBUG" is defined
            iterates through all the entries and if their datetime is different the
            DateTime.MinValue or DateTime.MaxValue compares it with adjacent entries
            
            we do not compare subentries as aggregation is performed
            only at entries level (subentries are always linked to thier parent entry)
            
            the order should be ascending  (newer logs are after older logs)  if reverseOrder = false
            the order should be descending (newer logs are before older logs) if reverseOrder = true
            </summary>
            <param name="entries"></param>
            <param name="reverseOrder"></param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.LogAggregator">
            <summary>
            Summary description for LogAggregator.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.LogAggregator.#ctor">
            <summary>
            create an log aggregator using a default empty cache
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.LogAggregator.CreateUninitializedAggregation(System.String,Microsoft.SqlTools.ServiceLayer.Agent.ILogSource[],Microsoft.SqlTools.ServiceLayer.Agent.ILogConstraints)">
            <summary>
            agregates one or more sources -> creates a new (uninitialized) aggregation
            
            NOTE:
                we also 'aggregate' only 1 source to gain the advantage offered by this algoritm
                of being able to pump entry-s to ui thread in chucks instead of sending all source
                in one shoot -> more responsive ui
            </summary>
            <param name="outputLogSourceName"></param>
            <param name="sources"></param>
            <param name="constraints">null if no filter</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.LogAggregator.Raise_AggregationProgress(System.String,System.Int32,System.Collections.Generic.IList{System.Exception})">
            <summary>
            if job not null and callbackProgress available -> invoke progress delegate in ui thread
            </summary>
            <param name="job"></param>
            <param name="message"></param>
            <param name="percent"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.SqlTools.ServiceLayer.Agent.ILogSourceTypeFactory" -->
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.ILogSourceType">
            <summary>
            ILogSourceType describes the interface for log source types
                -- e.g. SqlServer, SqlAgent, Windows NT, file-stream, etc...
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.ILogSource">
            <summary>
            ILogSource describes a log source
                -- e.g. Current SqlServer log, Archive #3 of Sql Agent, NT Security log, etc...
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.ILogSource.Initialize">
            <summary>
            We allow only one initialization for the source. This is because upon aggregation we create a new LogSourceAggregation that
            contains the seperate sources and initialize it. So if a source is already initialized from previous collection we shouldn't
            initialize it again because we will have duplicate data.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.ILogAggregator">
            <summary>
            ILogAggregator describes an algorithm that agregates multiple ILogSources
                -- e.g. algorithm that interleaves multiple logs sources based on log entry times
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.ILogConstraints">
            <summary>
            used for filtering and searching log entries
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentAlertInfo">
            <summary>
            a class for storing various properties of agent alerts
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentAlertsParams">
            <summary>
            SQL Agent Job activity parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentAlertsResult">
            <summary>
            SQL Agent Job activity result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentAlertsRequest">
            <summary>
            SQL Agent Alerts request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentAlertsRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentAlertParams">
            <summary>
            SQL Agent create Alert params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentAlertResult">
            <summary>
            SQL Agent create Alert result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentAlertRequest">
            <summary>
            SQL Agent create Alert request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentAlertRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentAlertParams">
            <summary>
            SQL Agent update Alert params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentAlertResult">
            <summary>
            SQL Agent update Alert result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentAlertRequest">
            <summary>
            SQL Agent update Alert request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentAlertRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentAlertParams">
            <summary>
            SQL Agent delete Alert params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentAlertRequest">
            <summary>
            SQL Agent delete Alert request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentAlertRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobHistoryInfo">
            <summary>
            a class for storing various properties of agent jobs, 
            used by the Job Activity Monitor
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebookHistoryInfo">
            <summary>
            a class for storing various properties of a agent notebook history
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobInfo">
            <summary>
            a class for storing various properties of agent jobs, 
            used by the Job Activity Monitor
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebookInfo">
            <summary>
            a class for storing variour properties of notebook Jobs
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobsParams">
            <summary>
            SQL Agent Job activity parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobsResult">
            <summary>
            SQL Agent Job activity result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobsRequest">
            <summary>
            SQL Agent Jobs request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobsRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentJobParams">
            <summary>
            SQL Agent create Job params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentJobResult">
            <summary>
            SQL Agent create Job result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentJobRequest">
            <summary>
            SQL Agent create Alert request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentJobRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentJobParams">
            <summary>
            SQL Agent update Job params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentJobResult">
            <summary>
            SQL Agent update Job result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentJobRequest">
            <summary>
            SQL Agent update Job request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentJobRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentJobParams">
            <summary>
            SQL Agent delete Alert params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentJobRequest">
            <summary>
            SQL Agent delete Job request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentJobRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobHistoryParams">
            <summary>
            SQL Agent Job history parameter
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobHistoryResult">
            <summary>
            SQL Agent Job history result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobHistoryRequest">
            <summary>
            SQL Agent Jobs request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobHistoryRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobActionParams">
            <summary>
            SQL Agent Job activity parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobActionRequest">
            <summary>
            SQL Agent Jobs request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobActionRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobDefaultsParams">
            <summary>
            SQL Agent Job Defaults params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobCategory">
            <summary>
            SQL Agent Job Category class
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobLogin">
            <summary>
            SQL Agent Login
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobDefaultsResult">
            <summary>
            SQL Agent Job Defaults result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobDefaultsRequest">
            <summary>
            SQL Agent Job Defaults request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobDefaultsRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.Id">
            <summary>
            Current step id
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.FailureAction" -->
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.SuccessAction">
            <summary>
            Action to take if the step succeeds
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.FailStepId">
            <summary>
            step that will be executed on failure
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.SuccessStepId">
            <summary>
            step that will be executed on success
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.Command">
            <summary>
            Command to execute
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.CommandExecutionSuccessCode">
            <summary>
            Success code for successful execution of the command
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.DatabaseName">
            <summary>
            Database this step will execute against
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.DatabaseUserName">
            <summary>
            database user name this step will execute against
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.Server">
            <summary>
            Server to execute this step against
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.OutputFileName">
            <summary>
            output file name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.AppendToLogFile">
            <summary>
            indicates whether to append the output to a file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.AppendToStepHist">
            <summary>
            indicates whether to append the output to the step history
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.WriteLogToTable">
            <summary>
            indicates whether to log to table
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.AppendLogToTable">
            <summary>
            append the output to the table
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.RetryAttempts">
            <summary>
            number of rety attempts
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.RetryInterval">
            <summary>
            retrey interval
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepInfo.ProxyName">
            <summary>
            proxy name
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepsParams">
            <summary>
            SQL Agent Job Steps parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepsResult">
            <summary>
            SQL Agent Job Steps result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepsRequest">
            <summary>
            SQL Agent Steps request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentJobStepsRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentJobStepParams">
            <summary>
            SQL Agent create Step params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentJobStepResult">
            <summary>
            SQL Agent create Step result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentJobStepRequest">
            <summary>
            SQL Agent create Step request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentJobStepRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentJobStepParams">
            <summary>
            SQL Agent delete Step params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentJobStepRequest">
            <summary>
            SQL Agent delete Step request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentJobStepRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentJobStepParams">
            <summary>
            SQL Agent update Step params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentJobStepResult">
            <summary>
            SQL Agent update Step result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentJobStepRequest">
            <summary>
            SQL Agent update Step request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentJobStepRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebooksParams">
            <summary>
            SQL Agent Notebooks activity parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebooksResult">
            <summary>
            SQL Agent Notebook activity result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebooksRequest">
            <summary>
            SQL Agent Notebook request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebooksRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebookHistoryParams">
            <summary>
            SQL Agent Notebook history parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebookHistoryResult">
            <summary>
            SQL Agent Notebook history results
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebookHistoryRequest" -->
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebookHistoryRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentNotebookParams">
            <summary>
            SQL Agent create Notebook params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentNotebookResult">
            <summary>
            SQL Agent create Notebook result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentNotebookRequest">
            <summary>
            SQL Agent create Notebook request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentNotebookParams">
            <summary>
            SQL Agent update Notebook params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentNotebookResult">
            <summary>
            SQL Agent update Notebook result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentNotebookRequest">
            <summary>
            SQL Agent update Notebook request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentNotebookRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentNotebookParams">
            <summary>
            SQL Agent delete Notebook params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentNotebookRequest">
            <summary>
            SQL Agent delete Notebook request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentNotebookRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebookMaterializedParams">
            <summary>
            SQL Agent Notebook materialized params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebookMaterializedResult">
            <summary>
            SQL Agent Notebook materialized result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebookMaterializedRequest">
            <summary>
            SQL Agent Notebook materialized request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebookTemplateParams">
            <summary>
            SQL Agent Notebook templates params 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebookTemplateResult">
            <summary>
            SQL Agent Notebook templates results 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebookTemplateRequest">
            <summary>
            SQL Agent Notebook templates request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentNotebookRunNameParams">
            <summary>
            SQL Agent Notebook name update params 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentNotebookRunNameRequest">
            <summary>
            SQL Agent Notebook name update request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentNotebookRunPinParams">
            <summary>
            SQL Agent Notebook name update params 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentNotebookRunPinRequest">
            <summary>
            SQL Agent Notebook pin request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteMaterializedNotebookParams">
            <summary>
            SQL Agent Notebook pin params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteMaterializedNotebookResult">
            <summary>
            SQL Agent delete Notebook materialized result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteNotebookMaterializedRequest">
            <summary>
            SQL Agent delete materialized request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentOperatorInfo">
            <summary>
            a class for storing various properties of agent operators
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentOperatorsParams">
            <summary>
            SQL Agent Operators request parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentOperatorsResult">
            <summary>
            SQL Agent Operators request result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentOperatorsRequest">
            <summary>
            SQL Agent Operators request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentOperatorsRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentOperatorResult">
            <summary>
            SQL Agent Operator result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentOperatorParams">
            <summary>
            SQL Agent create Operator params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentOperatorRequest">
            <summary>
            SQL Agent create Operator request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentOperatorRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentOperatorParams">
            <summary>
            SQL Agent update Operator params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentOperatorRequest">
            <summary>
            SQL Agent update Operator request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentOperatorRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentOperatorParams">
            <summary>
            SQL Agent delete Operator params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentOperatorRequest">
            <summary>
            SQL Agent delete Operator request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentOperatorRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentProxyInfo">
            <summary>
            a class for storing various properties of agent proxy accounts
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentProxiesParams">
            <summary>
            SQL Agent proxy accounts parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentProxiesResult">
            <summary>
            SQL Agent proxy accounts result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentProxiesRequest">
            <summary>
            SQL Agent Proxy Accounts request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentProxiesRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentProxyResult">
            <summary>
            SQL Agent Proxy result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentProxyParams">
            <summary>
            SQL Agent create Proxy Account params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentProxyRequest">
            <summary>
            SQL Agent create Proxy request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentProxyRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentProxyParams">
            <summary>
            SQL Agent update Proxy params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentProxyRequest">
            <summary>
            SQL Agent update Proxy request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentProxyRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentProxyParams">
            <summary>
            SQL Agent delete Proxy params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentProxyRequest">
            <summary>
            SQL Agent delete Proxy request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentProxyRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentScheduleInfo">
            <summary>
            a class for storing various properties of agent schedules 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentSchedulesParams">
            <summary>
            SQL Agent Schedules parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentSchedulesResult">
            <summary>
            SQL Agent Schedules result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentSchedulesRequest">
            <summary>
            SQL Agent Schedules request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentSchedulesRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentScheduleResult">
            <summary>
            SQL Agent Schedule result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentScheduleParams">
            <summary>
            SQL Agent create Schedules params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentScheduleRequest">
            <summary>
            SQL Agent create Schedule request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.CreateAgentScheduleRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentScheduleParams">
            <summary>
            SQL Agent update Schedule params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentScheduleRequest">
            <summary>
            SQL Agent update Schedule request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.UpdateAgentScheduleRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentScheduleParams">
            <summary>
            SQL Agent delete Schedule params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentScheduleRequest">
            <summary>
            SQL Agent delete Schedule request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.Contracts.DeleteAgentScheduleRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.AgentAlertActions">
            <summary>
            AgentAlert class
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.AgentAlertActions.alertInfo">
            <summary>
            Agent alert info instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentAlertActions.#ctor(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,System.String,Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentAlertInfo,Microsoft.SqlTools.ServiceLayer.Management.ConfigAction,Microsoft.SqlTools.ServiceLayer.Agent.JobData)">
            <summary>
            Default constructor that will be used to create dialog
            </summary>
            <param name="dataContainer"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentAlertActions.DoPreProcessExecution(Microsoft.SqlTools.ServiceLayer.Management.RunType,Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode@)">
            <summary>
            called by ManagementActionBase.PreProcessExecution
            </summary>        
            <returns>
            true if regular execution should take place, false if everything,
            has been done by this function
            </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentNotebookHelper.ExecuteSqlQueries(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,System.String,System.Collections.Generic.List{Microsoft.Data.SqlClient.SqlParameter},System.String)">
            <summary>
            executes sql queries required by other agent notebook helper functions
            </summary>
            <param name="connInfo">connectionInfo generated from OwnerUri</param>
            <param name="sqlQuery">actual sql query to be executed</param>
            <param name="queryParameters">sql parameters required by the query</param>
            <param name="targetDatabase">the database on which the query will be executed</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentNotebookHelper.GetAgentNotebooks(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo)">
            <summary>
            a function which fetches notebooks jobs accessible to the user
            </summary>
            <param name="connInfo">connectionInfo generated from OwnerUri</param>
            <returns>array of agent notebooks</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentNotebookHelper.GetAgentNotebookHistories(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,System.String,System.String)">
            <summary>
            fetches all notebook histories for a particular notebook job
            </summary>
            <param name="connInfo">connectionInfo generated from OwnerUri</param>
            <param name="JobId">unique ID of the sql agent notebook job</param>
            <param name="targetDatabase">database used to store notebook metadata</param>
            <returns>array of notebook history info</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentNotebookHelper.UpdateMaterializedNotebookName(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebookHistoryInfo,System.String,System.String)">
            <summary>
            Changing the name of materialized notebook runs. Special case is handled where new row is 
            added for failed jobs which do not have an entry into the materialized table
            </summary>
            <param name="connInfo">connectionInfo generated from OwnerUri</param>
            <param name="agentNotebookHistory">actual history item to be pinned</param>
            <param name="targetDatabase">database on which the notebook history is stored</param>
            <param name="name">name for the materialized history</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentNotebookHelper.UpdateMaterializedNotebookPin(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebookHistoryInfo,System.String,System.Boolean)">
            <summary>
            Changing the pin state of materialized notebook runs. Special case is handled where new row is 
            added for failed jobs which do not have an entry into the materialized table
            </summary>
            <param name="connInfo">connectionInfo generated from OwnerUri</param>
            <param name="agentNotebookHistory">actual history item to be pinned</param>
            <param name="targetDatabase">database on which the notebook history is stored</param>
            <param name="pin">pin state for the history</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentNotebookHelper.DeleteMaterializedNotebook(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentNotebookHistoryInfo,System.String)">
            <summary>
            Delete a particular run of the job. Deletion mainly including clearing out the notebook,
            and notebook-error. The API doesn't delete the row because some notebook runs that have job
            error in them don't have an entry in the materialized table. For keeping track of those notebook
            runs the entry is added into the table with is_delete set to 1.
            </summary>
            <param name="connInfo">connectionInfo generated from OwnerUri</param>
            <param name="agentNotebookHistory">Actual history item to be deleted</param>
            <param name="targetDatabase">database on which the notebook history is stored</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorActions">
            <summary>
            Agent Operators management class
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorActions.#ctor(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentOperatorInfo,Microsoft.SqlTools.ServiceLayer.Management.ConfigAction)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorActions.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorActions.DoPreProcessExecution(Microsoft.SqlTools.ServiceLayer.Management.RunType,Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode@)" -->
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData">
            <summary>
            Proxy class for the AgentOperators dialog and property pages.
            Performs lazy instantiation of groups of data based around the operators dialog property pages
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.dataContainer">
            <summary>
            Data container
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.originalOperatorName">
            <summary>
            Original operator name. Empty if we are creating a new operator
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.createMode">
            <summary>
            Indicates whether we are creating an operator or not
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.generalInitialized">
            <summary>
            Has then data for the general page been initialised
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.historyInitialized">
            <summary>
            has the data for the history page been initialised
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.readOnly">
            <summary>
            True if this operator cannot be modified
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.alertNotifications">
            <summary>
            will be null if the alert notifications have not been initialised
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.jobNotifications">
            <summary>
            will be null if the job notifications have not been initialised
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.Operator">
            <summary>
            the current Operator SMO object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.Creating">
            <summary>
            indicates if the data is in create mode
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.Name">
            <summary>
            name of the object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.ReadOnly">
            <summary>
            Indicates if the dataobject is readonly
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.Enabled">
            <summary>
            indicates whether or not the operator is enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.EmailAddress">
            <summary>
            email address of this operator
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.PagerAddress">
            <summary>
            pager address of this operator
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.PagerDays">
            <summary>
            the days of the week the operator is active
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.WeekdayStartTime">
            <summary>
            Weekday start time for this operator to be active
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.WeekdayEndTime">
            <summary>
            Weekday end time for this operator to be active
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.SaturdayStartTime">
            <summary>
            Saturday start time for this operator to be active
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.SaturdayEndTime">
            <summary>
            Saturday end time for this operator to be active
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.SundayStartTime">
            <summary>
            Sunday start time for this operator to be active
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.SundayEndTime">
            <summary>
            Saturday end time for this operator to be active
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.AlertNotifications">
            <summary>
            Alerts that notify this operator
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.JobNotifications">
            <summary>
            Jobs that notify this operator. This has to be set through the jobs dialog and is read only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.LastEmailDate">
            <summary>
            Date this operator was last emailed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.LastPagerDate">
            <summary>
            Date this operator was last paged
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.LoadGeneralData">
            <summary>
            load data for the general tab. This can be called multiple times but will only load the data once intially
            or after a reset
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.LoadJobNotificationData">
            <summary>
            Load the data for the jobs that notify this operator. Can be called multiple times and will
            only load the data initially, or after a reset.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.LoadAlertNotificationData">
            <summary>
            Load alerts that notify this operator
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.LoadHistoryData">
            <summary>
            load the notifiaction history for the operator
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.ApplyChanges(Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentOperatorInfo)">
            <summary>
            apply any changes to the operator. If the operator does not exist create it.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.Reset">
            <summary>
            Reset the object to it's original state / reload any data from the erver
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.LoadGeneralDefaults">
            <summary>
            set general tab defaults
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.LoadJobNotificationDefaults">
            <summary>
            Set job notification defaults. This is just an empty list
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.LoadAlertNotificationDefaults">
            <summary>
            set the alert notification defaults. This list will contain all of the alerts
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.LoadHistoryDefaults">
            <summary>
            load defaults for the history page
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.GetJobServer">
            <summary>
            Get the job server. Will throw if it is not available
            </summary>
            <returns>Job server object</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.GetCurrentOperator">
            <summary> 
            Get the current operator. If we are creating this will be a new operator. If we are modifying
            an existing operator it will be the existing operator, and will throw if the operator has been 
            deleted.
            </summary>
            <returns>Operator object</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.ConvertAgentTime(System.DateTime)">
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.ConvertAgentTime(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.ConvertAgentTimeToInt(System.DateTime)">
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentOperatorsData.ConvertAgentTime(System.Int32)">
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.AgentJobNotificationHelper">
            <summary>
            Provides data to be consumed in the job notification grid
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentJobNotificationHelper.#ctor(System.String,Microsoft.SqlServer.Management.Smo.Agent.CompletionAction,Microsoft.SqlServer.Management.Smo.Agent.CompletionAction)">
            <summary>
            constructor
            </summary>
            <param name="name">job name</param>
            <param name="notifyEmail"></param>
            <param name="notifyPager"></param>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.AgentJobNotificationHelper.Name">
            <summary>
            Name of the job
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.AgentJobNotificationHelper.NotifyEmail">
            <summary>
            job email notification action
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.AgentJobNotificationHelper.NotifyPager">
            <summary>
            job pager notification action
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.AgentAlertNotificationHelper">
            <summary>
            Provides data to be consumed in the alert notification grid
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentAlertNotificationHelper.#ctor(System.String,System.Boolean,System.Boolean,Microsoft.SqlServer.Management.Smo.Agent.Alert)">
            <summary>
            constructor
            </summary>
            <param name="name">Name of the alert</param>
            <param name="notifyEmail"></param>
            <param name="notifyPager"></param>
            <param name="alert">Alert object</param>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.AgentAlertNotificationHelper.Name">
            <summary>
            Alert name
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.AgentAlertNotificationHelper.NotifyEmail">
            <summary>
            Indicates whether the alert will notify the operator through email
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.AgentAlertNotificationHelper.NotifyPager">
            <summary>
            Indicates whether the alert will notify the operator through pager
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.AgentAlertNotificationHelper.Alert">
            <summary>
            Alert object. optimisation to stop us having to lookup the alert object when needed
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentProxyAccountActions.#ctor(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentProxyInfo,Microsoft.SqlTools.ServiceLayer.Management.ConfigAction)">
            <summary>
            Main constructor. Creates all pages and adds them 
            to the tree control.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentProxyAccountActions.DoPreProcessExecution(Microsoft.SqlTools.ServiceLayer.Management.RunType,Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode@)">
            <summary>
            Main execution method. Creates or Alters a proxyAccount name.
            </summary>
            <returns>Always returns false</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentProxyAccountActions.CreateOrUpdateProxyAccount(Microsoft.SqlTools.ServiceLayer.Agent.Contracts.AgentProxyInfo)">
            <summary>
            It creates a new ProxyAccount or gets an existing
            one from JobServer and updates all properties.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentProxyAccountActions.UpdateProxyAccount(Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount)">
            <summary>
            Called to update the proxy object
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentProxyAccountActions.ExtractPermissionsToAddAndRemove(System.Data.DataTable,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            This method scans two list of principals - an existing one extracted from ProxyAccount object
            and a new one obtained from this panel and then it creates a two differential lists: one of
            principals to add and the other of principals to remove.
            </summary>
            <returns>true if there are any changes between existingPermissions and newPermissions lists</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentProxyAccountActions.GetProxyAccount(System.String,Microsoft.SqlServer.Management.Smo.Agent.JobServer)">
            <summary>
            Retrieves an instance of ProxyAccount from job server using name provided.
            If proxy does not exist it throws an exception.
            </summary>
            <param name="proxyAccountName">Name of the proxy to get</param>
            <param name="jobServer">Job server to get the proxy from</param>
            <returns>A valid proxy account.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentProxyAccountActions.GetProxyAccountName(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,System.String@,System.Boolean@)">
            <summary>
            Retrieves a proxy account name from shared data containter.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.AgentProxyAccountActions.ListProxyAccountsForSubsystem(Microsoft.SqlServer.Management.Common.ServerConnection,System.String,System.Boolean)">
            <summary>
            Uses enumerator to list names of all proxy accounts that use specified Agent SubSystem.
            </summary>
            <param name="serverConnection">Connection to use.</param>
            <param name="subsystemName">Requested SubSystem name</param>
            <param name="includeSysadmin">If set to true, 'sysadmin' account is added as a first entry in
            the list of proxy accounts.</param>
            <returns>An array containing names of proxy accounts</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.JobActions">
            <summary>
            JobActions provides basic SQL Server Agent Job configuration actions
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobActions.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobActions.DoPreProcessExecution(Microsoft.SqlTools.ServiceLayer.Management.RunType,Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode@)">
            <summary>
            called by ManagementActionBase.PreProcessExecution
            </summary>
            <returns>
            true if regular execution should take place, false if everything,
            has been done by this function
            </returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter">
            <summary>
            JobsFilter class - used to allow user to set filtering options for All Jobs Panel
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter.Microsoft#SqlTools#ServiceLayer#Agent#IFilterDefinition#ResetToDefault">
            <summary>
            resets values of this object to default contraint values
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter.Microsoft#SqlTools#ServiceLayer#Agent#IFilterDefinition#IsDefault">
            <summary>
            checks if the filter is the same with the default filter
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter.Microsoft#SqlTools#ServiceLayer#Agent#IFilterDefinition#ShallowClone">
            <summary>
            creates a shallow clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter.Microsoft#SqlTools#ServiceLayer#Agent#IFilterDefinition#ShallowCopy(System.Object)">
            <summary>
            setup-s filter definition based on a template
            </summary>
            <param name="template"></param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter.Microsoft#SqlTools#ServiceLayer#Agent#IFilterDefinition#Enabled">
            <summary>
            tells us if filtering is enabled or diabled
            a disabled filter lets everything pass and filters nothing out
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter.GetXPathClause">
            <summary>
            fetch an xpath clause used for filtering 
            jobs fetched by the enumerator.  
            note that all other properties must be filtered on the client 
            because enumerator will not filter properties that are fetched 
            at post-process time.  We can't even filter on the job name here
            since we have to do a case-insensitive "contains" comparision on the name.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.JobData">
            <summary>
            Summary description for JobPropertiesPrototype.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.JobData.ActionMode">
            <summary>
            Mode the dialog has been launched
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.JobFromMsxId">
            <summary>
            If the job has been pushed from an MSX then it's category ID will always be 1
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.urn">
            <summary>
            Urn of the Job object we were launched against. This will be null if we are creating a new job.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.context">
            <summary>
            Datacontainer that represents everything we need to know about the server.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.mode">
            <summary>
            Mode we are working in.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.originalName">
            <summary>
            original name of the job
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.jobIdString">
            <summary>
            Job GUID stored as string
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.currentName">
            <summary>
            current name of the job
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.owner">
            <summary>
            job owner
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.category">
            <summary>
            category for this job
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.description">
            <summary>
            job description
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.enabled">
            <summary>
            is the job enabled
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.source">
            <summary>
            source server for this job
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.originatingServer">
            <summary>
            originating server
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.created">
            <summary>
            Date and time this job was created
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.lastModified">
            <summary>
            when was the job last modified
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.lastExecution">
            <summary>
            when was the job last executed
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.operatorToEmail">
            <summary>
            operator that will be emailed
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.emailLevel">
            <summary>
            when the operator will be emailed
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.operatorToPage">
            <summary>
            operator will be paged
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.pageLevel">
            <summary>
            when they will be paged
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.eventLogLevel">
            <summary>
            when will an entry be written to the event log
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobData.deleteLevel">
            <summary>
            when will the job be deleted
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobData.JobCategoryIsLocal">
            If we're looking at an existing Job and this.Job is not
            null, then check if the job's category is local. We do
            this for the case where the job exists but has no targets,
            and therefore this.targetLocalServer is false even though
            we're in a local job category.
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobData.CheckAndLoadSmoCategories">
            <summary>
            Load all SMO categories.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobData.CheckAndLoadDisplayableCategories">
            <summary>
            Load only those categories that will be displayed in the categories drop-down based on
            TSX and MSX job status.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobData.ConvertStringToCategory(System.String)">
            <summary>
            Convert a string into a Localizable job category
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobData.JobExists(System.String)">
            <summary>
            Check SMO to see if job already exists.
            </summary>
            <param name="jobName"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobFetcher.FilterJobs(System.Collections.Generic.Dictionary{System.Guid,Microsoft.SqlTools.ServiceLayer.Agent.JobProperties},Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter)">
            <summary>
            Filter Jobs that matches criteria specified in JobActivityFilter
            here we filter jobs by properties that enumerator doesn't
            support filtering on.
            $ISSUE - - DevNote: Filtering Dictionaries can be easily done with Linq and System.Expressions in .NET 3.5
            This requires re-design of current code and might impact functionality / performance due to newer dependencies
            We need to consider this change in future enhancements for Job Activity monitor
            </summary>
            <param name="unfilteredJobs"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobFetcher.CheckJobRunnableStatusMatchesJob(Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter,Microsoft.SqlTools.ServiceLayer.Agent.JobProperties)">
            <summary>
            check if job runnable status in filter matches given job property
            </summary>
            <param name="filter"></param>
            <param name="jobProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobFetcher.CheckifNextRunDateIsGreater(Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter,Microsoft.SqlTools.ServiceLayer.Agent.JobProperties)">
            <summary>
            Check if next run date for given job property is greater than the one specified in the filter
            </summary>
            <param name="filter"></param>
            <param name="jobProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobFetcher.CheckIfLastRunDateIsGreater(Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter,Microsoft.SqlTools.ServiceLayer.Agent.JobProperties)">
            <summary>
            Check if last run date for given job property is greater than the one specified in the filter
            </summary>
            <param name="filter"></param>
            <param name="jobProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobFetcher.CheckIfLastRunOutcomeMatchesJob(Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter,Microsoft.SqlTools.ServiceLayer.Agent.JobProperties)">
            <summary>
            check if last run status filter matches given job property
            </summary>
            <param name="filter"></param>
            <param name="jobProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobFetcher.CheckIfJobStatusMatchesJob(Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter,Microsoft.SqlTools.ServiceLayer.Agent.JobProperties)">
            <summary>
            Check if job status filter matches given jobproperty
            </summary>
            <param name="filter"></param>
            <param name="jobProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobFetcher.CheckIfScheduledStatusMatchesJob(Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter,Microsoft.SqlTools.ServiceLayer.Agent.JobProperties)">
            <summary>
            Check if job scheduled status filter matches job
            </summary>
            <param name="filter"></param>
            <param name="jobProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobFetcher.CheckIfEnabledStatusMatchesJob(Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter,Microsoft.SqlTools.ServiceLayer.Agent.JobProperties)">
            <summary>
            Check if job enabled status matches job
            </summary>
            <param name="filter"></param>
            <param name="jobProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobFetcher.CheckIfCategoryMatchesJob(Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter,Microsoft.SqlTools.ServiceLayer.Agent.JobProperties)">
            <summary>
            Check if a category matches given jobproperty
            </summary>
            <param name="filter"></param>
            <param name="jobProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobFetcher.CheckIfNameMatchesJob(Microsoft.SqlTools.ServiceLayer.Agent.JobActivityFilter,Microsoft.SqlTools.ServiceLayer.Agent.JobProperties)">
            <summary>
            Check if name filter specified matches given jobproperty
            </summary>
            <param name="filter"></param>
            <param name="jobProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobFetcher.FetchJobs(System.String)">
            <summary>
            Fetch jobs for a given Urn
            </summary>
            <param name="urn"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.SqlTools.ServiceLayer.Agent.SeverityClass" -->
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.LogSourceJobHistory.InitializeInternal">
            <summary>
            does the actual initialization by retrieving Server/ErrorLog/Text via enumerator
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.LogSourceJobHistory.LogEntryJobHistory">
            <summary>
            LogEntryJobHistory - represents a SqlServer log entry
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.LogSourceJobHistory.LogEntryJobHistory.#ctor(System.String,System.Data.DataTable,System.Int32)">
            <summary>
            constructor used by log source to create 'job outcome' entries
            </summary>
            <param name="sourceName"></param>
            <param name="dt">data table containing all history info for a job</param>
            <param name="rowno">index for row that describes 'job outcome', rowno+1..n will describe 'job steps'</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.LogSourceJobHistory.LogEntryJobHistory.#ctor(System.String,System.Data.DataRow)">
            <summary>
            constructor used by a parent log entry to create child 'job step' sub-entries
            </summary>
            <param name="sourceName"></param>
            <param name="dr">row describing subentry</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.LogSourceJobHistory.LogEntryJobHistory.InitializeJobHistoryFromDataRow(System.String,System.Data.DataRow)">
            <summary>
            builds an entry based on a row returned by enurerator - that can be either a job step or a job outcome
            </summary>
            <param name="dr"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.LogSourceJobHistory.LogEntryJobHistory.InitializeJobHistoryStepSubEntries(System.String,System.Data.DataTable,System.Int32)">
            <summary>
            builds sub-entries (steps 1...n), until we find a 'job outcome' (step0) or end of history (meaning job is in progress)
            </summary>
            <param name="dt"></param>
            <param name="rowno">points to 1st subentry => points to 1st 'job step'</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.LogSourceJobHistory.LogEntryJobHistory.InitializeJobHistoryForRunningJob(System.String,System.Data.DataRow)">
            <summary>
            builds an entry for a running job - in this case there is no row available since agent logs outcomes only after job finishes
            </summary>
            <param name="sourceName"></param>
            <param name="dr">points to last entry - which should corespond to first step - so we can compute job name and duration</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.JobNotificationsActions">
            <summary>
            Summary description for JobNotifications.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobNotificationsActions.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.JobProperties">
            <summary>
            a class for storing various properties of agent jobs, 
            used by the Job Activity Monitor
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.JobSchedulesActions">
            <summary>
            Summary description for JobSchedulesActions.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobSchedulesActions.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobSchedulesActions.DoPreProcessExecution(Microsoft.SqlTools.ServiceLayer.Management.RunType,Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode@)">
            <summary>
            called by PreProcessExecution to enable derived classes to take over execution
            </summary>
            <param name="runType"></param>
            <param name="executionResult"></param>
            <returns>
            true if regular execution should take place, false if everything,
            has been done by this function
            </returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobSchedulesData.Schedules">
            <summary>
            List of JobScheduleData - in memory copy
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobSchedulesData.RemovedSchedules">
            <summary>
            List of removed schedules - in memory copy
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobSchedulesData.AddSchedule(Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData)">
            <summary>
            Add a schedule to JobScheduleData list - this does not apply changes on server
            </summary>
            <param name="schedule"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobSchedulesData.DeleteSchedule(Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData)">
            <summary>
            delete a schedule from JobScheduleData list - this does not apply changes on server
            </summary>
            <param name="schedule"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobSchedulesData.ApplyChanges(Microsoft.SqlServer.Management.Smo.Agent.Job)">
            <summary>
            Save changes to the job schedules - this applies changes to server
            </summary>
            <param name="job">owner job</param>
            <returns>true if any changes were commited</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobSchedulesData.IsSharedSchedule(Microsoft.SqlServer.Management.Smo.Agent.JobServer,Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData)">
            <summary>
            check if given schedule data is shared schedule or not
            </summary>
            <param name="js"></param>
            <param name="jobScheduleData"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.urn">
            <summary>
            Urn of this job
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.parent">
            <summary>
            parent object
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.alreadyCreated">
            <summary>
            indicates whether this step has already been created on the server
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.deleted">
            <summary>
             indicates if this jobstep will be deleted.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.originalName">
            <summary>
            Original name of this step
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.currentName">
            <summary>
            Current name
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.id">
            <summary>
            Current step id
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.originalId">
            <summary>
            Original step id
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.subSystem">
            <summary>
            Subsystem that will execute this step
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.failureAction">
            <summary>
            action to take if the step fails
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.successAction">
            <summary>
            Action to take if the step succeeds
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.failStep">
            <summary>
            step that will be executed on failure
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.failStepId">
            <summary>
            step that will be executed on failure
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.successStepId">
            <summary>
            step that will be executed on success
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.successStep">
            <summary>
            step that will be executed on success
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.cachedSource">
            <summary>
            JobStep source. We will use this to cache jobstep information to 
            be loaded. If this value is null there is either nothing to load
            or it has already been loaded
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.command">
            <summary>
            Command to execute
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.commandExecutionSuccessCode">
            <summary>
            Success code for successful execution of the command
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.databaseName">
            <summary>
            Database this step will execute against
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.databaseUserName">
            <summary>
            database user name this step will execute against
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.server">
            <summary>
            Server to execute this step against
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.priority">
            <summary>
            Priority of the job
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.outputFileName">
            <summary>
            output file name
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.appendToLogFile">
            <summary>
            indicates whether to append the output to a file
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.appendToStepHist">
            <summary>
            indicates whether to append the output to the step history
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.writeLogToTable">
            <summary>
            indicates whether to log to table
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.appendLogToTable">
            <summary>
            append the output to the table
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.retryAttempts">
            <summary>
            number of rety attempts
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.retryInterval">
            <summary>
            retrey interval
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.proxyName">
            <summary>
            proxy name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.JobStep">
            <summary>
            SMO jobstep that this is editing
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.Version">
            <summary>
            Server version
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.Subsystem">
            <summary>
            SubSystem
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.Created">
            <summary>
            indicates whether the job exists on the server
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.ToString">
            <summary>
            Generate a string for the object that can be shown in the start step combo
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.LoadData(Microsoft.SqlServer.Management.Smo.Agent.JobStep)">
            <summary>
            load data from and existing step
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.CheckAndLoadExpandedInformation">
            <summary>
            Load all data nessesary to edit a job
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.SetDefaults">
            <summary>
            Set defaults for a new empty job
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.LoadCompletionActions">
            <summary>
            Load the completion actions for the step
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.ApplyChanges(Microsoft.SqlServer.Management.Smo.Agent.Job)">
            <summary>
            Save changes to the job step
            </summary>
            <param name="job">owner job</param>
            <returns>True if any changes were saved</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepData.ApplyChanges(Microsoft.SqlServer.Management.Smo.Agent.Job,System.Boolean)">
            <summary>
            Save changes to the job step
            </summary>
            <param name="job">owner job</param>
            <param name="forceCreate">indicates if the job should be dropped and recreated</param>
            <returns>True if any changes were saved</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsActions">
            <summary>
            JobStepsActions
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.jobSteps">
            <summary>
            collection of job steps.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.deletedJobSteps">
            <summary>
            List of job steps to be deleted
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.parent">
            <summary>
            Parent JobData
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.context">
            <summary>
            Server context
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.startStep">
            <summary>
            Start Step
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.databases">
            <summary>
            list of available databases
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.Parent">
            <summary>
            JobData structure this object is part of
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.Version">
            <summary>
            Server Version
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.Mode">
            <summary>
            Mode in which the dialog has been launched
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.Steps">
            <summary>
            List of steps in this job
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.StartStep">
            <summary>
            The default start step
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.Databases">
            <summary>
            List of all available databases on the server
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.HasStepOrderChanged">
            <summary>
            Indicates whether or not the order of the steps has changed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.IsReadOnly">
            <summary>
            Indicates whether or not the Job is read only
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.#ctor(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,System.String,Microsoft.SqlTools.ServiceLayer.Agent.JobData)">
            <summary>
            Create a new JobStepsData object with a new job step
            </summary>
            <param name="context">server context</param>
            <param name="script">script for the job step</param>
            <param name="parent">owning data object</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.#ctor(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,Microsoft.SqlTools.ServiceLayer.Agent.JobData)">
            <summary>
            Create a new jobsteps data object
            </summary>
            <param name="context">server context</param>
            <param name="parent">owning data object</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.CommonInit(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,Microsoft.SqlTools.ServiceLayer.Agent.JobData,System.String)">
            <summary>
            Common initialization routines for constructrs
            </summary>
            <param name="context"></param>
            <param name="parent"></param>
            <param name="script"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.AddStep(Microsoft.SqlTools.ServiceLayer.Agent.JobStepData)">
            <summary>
            Add a new existing step to the end of the job step collection
            </summary>
            <param name="step"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.InsertStep(System.Int32,Microsoft.SqlTools.ServiceLayer.Agent.JobStepData)">
            <summary>
            Insert a jobstep into an existing location
            </summary>
            <param name="index"></param>
            <param name="step"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.DeleteStep(Microsoft.SqlTools.ServiceLayer.Agent.JobStepData)">
            <summary>
            Delete a jobstep
            </summary>
            <param name="step"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.GetObjectForStep(System.Int32)">
            <summary>
            Get a JobStepData object for a step id
            </summary>
            <param name="stepId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.FindUnreachableJobSteps">
            <summary>
            Check for any job steps that are unreachable.
            Because there are only two paths and we don't care about circular references
            we can use a simplified search, rather than a full graph dfs or bfs.
            </summary>
            <returns>List of unreachable steps, or an empty list if there are none</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.CheckIfLastStepCompletionActionWillChange">
            <summary>
            Checks to see if the Last steps success completion action will change.
            It will if we are editing a job, and the last steps Success Completion
            action is GoToNextStep
            </summary>
            <returns>true if changes will be automatically made to the last step</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.RecalculateStepIds">
            <summary>
            Recalculate the step ids of the contained job steps
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.CheckAndLoadDatabases">
            <summary>
            Delayed loading of database information
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.OnStepOrderChanged(System.EventArgs)">
            <summary>
            fire the StepOrderChanged event 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.Job">
            <summary>
             SMO job object we are manipulating
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.LoadFromScript(System.String)">
            <summary>
            Load a job step from a script
            </summary>
            <param name="script"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.LoadData">
            <summary>
            Load job steps from the server
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.SetDefaults">
            <summary>
            Set default values for a new empty job
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobStepsData.ApplyChanges(Microsoft.SqlServer.Management.Smo.Agent.Job)">
            <summary>
            Save changes to all job steps
            </summary>
            <param name="job">owner job</param>
            <returns>True if any changes were saved</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.JobStepSubSystems">
            <summary>
            Summary description for JobStepSubSystems.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.LocalizableCategory">
            <summary>
            Localizable Job category. SMO just reads the string names of 
            job categories from msdb.dbo.sysjobcategories, which is not localized.
            To show localized strings in the UI we have to convert it ourselves. We will
            use this object to do that.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.ManageSchedulesControl">
            <summary>
            Summary description for ManageSchedulesControl.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.ManageSchedulesControl.excludedScheduleId">
            <summary>
            any schedules that should not be shown in the list. Used when launched from
            the Job dialog as we don't want to list any schedules it already uses.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.ManageSchedulesControl.removedScheduleId">
            <summary>
            any schedules that are attached to the job, but are slated to be removed so should have job in list
            count decremented
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Agent.ManageSchedulesControl.m_jobName">
            <summary>
            if null we are in "manage schedules" mode (OE dbCommander)
            if not null we are in "pick schedule" mode (modal dialog)
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.ManageSchedulesControl.#ctor(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,System.String)">
            <summary>
            initialization - passing context (coming from parent dialog)
            
            display in "Pick up a schedule for job" mode
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.ManageSchedulesControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.ManageSchedulesControl.InitializeExcludedSchedules">
            <summary>
            Get the list of any schedules that should not be shown in the UI.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.ManageSchedulesControl.SendDataToServer">
            <summary>
            applies changes to server
            
            iterates through the grid rows (list of schedules)
                if [ ] enabled changed update the schedule
            iterates through the list of schedules marked for deletion
                delete them
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.ManageSchedulesControl.OnRunNow(System.Object)">
            <summary>
            implementation of OnPanelRunNow
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.ScheduleDialog">
            <summary>
            Summary description for Form1.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.ScheduleDialog.#ctor(Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData,Microsoft.SqlTools.ServiceLayer.Management.CDataContainer)">
            <summary>
            Constructs a new ScheduleDialog based upon a JobScheduleData object
            And provides context for that dialog so it can enable 'JobsInSchedule' button
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.ScheduleDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.ScheduleDialog.Schedule">
            <summary>
            Underlying JobScheduleData object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.ScheduleDialog.SimpleSchedule">
            <summary>
            SimpleJobSchedule structure
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.ScheduleDialog.Description">
            <summary>
            text description of the supplied schedule   
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule">
            <summary>
            simple job schedule structure.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.SetDefaults">
            <summary>
             set default values that the schedule dialog would show
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.ConvertIntToDateLocalized(System.Int32)">
            <summary>
            Convert SqlAgent date format to Urt DateTime struct.
            Also validates against the culture range.
            </summary>
            <param name="source">Agent date of the form yyyymmdd</param>
            <param name="minDate"></param>
            <param name="maxDate"></param>
            <returns>DateTime representation of the date</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.ConvertIntToDateTime(System.Int32)">
            <summary>
            Convert SqlAgent date format to Urt DateTime struct
            </summary>
            <param name="source">Agent date of the form yyyymmdd</param>
            <returns>DateTime representation of the date</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.ConvertDateTimeToInt(System.DateTime)">
            <summary>
            Convert DateTime to a SqlAgent date format
            </summary>
            <param name="source">source date</param>
            <returns>int of the form yyyymmdd</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.ConvertIntToTimeSpan(System.Int32)">
            <summary>
            convert an agent time to a timespan
            </summary>
            <param name="source">timespan in the form hhmmss</param>
            <returns>TimeSpan representing the agent time</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.ConvertTimeSpanToInt(System.TimeSpan)">
            <summary>
            Convert a TimeSpan to an agent compatible int
            </summary>
            <param name="source">Timespan</param>
            <returns>int in the form hhmmss</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.ToJobScheduleData">
            <summary>
            Create a new JobScheduleData based on the current structure
            </summary>
            <returns>JobScheduleData object</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.FromJobScheduleData(Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData)">
            <summary>
            create a new SimpleJobSchedule structure based upon a JobScheduleData object.
            </summary>
            <param name="source">JobScheduleData object</param>
            <returns>new SimpleJobSchedule</returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.Frequency">
            Called indirectly by ExpandFormatString through a TypeDescriptor lookup
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.StartDate">
            Called indirectly by ExpandFormatString through a TypeDescriptor lookup
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.StartTimeOfDay">
            Called indirectly by ExpandFormatString through a TypeDescriptor lookup
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.EndTimeOfDay">
            Called indirectly by ExpandFormatString through a TypeDescriptor lookup
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.TimeInterval">
            Called indirectly by ExpandFormatString through a TypeDescriptor lookup
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.DayOfMonth">
            Called indirectly by ExpandFormatString through a TypeDescriptor lookup
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.WeekOfMonth">
            Called indirectly by ExpandFormatString through a TypeDescriptor lookup
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.DayOfWeekList">
            Called indirectly by ExpandFormatString through a TypeDescriptor lookup
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.TimeIntervalUnit">
            Called indirectly by ExpandFormatString through a TypeDescriptor lookup
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.ScheduleRecurrenceAndTimes">
            Called indirectly by ExpandFormatString through a TypeDescriptor lookup
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.ScheduleDates">
            Called indirectly by ExpandFormatString through a TypeDescriptor lookup
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.DayOfWeek">
            Called indirectly by ExpandFormatString through a TypeDescriptor lookup
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.ToString">
            <summary>
            returns a localized string description (without needing to instantiate UI for that)
            
            output is similar with the one displayed by the dialog
            it is computed using following logic
            
            case:
            on agent startup:
                static string
            on idle:
                static string
            recurring:
                activePattern (day/week/month) description +
                nestedReccurence description (occurs once at/occcurs every...)
                duration (starttime/endtime)
                
                           [Flags] - src\shared\Smo\Enumerator\sql\src\enumstructs.cs
                           public enum FrequencyTypes
                           AutoStart = 64, // Scheduled activity is started when SQL Server Agent service starts. 
                           Daily = 4, // Schedule is evaluated daily. 
                           Monthly = 16, // Schedule is evaluated monthly. 
                           MonthlyRelative = 32, // Schedule is evaluated relative to a part of a month, such as the second week. 
                           OneTime = 1, // Scheduled activity will occur once at a scheduled time or event. 
                           OnIdle = 128, // SQL Server Agent service will schedule the activity for any time during which the processor is idle. 
                           Unknown = 0, // No schedule frequency, or frequency not applicable. 
                           Weekly = 8 // Schedule is evaluated weekly. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.ComputeDescription">
            <summary>
            computes description for a this schedule
            
            for info about the meaning of all those parameters see MSDN doc for sp_add_job_schedule
            e.g. http://msdn.microsoft.com/library/en-us/tsqlref/ts_sp_adda_6ijp.asp?frame=true
            </summary>
            <returns>localized description</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.SimpleJobSchedule.ExpandFormatString(System.String)">
            <summary>
            Substitutes property placeholders in a format string with property values.
            Example of format string:
            Occurs every {WeekOfMonth} {DaysOfWeekList} of every {FrequencyRecurrenceFactor} month(s) every {FrequencySubDayInterval} {FrequencySubDayIntervalUnit} between {ActiveStartTimeOfDay} and {ActiveEndTimeOfDay}.
            </summary>
            <param name="format">Format string.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData.#ctor">
            <summary>
            Initialize a new JobScheduleData object that is empty.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData.#ctor(Microsoft.SqlServer.Management.Smo.Agent.Job)">
            <summary>
            Initialize a new JobScheduleData object with a parent Job.
            </summary>
            <param name="parentJob">Job that will own this schedule.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData.#ctor(Microsoft.SqlServer.Management.Smo.Agent.JobSchedule)">
            <summary>
            Initializes a new JobScheduleData object that represents an existing Schedule.
            </summary>
            <param name="source">The SMO schedule that this object will represent.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData.#ctor(Microsoft.SqlServer.Management.Smo.Agent.JobSchedule,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new JobScheduleData object that represents an existing Schedule.
            </summary>
            <param name="source">The SMO schedule that this object will represent.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData.ApplyChanges">
            <summary>
            Save any changes
            </summary>
            <returns>True if any changes were commited</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData.UpdateSourceSchedule">
            <summary>
            Utility function that creates or updates the internal
            JobSchedule. The JobSchedule is not Created or Altered,
            however, so these changes are not written to SQL.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData.Validate(System.Version,System.Collections.ArrayList)">
            <summary>
            Validate job schedule data object
            </summary>
            <param name="version"></param>
            <param name="schedules"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData.Validate">
            <summary>
            Overloaded method to use in cases where no data container context is available.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData.Delete">
            <summary>
            Delete the schedule.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData.SetJob(Microsoft.SqlServer.Management.Smo.Agent.Job)">
            <summary>
            Provide context to create a new schedule.
            </summary>
            <param name="job">Job that will own this schedule.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData.SetJobSchedule(Microsoft.SqlServer.Management.Smo.Agent.JobSchedule)">
            <summary>
            Provide context to edit an existing schedule.
            </summary>
            <param name="schedule">Schedule this object represents.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData.SetJobServer(Microsoft.SqlServer.Management.Smo.Agent.JobServer)">
            <summary>
            marks job schedule to be created as a parentless shared schedule (no job associated with it) 
            </summary>
            <param name="sharedMode">true if you want to create this shared schedule without a parent (yukon only)</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData.LoadData(Microsoft.SqlServer.Management.Smo.Agent.JobSchedule)">
            <summary>
            setup internal members based upon a JobSchedule object.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData.SetDefaults">
            <summary>
            set defaults assuming no parent.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData.MaxAgentDateValue">
            <summary>
            Maximum date supported
            This is the same as the culture max date because SQL Agent range is larger than all cultures' ranges.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Agent.JobScheduleData.MaxAgentTimeValue">
            <summary>
            Maximum timespan for a SqlAgent job.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.AutoParameterizaition.Exceptions.ParameterizationFormatException">
            <summary>
            ParameterizationFormatException is used to surface format exceptions encountered in the TSQL batch to perform 
            auto-parameterization of literals for Always Encrypted.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.AutoParameterizaition.Exceptions.ParameterizationParsingException">
            <summary>
            ParameterizationParsingException is used to surface parse errors encountered in the TSQL batch while creating a parse tree
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.AutoParameterizaition.ScalarExpressionTransformer.StringToByteArray(System.String)">
            <summary>
            Converts a hex string to a byte[]
            Note: this method expects "0x" prefix to be stripped off from the input string
            For example, to convert the string "0xFFFF" to byte[] the input to this method should be "FFFF"
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.AutoParameterizaition.SqlParameterizer.Parameterize(System.Data.Common.DbCommand)">
            <summary>
            This method will parameterize the given SqlCommand.
            Any single literal on the RHS of a declare statement will be parameterized
            Any other literals will be ignored
            </summary>
            <param name="commandToParameterize">Command that will need to be parameterized</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.AutoParameterizaition.SqlParameterizer.CodeSense(System.String)">
            <summary>
            Parses the given script to provide message, warning, error.
            </summary>
            <param name="scriptToParse">Script that will be parsed</param>
            <param name="telemetryManager">Used to emit telemetry events</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.AutoParameterizaition.TsqlMultiVisitor">
            <summary>
            Entry point for SqlParameterization, this class is responsible for visiting the parse tree and identifying the scalar expressions to be parameterized
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.AzureBlob.BlobService.#ctor">
            <summary>
            Default, parameterless constructor.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.AzureBlob.BlobService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.AzureBlob.Contracts.CreateSasParams">
            <summary>
            Parameters passed for creating shared access signature
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.AzureBlob.Contracts.CreateSasParams.OwnerUri">
            <summary>
            Connection URI
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.AzureBlob.Contracts.CreateSasParams.BlobContainerUri">
            <summary>
            Blob container URI
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.AzureBlob.Contracts.CreateSasParams.BlobContainerKey">
            <summary>
            Blob container key
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.AzureBlob.Contracts.CreateSasParams.StorageAccountName">
            <summary>
            Storage account name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.AzureBlob.Contracts.CreateSasParams.ExpirationDate">
            <summary>
            Shared access signature expiration date
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.AzureBlob.Contracts.CreateSasResponse">
            <summary>
            Response class for creating shared access signature
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.AzureBlob.Contracts.CreateSasRequest">
            <summary>
            Request class for creating shared access signature
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.AzureBlob.SharedAccessSignatureCreator.WriteSASCredentialToSqlServer(System.String,System.String,System.String)">
            <summary>
            Create sql sas credential with the given credential name
            </summary>
            <param name="credentialName">Name of sas credential, here is the same of the full container url.</param>
            <param name="identity">Identity for credential, here is fixed as "Shared Access Signature"</param>
            <param name="secretString">Secret of credential, which is sharedAccessSignatureForContainer </param>
            <returns> The newly created SAS credential</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.AzureBlob.SharedAccessSignatureCreator.GetServiceSasUriForContainer(Azure.Storage.Blobs.BlobContainerClient,System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Create Shared Access Policy for container 
            Default Accesss permission is Write/List/Read/Delete
            </summary>
            <param name="container"></param>
            <param name="policyName"></param>
            <param name="selectedSaredAccessExpiryTime"></param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.AzureFunctions.AddSqlBindingOperation">
            <summary>
            Class to represent inserting a sql binding into an Azure Function
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlTools.ServiceLayer.AzureFunctions.AddSqlBindingOperation.GenerateInputBinding" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlTools.ServiceLayer.AzureFunctions.AddSqlBindingOperation.GenerateOutputBinding(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax)" -->
        <member name="T:Microsoft.SqlTools.ServiceLayer.AzureFunctions.AzureFunctionsService">
            <summary>
            Main class for Azure Functions service
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.AzureFunctions.AzureFunctionsService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.AzureFunctions.AzureFunctionsService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the service instance
            </summary>
            <param name="serviceHost"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.AzureFunctions.AzureFunctionsService.HandleAddSqlBindingRequest(Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.AddSqlBindingParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Utility.ResultStatus})">
            <summary>
            Handles request to add sql binding into Azure Functions
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.AzureFunctions.AzureFunctionsService.HandleGetAzureFunctionsRequest(Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.GetAzureFunctionsParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.GetAzureFunctionsResult})">
            <summary>
            Handles request to get the names of the Azure functions in a file
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.AzureFunctions.AzureFunctionsUtils.GetMethodsWithFunctionAttributes(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax)">
            <summary>
            Gets all the methods in the syntax tree with an Azure Function attribute
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.AzureFunctions.AzureFunctionsUtils.GetHttpTriggerBinding(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax)">
            <summary>
            Gets the info for a HttpTriggerBinding for the specified method (if such a binding exists)
            </summary>
            <param name="m">The method</param>
            <returns>The HttpTriggerBinding, or null if none exists</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.AzureFunctions.AzureFunctionsUtils.GetHttpTriggerAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax)">
            <summary>
            Gets the HttpTrigger attribute on the parameters for this method if one exists
            https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-http-webhook-trigger
            </summary>
            <param name="m">The method</param>
            <returns>The attribute if such a binding exists</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlTools.ServiceLayer.AzureFunctions.AzureFunctionsUtils.GetHttpRoute(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlTools.ServiceLayer.AzureFunctions.AzureFunctionsUtils.GetHttpOperations(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax)" -->
        <member name="M:Microsoft.SqlTools.ServiceLayer.AzureFunctions.AzureFunctionsUtils.GetFunctionName(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax)">
            <summary>
            Gets the function name from the FunctionName attribute on a method
            </summary>
            <param name="m">The method</param>
            <returns>The function name, or an empty string if the name attribute doesn't exist</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.AzureFunctions.AzureFunctionsUtils.TrimStringQuotes(System.String)">
            <summary>
            Removes the quotes (and $ for interpolated strings) around a string literal
            </summary>
            <param name="s">The string</param>
            <returns>The string without quotes</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.AzureFunctions.AzureFunctionsUtils.HasNet5StyleAzureFunctions(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax})">
            <summary>
            Checks if any of the method declarations have .NET 5 style Azure Function attributes
            .NET 5 AFs use the Function attribute, while .NET 3.1 AFs use FunctionName attribute
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.BindingType">
            <summary>
            Binding types for sql bindings for Azure Functions
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.AddSqlBindingParams">
            <summary>
            Parameters for adding a sql binding
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.AddSqlBindingParams.filePath">
            <summary>
            Gets or sets the filePath
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.AddSqlBindingParams.bindingType">
            <summary>
            Gets or sets the binding type
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.AddSqlBindingParams.functionName">
            <summary>
            Gets or sets the function name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.AddSqlBindingParams.objectName">
            <summary>
            Gets or sets the object name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.AddSqlBindingParams.connectionStringSetting">
            <summary>
            Gets or sets the connection string setting
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.AddSqlBindingRequest">
            <summary>
            Defines the Add Sql Binding request
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.GetAzureFunctionsParams">
            <summary>
            Parameters for getting the Azure functions in a file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.GetAzureFunctionsParams.FilePath">
            <summary>
            Gets or sets the filePath
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.AzureFunction.Name">
            <summary>
            The name of the function
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.AzureFunction.HttpTriggerBinding">
            <summary>
            The HttpTrigger binding if one is specified
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.HttpTriggerBinding.Route">
            <summary>
            The route specified
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.HttpTriggerBinding.Operations">
            <summary>
            The operations (methods) specified
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.GetAzureFunctionsResult">
            <summary>
            Parameters returned from a get Azure functions request
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.AzureFunctions.Contracts.GetAzureFunctionsRequest">
            <summary>
            Defines the get Azure functions request
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.AzureFunctions.GetAzureFunctionsOperation">
            <summary>
            Class to represent getting the Azure Functions in a file
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.AzureFunctions.GetAzureFunctionsOperation.GetAzureFunctions">
            <summary>
            Gets the names of all the azure functions in a file
            </summary>
            <returns>the result of trying to get the names of all the Azure functions in a file</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Cms.CmsService">
            <summary>
            Main class for CmsService
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Cms.CmsService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Cms.CmsService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the service instance
            </summary>
            <param name="serviceHost"></param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Cms.CmsService.ConnectionServiceInstance">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Cms.CmsService.CmsTask">
            <summary>
            Internal variable for testability
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Cms.Contracts.CreateCentralManagementServerParams">
            <summary>
            Paramaters to create Top level Central Management Server
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Cms.Contracts.AddRegisteredServerParams">
            <summary>
            Parameters to Add Registered Server to top level CMS
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Cms.Contracts.AddServerGroupParams">
            <summary>
            Parameters to Add Server Group to top level CMS
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Cms.Contracts.RemoveServerGroupParams">
            <summary>
            Parameters to Remove Server Group from CMS
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Cms.Contracts.RemoveRegisteredServerParams">
            <summary>
            Paramaters to remove a Registered Server from CMS tree
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Cms.Contracts.ListRegisteredServersParams">
            <summary>
            Paramaters to list a Registered Servers from CMS tree
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.CancelTokenKey">
            <summary>
            Used to uniquely identify a CancellationTokenSource associated with both
            a string URI and a string connection type.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo">
            <summary>
            Information pertaining to a unique connection instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.#ctor(Microsoft.SqlTools.ServiceLayer.Connection.ISqlConnectionFactory,System.String,Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.ConnectionId">
            <summary>
            Unique Id, helpful to identify a connection info object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.OwnerUri">
            <summary>
            URI identifying the owner/user of the connection. Could be a file, service, resource, etc.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.Factory">
            <summary>
            Factory used for creating the SQL connection associated with the connection info.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.ConnectionDetails">
            <summary>
            Properties used for creating/opening the SQL connection.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.ConnectionTypeToConnectionMap">
            <summary>
            A map containing all connections to the database that are associated with 
            this ConnectionInfo's OwnerUri.
            This is internal for testing access only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.IntellisenseMetrics">
            <summary>
            Intellisense Metrics
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.IsCloud">
            <summary>
            Returns true if the db connection is to any cloud instance
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.IsSqlDb">
            <summary>
            Returns true if the db connection is to a SQL db instance
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.IsSqlDW" -->
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.EngineEdition">
            <summary>
            Returns the connection Engine Edition
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.MajorVersion">
            <summary>
            Returns the major version number of the db we are connected to 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.AllConnections">
            <summary>
            All DbConnection instances held by this ConnectionInfo
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.AllConnectionTypes">
            <summary>
            All connection type strings held by this ConnectionInfo
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.CountConnections">
            <summary>
            The count of DbConnectioninstances held by this ConnectionInfo 
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.TryGetConnection(System.String,System.Data.Common.DbConnection@)">
            <summary>
            Try to get the DbConnection associated with the given connection type string. 
            </summary>
            <returns>true if a connection with type connectionType was located and out connection was set, 
            false otherwise </returns>
            <exception cref="T:System.ArgumentException">Thrown when connectionType is null or empty</exception>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.AddConnection(System.String,System.Data.Common.DbConnection)">
            <summary>
            Adds a DbConnection to this object and associates it with the given 
            connection type string. If a connection already exists with an identical 
            connection type string, it is not overwritten. Ignores calls where connectionType = null
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when connectionType is null or empty</exception>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.RemoveConnection(System.String)">
            <summary>
            Removes the single DbConnection instance associated with string connectionType
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when connectionType is null or empty</exception>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.RemoveAllConnections">
            <summary>
            Removes all DbConnection instances held by this object
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo.UpdateAuthToken(System.String,System.Int32)">
            <summary>
            Updates the Auth Token and Expires On fields
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionProviderOptionsHelper">
            <summary>
            Helper class for providing metadata about connection options
            </summary>         
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService">
            <summary>
            Main class for the Connection Management services
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.instance">
            <summary>
            Singleton service instance
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.Instance">
            <summary>
            Gets the singleton service instance
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.connectionFactory">
            <summary>
            The SQL connection factory object
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.cancelTupleToCancellationTokenSourceMap">
            <summary>
            A map containing all CancellationTokenSource objects that are associated with a given URI/ConnectionType pair.
            Entries in this map correspond to DbConnection instances that are in the process of connecting.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.TokenUpdateUris">
            <summary>
            A map containing the uris of connections with expired tokens, these editors should have intellisense
            disabled until the new refresh token is returned, upon which they will be removed from the map
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.OwnerToConnectionMap">
            <summary>
            Map from script URIs to ConnectionInfo objects
            This is internal for testing access only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.LockedDatabaseManager">
            <summary>
            Database Lock manager instance
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.ServiceHost">
            <summary>
            Service host object for sending/receiving requests/events.
            Internal for testing purposes.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.ConnectionQueue">
            <summary>
            Gets the connection queue
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.#ctor">
            <summary>
            Default constructor should be private since it's a singleton class, but we need a constructor
            for use in unit test mocking.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.GetConnectedQueue(System.String)">
            <summary>
            Returns a connection queue for given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.ConnectedQueues">
            <summary>
            Returns all the connection queues
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.RegisterConnectedQueue(System.String,Microsoft.SqlTools.ServiceLayer.LanguageServices.IConnectedBindingQueue)">
            <summary>
            Register a new connection queue if not already registered
            </summary>
            <param name="type"></param>
            <param name="connectedQueue"></param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.OnConnectionHandler">
            <summary>
            Callback for onconnection handler
            </summary>
            <param name="sqlConnection"></param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.OnDisconnectHandler">
            <summary>
            Callback for ondisconnect handler
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.onConnectionActivities">
            <summary>
            List of onconnection handlers
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.onDisconnectActivities">
            <summary>
            List of ondisconnect handlers
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.ConnectionFactory">
            <summary>
            Gets the SQL connection factory instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.#ctor(Microsoft.SqlTools.ServiceLayer.Connection.ISqlConnectionFactory)">
            <summary>
            Test constructor that injects dependency interfaces
            </summary>
            <param name="testFactory"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.TryRequestRefreshAuthToken(System.String)">
            <summary>
            Refreshes the auth token of a given connection, if needed
            </summary>
            <param name="ownerUri">The URI of the connection</param>
            <returns> True if a refreshed was needed and requested, false otherwise </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.UpdateAuthToken(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.TokenRefreshedParams)">
            <summary>
            Requests an update of the azure auth token
            </summary>
            <param name="refreshToken">The token to update</param>
            <returns>true upon successful update, false if it failed to find
            the connection</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.ValidateConnectParams(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectParams)">
            <summary>
            Validates the given ConnectParams object.
            </summary>
            <param name="connectionParams">The params to validate</param>
            <returns>A ConnectionCompleteParams object upon validation error,
            null upon validation success</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.Connect(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectParams)">
            <summary>
            Open a connection with the specified ConnectParams
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.GetConnectionCompleteParams(System.String,Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo)">
            <summary>
            Creates a ConnectionCompleteParams as a response to a successful connection.
            Also sets the DatabaseName and IsAzure properties of ConnectionInfo.
            </summary>
            <returns>A ConnectionCompleteParams in response to the successful connection</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.TryOpenConnection(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectParams)">
            <summary>
            Tries to create and open a connection with the given ConnectParams.
            </summary>
            <returns>null upon success, a ConnectionCompleteParams detailing the error upon failure</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.GetOrOpenConnection(System.String,System.String,System.Boolean)">
            <summary>
            Gets the existing connection with the given URI and connection type string. If none exists,
            creates a new connection. This cannot be used to create a default connection or to create a
            connection if a default connection does not exist.
            </summary>
            <param name="ownerUri">URI identifying the resource mapped to this connection</param>
            <param name="connectionType">
            What the purpose for this connection is. A single resource
            such as a SQL file may have multiple connections - one for Intellisense, another for query execution
            </param>
            <param name="alwaysPersistSecurity">
            Workaround for .Net Core clone connection issues: should persist security be used so that
            when SMO clones connections it can do so without breaking on SQL Password connections.
            This should be removed once the core issue is resolved and clone works as expected
            </param>
            <returns>A DB connection for the connection type requested</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.ClearPool(System.Data.Common.DbConnection)">
            <summary>
            Clears the connection pool if this is a SqlConnection of some kind.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.CancelConnect(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.CancelConnectParams)">
            <summary>
            Cancel a connection that is in the process of opening.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.ReplaceUri(System.String,System.String)">
            <summary>
            Reassign the uri associated with a connection info with a new uri.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.Disconnect(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.DisconnectParams)">
            <summary>
            Close a connection with the specified connection details.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.CancelConnections(System.String,System.String)">
            <summary>
            Cancel connections associated with the given ownerUri.
            If connectionType is not null, cancel the connection with the given connectionType
            If connectionType is null, cancel all pending connections associated with ownerUri.
            </summary>
            <returns>true if a single pending connection associated with the non-null connectionType was
            found and cancelled, false otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.CloseConnections(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,System.String)">
            <summary>
            Closes DbConnections associated with the given ConnectionInfo.
            If connectionType is not null, closes the DbConnection with the type given by connectionType.
            If connectionType is null, closes all DbConnections.
            </summary>
            <returns>true if connections were found and attempted to be closed,
            false if no connections were found</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.ListDatabases(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ListDatabasesParams)">
            <summary>
            List all databases on the server specified
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.RegisterOnConnectionTask(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.OnConnectionHandler)">
            <summary>
            Add a new method to be called when the onconnection request is submitted
            </summary>
            <param name="activity"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.RegisterOnDisconnectTask(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.OnDisconnectHandler)">
            <summary>
            Add a new method to be called when the ondisconnect request is submitted
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.HandleConnectRequest(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{System.Boolean})">
            <summary>
            Handle new connection requests
            </summary>
            <param name="connectParams"></param>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.HandleCancelConnectRequest(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.CancelConnectParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{System.Boolean})">
            <summary>
            Handle cancel connect requests
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.HandleDisconnectRequest(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.DisconnectParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{System.Boolean})">
            <summary>
            Handle disconnect requests
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.HandleListDatabasesRequest(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ListDatabasesParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ListDatabasesResponse})">
            <summary>
            Handle requests to list databases on the current server
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.IsDedicatedAdminConnection(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails)">
            <summary>
            Checks if a ConnectionDetails object represents a DAC connection
            </summary>
            <param name="connectionDetails"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.BuildConnectionString(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails)">
            <summary>
            Build a connection string from a connection details instance
            </summary>
            <param name="connectionDetails"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.CreateConnectionStringBuilder(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails)">
            <summary>
            Build a connection string builder a connection details instance
            </summary>
            <param name="connectionDetails"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.HandleGetConnectionStringRequest(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.GetConnectionStringParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{System.String})">
            <summary>
            Handles a request to get a connection string for the provided connection
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.HandleBuildConnectionInfoRequest(System.String,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails})">
            <summary>
            Handles a request to serialize a connection string
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.HandleChangeDatabaseRequest(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ChangeDatabaseParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{System.Boolean})">
            <summary>
            Handles a request to change the database for a connection
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.ChangeConnectionDatabaseContext(System.String,System.String,System.Boolean)">
            <summary>
            Change the database context of a connection.
            </summary>
            <param name="ownerUri">URI of the owner of the connection</param>
            <param name="newDatabaseName">Name of the database to change the connection to</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.InvokeOnConnectionActivities(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectParams)">
            <summary>
            Invokes the initial on-connect activities if the provided ConnectParams represents the default
            connection.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.InvokeOnDisconnectionActivities(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo)">
            <summary>
            Invokes the final on-disconnect activities if the provided DisconnectParams represents the default
            connection or is null - representing that all connections are being disconnected.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.HandleDisconnectTelemetry(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo)">
            <summary>
            Handles the Telemetry events that occur upon disconnect.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.OpenSqlConnection(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,System.String)">
            <summary>
            Create and open a new SqlConnection from a ConnectionInfo object
            Note: we need to audit all uses of this method to determine why we're
            bypassing normal ConnectionService connection management
            </summary>
            <param name="connInfo">The connection info to connect with</param>
            <param name="featureName">A plaintext string that will be included in the application name for the connection</param>
            <returns>A SqlConnection created with the given connection info</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService.OpenServerConnection(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,System.String)">
            <summary>
            Create and open a new ServerConnection from a ConnectionInfo object.
            This calls ConnectionService.OpenSqlConnection and then creates a
            ServerConnection from it.
            </summary>
            <param name="connInfo">The connection info to connect with</param>
            <param name="featureName">A plaintext string that will be included in the application name for the connection</param>
            <returns>A ServerConnection (wrapping a SqlConnection) created with the given connection info</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.ConnectionType">
            <summary>
            String constants that represent connection types. 
            
            Default: Connection used by the editor. Opened by the editor upon the initial connection. 
            Query: Connection used for executing queries. Opened when the first query is executed.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.BuildConnectionInfoRequest">
            <summary>
            Serialize Connection String request 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.CancelConnectParams">
            <summary>
            Parameters for the Cancel Connect Request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.CancelConnectParams.OwnerUri">
            <summary>
            A URI identifying the owner of the connection. This will most commonly be a file in the workspace
            or a virtual file representing an object in a database.         
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.CancelConnectParams.Type">
            <summary>
            The type of connection we are trying to cancel
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.CancelConnectRequest">
            <summary>
            Cancel connect request mapping entry 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ChangeDatabaseParams">
            <summary>
            Parameters for the List Databases Request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ChangeDatabaseParams.OwnerUri">
            <summary>
            URI of the owner of the connection requesting the list of databases.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ChangeDatabaseParams.NewDatabase">
            <summary>
            The database to change to
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ChangeDatabaseRequest">
            <summary>
            List databases request mapping entry 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionChangedNotification">
            <summary>
            ConnectionChanged notification mapping entry 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionChangedParams">
            <summary>
            Parameters for the ConnectionChanged Notification.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionChangedParams.OwnerUri">
            <summary>
            A URI identifying the owner of the connection. This will most commonly be a file in the workspace
            or a virtual file representing an object in a database.         
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionChangedParams.Connection">
            <summary>
            Contains the high-level properties about the connection, for display to the user.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionCompleteParams">
            <summary>
            Parameters to be sent back with a connection complete event
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionCompleteParams.OwnerUri">
            <summary>
            A URI identifying the owner of the connection. This will most commonly be a file in the workspace
            or a virtual file representing an object in a database.         
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionCompleteParams.ConnectionId">
            <summary>
            A GUID representing a unique connection ID
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionCompleteParams.Messages">
            <summary>
            Gets or sets any detailed connection error messages.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionCompleteParams.ErrorMessage">
            <summary>
            Error message returned from the engine for a connection failure reason, if any.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionCompleteParams.ErrorNumber">
            <summary>
            Error number returned from the engine for connection failure reason, if any.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionCompleteParams.ServerInfo">
            <summary>
            Information about the connected server.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionCompleteParams.ConnectionSummary">
            <summary>
            Gets or sets the actual Connection established, including Database Name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionCompleteParams.Type">
            <summary>
            The type of connection that this notification is for
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionCompleteParams.IsSupportedVersion">
            <summary>
            Gets or sets a boolean value indicates whether the current server version is supported by the service.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionCompleteParams.UnsupportedVersionMessage">
            <summary>
            Gets or sets the additional warning message about the unsupported server version.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionCompleteNotification">
            <summary>
            ConnectionComplete notification mapping entry 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails">
            <summary>
            Message format for the initial connection request
            </summary>
            <remarks>
            If this contract is ever changed, be sure to update ConnectionDetailsExtensions methods.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.Password">
            <summary>
            Gets or sets the connection password
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.ServerName">
            <summary>
            Gets or sets the connection server name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.DatabaseName">
            <summary>
            Gets or sets the connection database name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.UserName">
            <summary>
            Gets or sets the connection user name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.AuthenticationType">
            <summary>
            Gets or sets the authentication to use.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.ColumnEncryptionSetting">
            <summary>
            Gets or sets a value that specifies that Always Encrypted functionality is enabled in a connection.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.EnclaveAttestationProtocol">
            <summary>
            Gets or sets a value for Attestation Protocol.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.EnclaveAttestationUrl">
            <summary>
            Gets or sets the enclave attestation Url to be used with enclave based Always Encrypted.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.Encrypt">
            <summary>
            Gets or sets a Boolean value that indicates whether SQL Server uses SSL encryption for all data sent between the client and server if the server has a certificate installed.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.TrustServerCertificate">
            <summary>
            Gets or sets a value that indicates whether the channel will be encrypted while bypassing walking the certificate chain to validate trust.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.PersistSecurityInfo">
            <summary>
            Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.ConnectTimeout">
            <summary>
            Gets or sets the length of time (in seconds) to wait for a connection to the server before terminating the attempt and generating an error.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.ConnectRetryCount">
            <summary>
            The number of reconnections attempted after identifying that there was an idle connection failure.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.ConnectRetryInterval">
            <summary>
            Amount of time (in seconds) between each reconnection attempt after identifying that there was an idle connection failure.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.ApplicationName">
            <summary>
            Gets or sets the name of the application associated with the connection string.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.WorkstationId">
            <summary>
            Gets or sets the name of the workstation connecting to SQL Server.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.ApplicationIntent">
            <summary>
            Declares the application workload type when connecting to a database in an SQL Server Availability Group.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.CurrentLanguage">
            <summary>
            Gets or sets the SQL Server Language record name.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.Pooling">
            <summary>
            Gets or sets a Boolean value that indicates whether the connection will be pooled or explicitly opened every time that the connection is requested.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.MaxPoolSize">
            <summary>
            Gets or sets the maximum number of connections allowed in the connection pool for this specific connection string.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.MinPoolSize">
            <summary>
            Gets or sets the minimum number of connections allowed in the connection pool for this specific connection string.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.LoadBalanceTimeout">
            <summary>
            Gets or sets the minimum time, in seconds, for the connection to live in the connection pool before being destroyed.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.Replication">
            <summary>
            Gets or sets a Boolean value that indicates whether replication is supported using the connection.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.AttachDbFilename">
            <summary>
            Gets or sets a string that contains the name of the primary data file. This includes the full path name of an attachable database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.FailoverPartner">
            <summary>
            Gets or sets the name or address of the partner server to connect to if the primary server is down.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.MultiSubnetFailover">
            <summary>
            If your application is connecting to an AlwaysOn availability group (AG) on different subnets, setting MultiSubnetFailover=true provides faster detection of and connection to the (currently) active server.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.MultipleActiveResultSets">
            <summary>
            When true, an application can maintain multiple active result sets (MARS).
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.PacketSize">
            <summary>
            Gets or sets the size in bytes of the network packets used to communicate with an instance of SQL Server.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.Port">
            <summary>
            Gets or sets the port to use for the TCP/IP connection
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.TypeSystemVersion">
            <summary>
            Gets or sets a string value that indicates the type system the application expects.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.ConnectionString">
            <summary>
            Gets or sets a string value to be used as the connection string. If given, all other options will be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.GroupId">
            <summary>
            Gets or sets the group ID
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails.DatabaseDisplayName">
            <summary>
            Gets or sets the database display name
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetailsExtensions">
            <summary>
            Extension methods for the ConnectionDetails contract class
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetailsExtensions.Clone(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails)">
            <summary>
            Create a copy of a connection details object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionRequest">
            <summary>
            Connect request mapping entry 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.IConnectionSummary.ServerName">
            <summary>
            Gets or sets the connection server name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.IConnectionSummary.DatabaseName">
            <summary>
            Gets or sets the connection database name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.IConnectionSummary.UserName">
            <summary>
            Gets or sets the connection user name
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionSummary">
            <summary>
            Provides high level information about a connection.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionSummary.ServerName">
            <summary>
            Gets or sets the connection server name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionSummary.DatabaseName">
            <summary>
            Gets or sets the connection database name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionSummary.UserName">
            <summary>
            Gets or sets the connection user name
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionSummaryComparer">
            <summary>
            Treats connections as the same if their server, db and usernames all match
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionSummaryExtensions">
            <summary>
            Extension methods to ConnectionSummary
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionSummaryExtensions.Clone(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.IConnectionSummary)">
            <summary>
            Create a copy of a ConnectionSummary object
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectParams">
            <summary>
            Parameters for the Connect Request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectParams.OwnerUri">
            <summary>
            A URI identifying the owner of the connection. This will most commonly be a file in the workspace
            or a virtual file representing an object in a database.         
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectParams.Connection">
            <summary>
            Contains the required parameters to initialize a connection to a database.
            A connection will identified by its server name, database name and user name.
            This may be changed in the future to support multiple connections with different 
            connection properties to the same database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectParams.Type">
            <summary>
            The type of this connection. By default, this is set to ConnectionType.Default.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectParams.Purpose">
            <summary>
            The porpose of the connection to keep track of open connections
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectParamsExtensions">
            <summary>
            Extension methods to ConnectParams
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectParamsExtensions.IsValid(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectParams,System.String@)">
            <summary>
            Check that the fields in ConnectParams are all valid
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.DisconnectParams">
            <summary>
            Parameters for the Disconnect Request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.DisconnectParams.OwnerUri">
            <summary>
            A URI identifying the owner of the connection. This will most commonly be a file in the workspace
            or a virtual file representing an object in a database.         
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.DisconnectParams.Type">
            <summary>
            The type of connection we are disconnecting. If null, we will disconnect all connections.
            connections. 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.DisconnectRequest">
            <summary>
            Disconnect request mapping entry 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.GetConnectionStringParams">
            <summary>
            Parameters for the Get Connection String Request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.GetConnectionStringParams.OwnerUri">
            <summary>
            URI of the owner of the connection
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.GetConnectionStringParams.ConnectionDetails">
            <summary>
            Connection information of the connection
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.GetConnectionStringParams.IncludePassword">
            <summary>
            Indicates whether the password should be return in the connection string
            default is set to false
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.GetConnectionStringParams.IncludeApplicationName">
            <summary>
            Indicates whether the application name should be return in the connection string
            default is set to true
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.GetConnectionStringRequest">
            <summary>
            Get Connection String request
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.LanguageFlavorChangeParams">
            <summary>
            Parameters for the Language Flavor Change notification.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.LanguageFlavorChangeParams.Uri">
            <summary>
            A URI identifying the affected resource         
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.LanguageFlavorChangeParams.Language">
            <summary>
            The primary language
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.LanguageFlavorChangeParams.Flavor">
            <summary>
            The specific language flavor that is being set
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.LanguageFlavorChangeNotification">
            <summary>
            Defines an event that is sent from the client to notify that
            the client is exiting and the server should as well.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ListDatabasesParams">
            <summary>
            Parameters for the List Databases Request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ListDatabasesParams.OwnerUri">
            <summary>
            URI of the owner of the connection requesting the list of databases.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ListDatabasesParams.IncludeDetails">
            <summary>
            whether to include the details of the databases.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ListDatabasesRequest">
            <summary>
            List databases request mapping entry 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ListDatabasesResponse">
            <summary>
            Message format for the list databases response
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ListDatabasesResponse.DatabaseNames">
            <summary>
            Gets or sets the list of database names.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ListDatabasesResponse.Databases">
            <summary>
            Gets or sets the databases details.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.RefreshTokenParams.TenantId">
            <summary>
            ID of the tenant
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.RefreshTokenParams.Provider">
            <summary>
            Gets or sets the provider that indicates the type of linked account to query.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.RefreshTokenParams.Resource">
            <summary>
            Gets or sets the identifier of the target resource of the requested token.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.RefreshTokenParams.AccountId">
            <summary>
            Gets or sets the account ID
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.RefreshTokenParams.Uri">
            <summary>
            Gets or sets the URI
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.RefreshTokenNotification">
            <summary>
            Refresh token request mapping entry 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.TokenRefreshedParams.Token">
            <summary>
            Gets or sets the refresh token.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.TokenRefreshedParams.ExpiresOn" -->
        <!-- Badly formed XML comment ignored for member "P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.TokenRefreshedParams.Uri" -->
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.RequestSecurityTokenParams.Authority">
            <summary>
            Gets or sets the address of the authority to issue token.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.RequestSecurityTokenParams.Provider">
            <summary>
            Gets or sets the provider that indicates the type of linked account to query.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.RequestSecurityTokenParams.Resource">
            <summary>
            Gets or sets the identifier of the target resource that is the recipient of the requested token.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.RequestSecurityTokenParams.Scope">
            <summary>
            Gets or sets the scope of the authentication request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.RequestSecurityTokenResponse.AccountKey">
            <summary>
            Gets or sets the key that uniquely identifies a particular linked account.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.RequestSecurityTokenResponse.Token">
            <summary>
            Gets or sets the access token.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.SecurityTokenRequest">
            <summary>
            SecurityToken Request mapping entry 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ServerInfo">
            <summary>
            Contract for information on the connected SQL Server instance.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ServerInfo.ServerMajorVersion">
            <summary>
            The major version of the SQL Server instance.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ServerInfo.ServerMinorVersion">
            <summary>
            The minor version of the SQL Server instance.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ServerInfo.ServerReleaseVersion">
            <summary>
            The build of the SQL Server instance.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ServerInfo.EngineEditionId">
            <summary>
            The ID of the engine edition of the SQL Server instance.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ServerInfo.ServerVersion">
            <summary>
            String containing the full server version text.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ServerInfo.ServerLevel">
            <summary>
            String describing the product level of the server.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ServerInfo.ServerEdition">
            <summary>
            The edition of the SQL Server instance.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ServerInfo.IsCloud">
            <summary>
            Whether the SQL Server instance is running in the cloud (Azure) or not.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ServerInfo.AzureVersion">
            <summary>
            The version of Azure that the SQL Server instance is running on, if applicable.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ServerInfo.OsVersion">
            <summary>
            The Operating System version string of the machine running the SQL Server instance.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ServerInfo.MachineName">
            <summary>
            The Operating System version string of the machine running the SQL Server instance.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ServerInfo.CpuCount">
            <summary>
            The CPU count of the host running the server.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ServerInfo.PhysicalMemoryInMB">
            <summary>
            The physical memory of the host running the server in MBs.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ServerInfo.Options">
            <summary>
            Server options
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.IFeatureWithFullDbAccess">
            <summary>
            Any operation that needs full access to databas should implement this interface.
            Make sure to call GainAccessToDatabase before the operation and ReleaseAccessToDatabase after
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.IFeatureWithFullDbAccess.LockedDatabaseManager">
            <summary>
            Database Lock Manager
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.IFeatureWithFullDbAccess.GainAccessToDatabase">
            <summary>
            Makes sure the feature has fill access to the database
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.IFeatureWithFullDbAccess.ReleaseAccessToDatabase">
            <summary>
            Release the access to db
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.IFeatureWithFullDbAccess.ServerName">
            <summary>
            Server name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Connection.IFeatureWithFullDbAccess.DatabaseName">
            <summary>
            Database name
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.ISqlConnectionFactory">
            <summary>
            Interface for the SQL Connection factory
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.ISqlConnectionFactory.CreateSqlConnection(System.String,System.String)">
            <summary>
            Create a new SQL Connection object
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.ListDatabaseRequestHandlerFactory">
            <summary>
            Factory class for ListDatabasesRequest handler
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.IListDatabaseRequestHandler">
            <summary>
            Interface of ListDatabasesRequest handler
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.ListDatabaseRequestHandler`1">
            <summary>
            Base handler
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.DatabaseNamesHandler">
            <summary>
            database names handler
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.SqlServerDatabaseDetailHandler">
            <summary>
            Standalone SQL Server database detail handler
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.SqlDBDatabaseDetailHandler">
            <summary>
            SQL DB database detail handler
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.ReliableConnection.RetryCallbackEventArgs">
            <summary>
            Defines a arguments for event handler which will be invoked whenever a retry condition is encountered.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Connection.SqlConnectionFactory">
            <summary>
            Factory class to create SqlClientConnections
            The purpose of the factory is to make it easier to mock out the database
            in 'offline' unit test scenarios.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Connection.SqlConnectionFactory.CreateSqlConnection(System.String,System.String)">
            <summary>
            Creates a new SqlConnection object
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DacFxParams">
            <summary>
            Parameters for a DacFx request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DacFxParams.PackageFilePath">
            <summary>
            Gets or sets package filepath
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DacFxParams.DatabaseName">
            <summary>
            Gets or sets name for database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DacFxParams.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DacFxParams.TaskExecutionMode">
            <summary>
            Executation mode for the operation. Default is execution
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DacFxResult">
            <summary>
            Parameters returned from a DacFx request.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeploymentOptionProperty`1">
            <summary>
            DeploymentOptionProperty class to define deployment options default value, description, and displayNames
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeploymentOptionProperty`1.Value">
            <summary>
            Default and selected value of the deployment option
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeploymentOptionProperty`1.Description">
            <summary>
            Description of the deployment option
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeploymentOptionProperty`1.DisplayName">
            <summary>
            Display name of the deployment option
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeploymentOptions">
            <summary>
            Class to define deployment options.
            These property names will be given to the DeploymentOptions interface defined in ADS 'azuredatastudio\extensions\mssql\src\mssql.d.ts' and 'azuredatastudio\extensions\types\vscode-mssql.d.ts'
            BooleanOptionsDictionary will automatically gets the newly added boolean properties from DacFx, All other types should be added here and ADS
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeploymentOptions.ExcludeObjectTypes" -->
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeploymentOptions.BooleanOptionsDictionary">
            <summary>
            BooleanOptionsDictionary contains all boolean type deployment options
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeploymentOptions.ObjectTypesDictionary" -->
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeploymentOptions.InitializeFromProfile(Microsoft.SqlServer.Dac.DacDeployOptions,System.String)">
            <summary>
            initialize deployment options from the options in a publish profile.xml
            </summary>
            <param name="options">options created from the profile</param>
            <param name="profilePath"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeploymentOptions.InitializeBooleanTypeOptions(Microsoft.SqlServer.Dac.DacDeployOptions)">
            <summary>
            Populates BooleanOptionsDictionary with the boolean type properties
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeploymentOptions.InitializeNonBooleanTypeOptions(Microsoft.SqlServer.Dac.DacDeployOptions)">
            <summary>
            Preparing all non boolean properties (except BooleanOptionsDictionary)
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeploymentOptions.InitializeObjectTypesDictionary">
            <summary>
            Preparing all object types which are considered as boolean options
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeploymentOptions.GetDeploymentOptionProp(System.Reflection.PropertyInfo,Microsoft.SqlServer.Dac.DacDeployOptions)">
            <summary>
            Prepares and returns the value and description of a property
            </summary>
            <param name="prop"></param>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeploymentOptions.ConvertObjectTypeToStringArray(Microsoft.SqlServer.Dac.ObjectType[])">
            <summary>
            Converting ObjectType to String[] as the deployemnt options excludeObjectTypes is string[] but the DacFx DacDeployOptions excludeObjectTypes is of ObjectType[]
            Loading options from profile and schema compare .scmp file should need this conversion
            </summary>
            <param name="excludeObjectTypes"></param>
            <returns>string[]</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeployParams">
            <summary>
            Parameters for a DacFx deploy request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeployParams.UpgradeExisting">
            <summary>
            Gets or sets if upgrading existing database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeployParams.SqlCommandVariableValues">
            <summary>
            Gets or sets SQLCMD variables for deployment
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeployParams.DeploymentOptions">
            <summary>
            Gets or sets the options for deployment
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeployRequest">
            <summary>
            Defines the DacFx deploy request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ExportParams">
            <summary>
            Parameters for a DacFx export request.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ExportRequest">
            <summary>
            Defines the DacFx export request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ExtractParams">
            <summary>
            Parameters for a DacFx extract request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ExtractParams.ApplicationName">
            <summary>
            Gets or sets the string identifier for the DAC application
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ExtractParams.ApplicationVersion">
            <summary>
            Gets or sets the version of the DAC application
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ExtractParams.ExtractTarget">
            <summary>
            Gets or sets the target for extraction
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ExtractRequest">
            <summary>
            Defines the DacFx extract request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateDeployPlanParams">
            <summary>
            Parameters for a DacFx generate deploy plan request.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateDeployPlanRequest">
            <summary>
            Defines the DacFx generate deploy plan request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateDeployPlanRequestResult">
            <summary>
            Parameters returned from a generate deploy script request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateDeployPlanRequestResult.Report">
            <summary>
            An xml string that details the alerts and the operations for deploying the specified dacpac to the database
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateDeployScriptParams">
            <summary>
            Parameters for a DacFx generate deploy script request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateDeployScriptParams.GenerateDeploymentReport">
            <summary>
            Gets or sets whether a Deployment Report should be generated during deploy.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateDeployScriptParams.DeploymentReportFilePath">
            <summary>
            Gets or sets the filepath where to save the deployment report
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateDeployScriptParams.SqlCommandVariableValues">
            <summary>
            Gets or sets SQLCMD variables for script generation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateDeployScriptParams.DeploymentOptions">
            <summary>
            Gets or sets the options for deployment
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateDeployScriptRequest">
            <summary>
            Defines the DacFx generate deploy script request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateTSqlModelParams">
            <summary>
            Parameters to generate a SQL model
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateTSqlModelParams.ProjectUri">
            <summary>
            URI of the project file this model is for
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateTSqlModelParams.ModelTargetVersion">
            <summary>
            The version of Sql Server to target
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateTSqlModelParams.FilePaths">
            <summary>
            Gets or sets the Sql script file paths.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateTSqlModelRequest">
            <summary>
            Defines the generate sql model request
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GetDefaultPublishOptionsParams">
            <summary>
            Parameters for a DacFx get default publish options request.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GetDefaultPublishOptionsRequest">
            <summary>
            Defines the DacFx get default publish options request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GetOptionsFromProfileParams">
            <summary>
            Parameters for a DacFx get options from profile request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GetOptionsFromProfileParams.ProfilePath">
            <summary>
            Gets or sets the profile path
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DacFxOptionsResult">
            <summary>
            Parameters returned from a DacFx get options from profile request.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GetOptionsFromProfileRequest">
            <summary>
            Defines the DacFx get options from profile request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ImportParams">
            <summary>
            Parameters for a DacFx import request.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ImportRequest">
            <summary>
            Defines the DacFx import request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ParseTSqlScriptRequestParams">
            <summary>
            Parameters for a parse T-SQL script request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ParseTSqlScriptRequestParams.FilePath">
            <summary>
            Gets or sets the script file path.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ParseTSqlScriptRequestParams.DatabaseSchemaProvider">
            <summary>
            Gets or sets the DSP.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ParseTSqlScriptResult">
            <summary>
            Result for the ParseTSqlScript Request.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ParseTSqlScriptRequest">
            <summary>
            Defines the parse T-SQL script request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ValidateStreamingJobParams">
            <summary>
            Parameters for a Validate Streaming Job request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ValidateStreamingJobParams.PackageFilePath">
            <summary>
            Gets or sets the package file path
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ValidateStreamingJobParams.CreateStreamingJobTsql">
            <summary>
            Gets or sets the create streaming job TSQL.  Should not be used if Statement is set.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ValidateStreamingJobResult">
            <summary>
            Parameters returned from a DacFx validate streaming job request.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ValidateStreamingJobRequest">
            <summary>
            Defines the DacFx validate streaming job request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxOperation">
            <summary>
            Base class for DacFx operations
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxOperation.OperationId">
            <summary>
            Gets the unique id associated with this instance.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxOperation.ErrorMessage">
            <summary>
            The error occurred during operation
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxOperation.Cancel">
            <summary>
            Cancel operation
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxOperation.Dispose">
            <summary>
            Disposes the operation.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxService">
            <summary>
            Main class for DacFx service
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxService.projectModels">
            <summary>
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> that maps project uri to model
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the service instance
            </summary>
            <param name="serviceHost"></param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxService.ActiveOperations">
            <summary>
            The collection of active operations
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxService.HandleExportRequest(Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ExportParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DacFxResult})">
            <summary>
            Handles request to export a bacpac
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxService.HandleImportRequest(Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ImportParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DacFxResult})">
            <summary>
            Handles request to import a bacpac
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxService.HandleExtractRequest(Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ExtractParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DacFxResult})">
            <summary>
            Handles request to extract a dacpac
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxService.HandleDeployRequest(Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeployParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DacFxResult})">
            <summary>
            Handles request to deploy a dacpac
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxService.HandleGenerateDeployScriptRequest(Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateDeployScriptParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DacFxResult})">
            <summary>
            Handles request to generate deploy script
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxService.HandleGenerateDeployPlanRequest(Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateDeployPlanParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GenerateDeployPlanRequestResult})">
            <summary>
            Handles request to generate deploy plan
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxService.HandleGetOptionsFromProfileRequest(Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GetOptionsFromProfileParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DacFxOptionsResult})">
            <summary>
            Handles request to get the options from a publish profile
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxService.HandleValidateStreamingJobRequest(Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ValidateStreamingJobParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.ValidateStreamingJobResult})">
            <summary>
            Handles request to validate an ASA streaming job
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxService.HandleGetDefaultPublishOptionsRequest(Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.GetDefaultPublishOptionsParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DacFxOptionsResult})">
            <summary>
            Handles request to create default publish options for DacFx
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxService.ConnectionServiceInstance">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.DacFxService.PerformOperation(Microsoft.SqlTools.ServiceLayer.DacFx.DacFxOperation,Microsoft.SqlTools.ServiceLayer.TaskServices.TaskExecutionMode)">
            <summary>
            For testing purpose only
            </summary>
            <param name="operation"></param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.DeployOperation">
            <summary>
            Class to represent an in-progress deploy operation
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.ExportOperation">
            <summary>
            Class to represent an in-progress export operation
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.ExtractOperation">
            <summary>
            Class to represent an in-progress extract operation
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.GenerateDeployPlanOperation">
            <summary>
            Class to represent an in-progress generate deploy plan operation
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.GenerateDeployScriptOperation">
            <summary>
            Class to represent an in-progress generate deploy script operation
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.GenerateTSqlModelOperation">
            <summary>
            Class to represent creating a dacfx model
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.GenerateTSqlModelOperation.GenerateTSqlModel">
            <summary>
            Generate model from sql files, if no sql files are passed in then it generates an empty model.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.ImportOperation">
            <summary>
            Class to represent an in-progress import operation
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DacFx.ValidateStreamingJobOperation">
            <summary>
            Class to represent a validate streaming job operation
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.ValidateStreamingJobOperation.ValidateQuery">
            <summary>
            Validates the transformation query/statement for a streaming job against the model contained in a dacpac
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DacFx.ValidateStreamingJobOperation.ExtractStreamingJobData(System.String)">
            <summary>
            Extracts the streaming job's name and transformation statement/query from the TSQL script
            </summary>
            <param name="createStreamingJobTsql"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupOperation">
            <summary>
            This class implements backup operations
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupOperation.constDeviceTypeFile">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupOperation.backupInfo">
            <summary>
            UI input values
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupOperation.initialBackupDestination">
            this is used when the backup dialog is launched in the context of a backup device
            The InitialBackupDestination will be loaded in LoadData
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupOperation.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupOperation.Initialize(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,Microsoft.Data.SqlClient.SqlConnection)">
            <summary>
            Initialize variables
            </summary>
            <param name="dataContainer"></param>
            <param name="sqlConnection"></param>
            <param name="input"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupOperation.SetBackupInput(Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo)">
            <summary>
            Set backup input properties
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupOperation.CreateBackupConfigInfo(System.String)">
            <summary>
            Return backup configuration data
            </summary>
            <param name="databaseName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupOperation.ErrorMessage">
            <summary>
            The error occurred during backup operation
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupOperation.Execute">
            <summary>
            Execute backup
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupOperation.Cancel">
            <summary>
            Cancel backup
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupOperation.GetRecoveryModel(System.String)">
            <summary>
            Return recovery model of the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupOperation.GetLatestBackupLocations(System.String)">
            <summary>
            Return the latest backup locations
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupOperation.GetBackupEncryptors">
            <summary>
            Returns the certificates and asymmetric keys from master for encryption
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.IBackupOperation">
            <summary>
            Interface for backup operations
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.IBackupOperation.Initialize(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,Microsoft.Data.SqlClient.SqlConnection)">
            <summary>
            Initialize 
            </summary>
            <param name="dataContainer"></param>
            <param name="sqlConnection"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.IBackupOperation.CreateBackupConfigInfo(System.String)">
            <summary>
            Return database metadata for backup
            </summary>
            <param name="databaseName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.IBackupOperation.SetBackupInput(Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo)">
            <summary>
            Set backup input properties
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupType">
            <summary>
            Backup Type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupComponent">
            <summary>
            Backup component
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupsetType">
            <summary>
            Backup set type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RecoveryOption">
            <summary>
            Recovery option
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupEncryptor">
            <summary>
            Class for backup encryptor
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupEncryptor.#ctor(System.Int32,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="encryptorType"></param>
            <param name="encryptorName"></param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupEncryptor.EncryptorType">
            <summary>
            Encryptor type - certificate or asymetric key
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupEncryptor.EncryptorName">
            <summary>
            Encryptor name
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreItemSource">
            <summary>
            Restore item source
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreItem">
            <summary>
            Restore item
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.CommonUtilities">
            <summary>
            Common methods used for backup and restore
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.CommonUtilities.#ctor(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,Microsoft.SqlServer.Management.Common.ServerConnection)">
            <summary>
            Ctor
            </summary>
            <param name="dataContainer"></param>
            <param name="sqlConnection"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.CommonUtilities.GetDeviceType(System.String)">
            <summary>
            Maps a string devicetype to the enum Smo.DeviceType
            <param name="stringDeviceType">Localized device type</param>
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.CommonUtilities.GetDeviceType(System.Int32)">
            <summary>
            Maps a integer devicetype to the enum Smo.DeviceType
            <param name="numDeviceType">Device type</param>
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.CommonUtilities.SanitizeFileName(System.String)">
            <summary>
            Sanitize file name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.CommonUtilities.IsMirroringEnabled(System.String)">
            <summary>
            Returns whether mirroring is enabled on a database or not
            </summary>>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupConfigInfo">
            <summary>
            Provides database info for backup.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupConfigInfo.RecoveryModel">
            <summary>
            Gets or sets recovery model of a database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupConfigInfo.DefaultBackupFolder">
            <summary>
            Gets or sets the default backup folder
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupConfigInfo.BackupEncryptors">
            <summary>
            Gets or sets backup encryptors
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupConfigInfo.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupConfigInfoResponse">
            <summary>
            Response class which returns backup configuration information
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupConfigInfoRequest">
            <summary>
            Request class to get backup configuration information
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.DatabaseName">
            <summary>
            Name of the datbase to perfom backup
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.BackupComponent">
            <summary>
            Component to backup - Database or Files
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.BackupType">
            <summary>
            Type of backup - Full/Differential/Log
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.BackupDeviceType">
            <summary>
            Backup device - Disk, Url, etc.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.SelectedFiles">
            <summary>
            The text input of selected files
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.BackupsetName">
            <summary>
            Backupset name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.SelectedFileGroup">
            <summary>
            List of selected file groups
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.BackupPathDevices">
            <summary>
            List of {key: backup path, value: device type}
            </summary>        
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.BackupPathList">
            <summary>
            List of selected backup paths
            </summary>        
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.IsCopyOnly">
            <summary>
            Indicates if the backup should be copy-only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.FormatMedia">
            <summary>
            Gets or sets a Boolean property value that determines whether a media is formatted as the first step of the backup operation. 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.Initialize">
            <summary>
            Gets or sets a Boolean property value that determines whether the devices associated with a backup operation are initialized as part of the backup operation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.SkipTapeHeader">
            <summary>
            Gets or sets Boolean property that determines whether the tape header is read.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.MediaName">
            <summary>
            Gets or sets the name used to identify a particular media set.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.MediaDescription">
            <summary>
            Gets or sets a textual description of the medium that contains a backup set.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.Checksum">
            <summary>
            Gets or sets a Boolean property value that determines whether a checksum value is calculated during backup or restore operations. 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.ContinueAfterError">
            <summary>
            Gets or sets a Boolean property value that determines whether the backup or restore continues after a checksum error occurs.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.LogTruncation">
            <summary>
            Gets or sets a Boolean property value that determines whether to truncate the database log.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.TailLogBackup">
            <summary>
            Gets or sets a Boolean property value that determines whether to backup the tail of the log
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.BackupSetDescription">
            <summary>
            Gets or sets a textual description for a particular backup set. 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.RetainDays">
            <summary>
            Gets or sets the number of days that must elapse before a backup set can be overwritten. 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.ExpirationDate">
            <summary>
            Gets or sets the date and time when the backup set expires and the backup data is no longer considered relevant.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.CompressionOption">
            <summary>
            Gets or sets the backup compression option.
            This should be converted to BackupCompressionOptions when setting it to Backup object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.VerifyBackupRequired">
            <summary>
            Gets or sets a Boolean property that determines whether verify is required.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.EncryptionAlgorithm">
            <summary>
            Specifies the algorithm type used for backup encryption.
            This should be converted to BackupEncryptionAlgorithm when creating BackupEncryptionOptions object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.EncryptorType">
            <summary>
            Specifies the encryptor type used to encrypt an encryption key.
            This should be converted to BackupEncryptorType when creating BackupEncryptionOptions object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupInfo.EncryptorName">
            <summary>
            Gets or sets the name of the encryptor.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupParams">
            <summary>
            Backup parameters passed for execution and scripting
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupParams.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupParams.BackupInfo">
            <summary>
            Backup metrics selected from the UI
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupParams.TaskExecutionMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupResponse">
            <summary>
            Response class for backup execution
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupRequest">
            <summary>
            Request class for backup execution
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.DatabaseFileInfo">
            <summary>
            Class includes information about a file related to a database operation. 
            Can be used for backup set files or restored database files
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.DatabaseFileInfo.IdPropertyName">
            <summary>
            The property name used for ids
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.DatabaseFileInfo.Properties">
            <summary>
            Properties
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.DatabaseFileInfo.Id">
            <summary>
            Unique id for this item
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.DatabaseFileInfo.IsSelected">
            <summary>
            Indicates whether the item is selected in client
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.LocalizedPropertyInfo.PropertyName">
            <summary>
            Property name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.LocalizedPropertyInfo.PropertyValue">
            <summary>
            Property value
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.LocalizedPropertyInfo.PropertyDisplayName">
            <summary>
            Property display name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.LocalizedPropertyInfo.PropertyValueDisplayName">
            <summary>
            Property display name for the value
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreConfigInfoRequestParams.OwnerUri">
            <summary>
            The Uri to find the connection to do the restore operations
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreConfigInfoResponse.ConfigInfo">
            <summary>
            Config Info
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreConfigInfoResponse.ErrorMessage">
            <summary>
            Errors occurred while creating the restore config info
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanDetailInfo">
            <summary>
            Class to include the plan detail 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanDetailInfo.Name">
            <summary>
            The name of the option from RestoreOptionsHelper
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanDetailInfo.CurrentValue">
            <summary>
            The current value of the option
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanDetailInfo.IsReadOnly">
            <summary>
            Indicates whether the option is read only or can be changed in client
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanDetailInfo.IsVisiable">
            <summary>
             Indicates whether the option should be visibile in client
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanDetailInfo.DefaultValue">
            <summary>
            The default value of the option
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanDetailInfo.ErrorMessage">
            <summary>
            Error message if the current value is not valid
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreDatabaseFileInfo">
            <summary>
            Database file info
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreDatabaseFileInfo.FileType">
            <summary>
            File type (Rows Data, Log ...)
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreDatabaseFileInfo.LogicalFileName">
            <summary>
            Logical Name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreDatabaseFileInfo.OriginalFileName">
            <summary>
            Original location of the file to restore to
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreDatabaseFileInfo.RestoreAsFileName">
            <summary>
            The file to restore to
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanResponse">
            <summary>
            Restore Plan Response
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanResponse.SessionId">
            <summary>
            Restore session id, can be used in restore request to use an existing restore plan
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanResponse.BackupSetsToRestore">
            <summary>
            The list of backup sets to restore
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanResponse.CanRestore">
            <summary>
            Indicates whether the restore operation is supported 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanResponse.ErrorMessage">
            <summary>
            Errors occurred while creating restore plan
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanResponse.DbFiles">
            <summary>
            The db files included in the backup file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanResponse.DatabaseNamesFromBackupSets">
            <summary>
            Database names extracted from backup sets
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanResponse.DatabaseName">
            <summary>
            For testing purpose to verify the target database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanResponse.PlanDetails">
            <summary>
            Plan details
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreResponse">
            <summary>
            Restore response
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreResponse.Result">
            <summary>
            Indicates if the restore task created successfully 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreResponse.TaskId">
            <summary>
            The task id assosiated witht the restore operation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreResponse.ErrorMessage">
            <summary>
            Errors occurred while creating the restore operation task
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreParams">
            <summary>
            Restore request parameters
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreParams.SessionId">
            <summary>
            Restore session id. The parameter is optional and if passed, an existing plan will be used
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreParams.OwnerUri">
            <summary>
            The Uri to find the connection to do the restore operations
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreParams.BackupFilePaths">
            <summary>
            Comma delimited list of backup files
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreParams.TargetDatabaseName">
            <summary>
            Target Database name to restore to
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreParams.SourceDatabaseName">
            <summary>
            Source Database name to restore from
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreParams.RelocateDbFiles">
            <summary>
            If set to true, the db files will be relocated to default data location in the server
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreParams.ReadHeaderFromMedia">
            <summary>
            If set to true, the backup files will be used to create restore plan otehrwise the source database name will be used
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreParams.SelectedBackupSets">
            <summary>
            Ids of the selected backup set to restore. If null, all backup sets will be selected. If empty list,
            no backup sets will be selected
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreParams.TaskExecutionMode">
            <summary>
            The executation mode for the operation. default is execution
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreParams.OverwriteTargetDatabase">
            <summary>
            Optional parameter which indicates whether to overwrite target database by source database name. 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.DisasterRecoveryException">
            <summary>
            Exception raised from disaster recovery operations
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.DisasterRecoveryFileValidator">
            <summary>
            Validate selected file paths for backup/restore operations
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.DisasterRecoveryFileValidator.IsFolderPathExisting(Microsoft.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Check if the folder path exists
            </summary>
            <param name="connection">sql connection</param>
            <param name="filePath">full file path</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.DisasterRecoveryService">
            <summary>
            Service for Backup and Restore
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.DisasterRecoveryService.#ctor">
            <summary>
            Default, parameterless constructor.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.DisasterRecoveryService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.DisasterRecoveryService.ConnectionServiceInstance">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.DisasterRecoveryService.FileBrowserServiceInstance">
            <summary>
            Gets or sets the current filebrowser service instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.DisasterRecoveryService.InitializeService(Microsoft.SqlTools.Hosting.Protocol.IProtocolEndpoint)">
            <summary>
            Initializes the service instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.DisasterRecoveryService.HandleBackupConfigInfoRequest(Microsoft.SqlTools.ServiceLayer.Admin.Contracts.DefaultDatabaseInfoParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupConfigInfoResponse})">
            <summary>
            Handle request to get backup configuration info
            </summary>
            <param name="optionsParams"></param>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.DisasterRecoveryService.HandleCancelRestorePlanRequest(Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{System.Boolean})">
            <summary>
            Handles a restore request
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.DisasterRecoveryService.HandleRestorePlanRequest(Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanResponse})">
            <summary>
            Handles a restore request
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.DisasterRecoveryService.HandleRestoreConfigInfoRequest(Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreConfigInfoRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreConfigInfoResponse})">
            <summary>
            Handles a restore config info request
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.DisasterRecoveryService.HandleRestoreRequest(Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreResponse})">
            <summary>
            Handles a restore request
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.DisasterRecoveryService.HandleBackupRequest(Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.BackupResponse})">
            <summary>
            Handles a backup request
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.DisasterRecoveryService.PerformBackup(Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupOperation)">
            <summary>
            For testing purpose only
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.DisasterRecoveryService.ScriptBackup(Microsoft.SqlTools.ServiceLayer.DisasterRecovery.BackupOperation)">
            <summary>
            For testing purpose only
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.BackupSetInfo">
            <summary>
            Backup set Information
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.BackupSetInfo.BackupType">
            <summary>
            Backup type (Full, Transaction Log, Differential ...)
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.BackupSetInfo.Properties">
            <summary>
            Backup set properties
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.BackupSetInfo.ConvertPropertiesToArray">
            <summary>
            Convert properties to array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.BackupSetInfo.Create(Microsoft.SqlServer.Management.Smo.Restore,Microsoft.SqlServer.Management.Smo.Server)">
            <summary>
            Creates new BackupSet info
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.BackupSetsFilterInfo">
            <summary>
            Class include info about selected back sets
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.BackupSetsFilterInfo.IsBackupSetSelected(System.Guid)">
            <summary>
            Returns true if given backup set is selected
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.BackupSetsFilterInfo.IsBackupSetSelected(Microsoft.SqlServer.Management.Smo.BackupSet)">
            <summary>
            Returns true if given backup set is selected
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.BackupSetsFilterInfo.AnySelected">
            <summary>
            Returns true if any backup set is selected
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.BackupSetsFilterInfo.Add(Microsoft.SqlServer.Management.Smo.BackupSet)">
            <summary>
            Adds backup set to selected list if not added aleady 
            </summary>
            <param name="backupSet"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.BackupSetsFilterInfo.Clear">
            <summary>
            Clears the list
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseHelper">
            <summary>
            Includes method to all restore operations
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseHelper.CreateConfigInfoResponse(Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreConfigInfoRequestParams)">
            <summary>
            Creates response which includes information about the server given to restore (default data location, db names with backupsets)
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseHelper.CancelRestorePlan(Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreParams)">
            <summary>
            Cancels existing restore plan
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseHelper.CreateRestorePlanResponse(Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject)">
            <summary>
            Creates a restore plan, The result includes the information about the backup set, 
            the files and the database to restore to
            </summary>
            <param name="requestParam">Restore request</param>s
            <returns>Restore plan</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseHelper.CanRestore(Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject)">
            <summary>
            Returns true if the restoring the restoreDataObject is supported in the service
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseHelper.CreateRestoreDatabaseTaskDataObject(Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestoreParams,Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo)">
            <summary>
            Creates anew restore task object to do the restore operations
            </summary>
            <param name="restoreParams">Restore request parameters</param>
            <returns>Restore task object</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject">
            <summary>
            Includes the plan with all the data required to do a restore operation on server
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.RelocateAllFiles">
            <summary>
            Boolean indicating whether the relocate all files checkbox was checked
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.SessionId">
            <summary>
            Restore session id
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.SourceDbNames">
            <summary>
            Database names includes in the restore plan
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.GetDatabaseNamesWithBackupSets">
            <summary>
            Returns the db names that have backupsets
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.Server">
            <summary>
            Current sqlserver instance
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.ActiveException">
            <summary>
            Recent exception that was thrown
            Displayed at the top of the dialog
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.AddDevices(System.String,Microsoft.SqlServer.Management.Smo.DeviceType)" -->
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.GetLastBackupTaken">
            <summary>
            Returns the last backup taken
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.Execute">
            <summary>
            Executes the restore operations
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.GetRestorePlanForExecutionAndScript">
            <summary>
            Gets RestorePlan to perform restore and to script
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.RestorePlanToExecute">
            <summary>
            For test purpose only. The restore plan that's used to execute
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.Util">
            <summary>
            Restore Util
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.RestorePlanner">
            <summary>
            SMO database restore planner used to create a restore plan
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.TailLogBackupFile">
            <summary>
            File to backup tail log before doing the restore
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.DataFilesFolder">
            <summary>
            Folder for all data files when relocate all files option is used
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.LogFilesFolder">
            <summary>
            Folder for all log files when relocate all files option is used
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.IsTailLogBackupPossible">
            <summary>
            Determines whether [is tail log backup possible].
            </summary>
            <returns>
            	<c>true</c> if [is tail log backup possible]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.IsTailLogBackupWithNoRecoveryPossible">
            <summary>
            Determines whether [is tail log backup with NORECOVERY possible].
            </summary>
            <returns>
            	<c>true</c> if [is tail log backup with NORECOVERY possible]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.PromptBeforeEachBackup">
            <summary>
            Gets or sets a value indicating whether [prompt before each backup].
            </summary>
            <value>
            	<c>true</c> if [prompt before each backup]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.CombineToServerConnectionPath(System.String,System.String)">
            <summary>
            Combining the root and file name using the server connection file path seperator
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.UpdateDBFilesPhysicalRelocate">
            <summary>
            Updates the Restore folder location of those db files whose orginal directory location
            is not present in the destination computer.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.DbFiles">
            <summary>
            List of files of the source database or in the backup file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.RestorePlan">
            <summary>
            Restore plan to do the restore
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.targetDbName">
            <summary>
            The database being restored
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.DefaultSourceDbName">
            <summary>
            The database from the backup file used to restore to by default
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.SourceDatabaseName">
            <summary>
            Current value of source db name in the planner
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.CloseExistingConnections">
            <summary>
            Gets or sets a value indicating whether [close existing connections].
            </summary>
            <value>
            	<c>true</c> if [close existing connections]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.CredentialName">
            <summary>
            Sql server credential name used to restore from Microsoft Azure url
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.ContainerSharedAccessPolicy">
            <summary>
            Azure container SAS policy
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.GetTargetDbFilePhysicalName(System.String)">
            <summary>
            Returns the physical name for the target Db file.
            It is the sourceDbName replaced with targetDbName in sourceFilename.
            If either sourceDbName or TargetDbName is empty, the source Db filename is returned.
            </summary>
            <param name="sourceDbFilePhysicalLocation">source DbFile physical location</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.GetSelectedBakupSets">
            <summary>
            List of selected backupsets
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.GetDbFiles">
            <summary>
            Gets the files of the database
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.UpdateRestorePlan">
            <summary>
            Updates restore plan
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.IfRestorePlanHasUrl">
            <summary>
            Determine if restore plan of selected database does have Url
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.SetRestorePlanProperties(Microsoft.SqlServer.Management.Smo.RestorePlan)">
            <summary>
            Sets restore plan properties
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.BackupTailLog">
            <summary>
            Bool indicating whether a tail log backup will be taken
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.TailLogWithNoRecovery">
            <summary>
            bool indicating whether the database will be left in restoring state
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.ErrorMessage">
            <summary>
            Returns the restore plan error message
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.CheckBackupFilesLocation">
            <summary>
            Verifies the backup files location.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.CanDropExistingConnections">
            <summary>
            Returns true if can close eixisting connections for give database
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.Cancel">
            <summary>
            Cancels the restore operations
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject.UpdateRestoreTaskObject">
            <summary>
            Create a restore data object that includes the plan to do the restore operation
            </summary>
            <param name="requestParam"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreOptionFactory">
            <summary>
            A factory class to create restore option info
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreOptionFactory.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreOptionFactory.CreateOptionInfo(System.String,Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.IRestoreDatabaseTaskDataObject)">
            <summary>
            Create option info using the current values
            </summary>
            <param name="optionKey">Option name</param>
            <param name="restoreDataObject">Restore task object</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreOptionFactory.UpdateOption(System.String,Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.IRestoreDatabaseTaskDataObject,Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanDetailInfo)">
            <summary>
            Update the option info by validating the option 
            </summary>
            <param name="optionKey"></param>
            <param name="restoreDataObject"></param>
            <param name="optionInfo"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreOptionFactory.SetAndValidate(System.String,Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.IRestoreDatabaseTaskDataObject)">
            <summary>
            Set the option value in restore task object using the values in the restore request
            </summary>
            <param name="optionKey"></param>
            <param name="restoreDataObject"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreOptionFactory.SetValue(System.String,Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.IRestoreDatabaseTaskDataObject)">
            <summary>
            Set the option value in restore task object using the values in the restore request
            </summary>
            <param name="optionKey"></param>
            <param name="restoreDataObject"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreOptionFactory.ValidateOption(System.String,Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.IRestoreDatabaseTaskDataObject)">
            <summary>
            Validates the options, if option is not set correctly, set to default and return the error
            </summary>
            <param name="optionKey"></param>
            <param name="restoreDataObject"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreUtil.server">
            <summary>
            Current sql server instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreUtil.GetSourceDbNames">
            <summary>
            Queries msdb for source database names
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreUtil.GetEnumeratorData(Microsoft.SqlServer.Management.Sdk.Sfc.Request)">
            <summary>
            make enumerator data request
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreUtil.GetSourceDbNames(System.Collections.Generic.ICollection{Microsoft.SqlServer.Management.Smo.BackupDeviceItem},System.String)">
            <summary>
            Reads backup file header to get source database names
            If valid credential name is not provided for URL throws exception while executing T-sql statement
            </summary>
            <param name="bkdevList">List of backup device items</param>
            <param name="credential">Optional Sqlserver credential name to read backup header from URL</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreUtil.GetDbFiles(Microsoft.SqlServer.Management.Smo.Database)">
            <summary>
            Returns a list of database files
            </summary>
            <param name="db">SMO database</param>
            <returns>a list of database files</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreUtil.GetDbFiles(Microsoft.SqlServer.Management.Smo.Restore)">
            <summary>
            Returns a list of database files in all the backup devices in the Restore object
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreUtil.AddCredentialNameForUrlBackupSet(Microsoft.SqlServer.Management.Smo.RestorePlan,System.String)">
            <summary>
            Set credential name in the restore objects which have a backup set in Microsoft Azure
            From sql16, default credential is SAS credential so no explict credential needed for restore object. 
            </summary>
            <param name="restorePlan">Restore plan created for the restore operation</param>
            <param name="credentialName">Sql server credential name</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreUtil.GetDefaultTailLogbackupFile(System.String,Microsoft.SqlServer.Management.Smo.RestorePlan)">
            <summary>
            Returns a default location for tail log backup
            If the first backup media is from Microsoft Azure, a Microsoft Azure url for the Tail log backup file is returned
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreUtil.SanitizeFileName(System.String)">
            <summary>
            Sanitizes the name of the file.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.DbFile">
            <summary>
            A class representing a database file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.DbFile.DbFileType">
            <summary>
            Returns the database file type string to be displayed in the dialog
            </summary>                
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOptionsHelper.CreateRestoreOptions">
            <summary>
            Creates the options metadata available for restore operations
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOptionsHelper.AddOptions(Microsoft.SqlTools.ServiceLayer.DisasterRecovery.Contracts.RestorePlanResponse,Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.RestoreDatabaseTaskDataObject)">
            <summary>
            Add options to restore plan response
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOptionsHelper.UpdateOptionsInPlan(Microsoft.SqlTools.ServiceLayer.DisasterRecovery.RestoreOperation.IRestoreDatabaseTaskDataObject)">
            <summary>
            Load options in restore plan
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditCell">
            <summary>
            Cell that wraps info from <see cref="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue"/> for edit purposes
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditCell.#ctor">
            <summary>
            Default, parameterless constructor to make sure that JSON serializing is happy
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditCell.#ctor(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue,System.Boolean)">
            <summary>
            Constructs a new EditCell based on a DbCellValue
            </summary>
            <param name="dbCellValue">The DbCellValue that will be enhanced</param>
            <param name="isDirty">Whether or not the edit cell is dirty</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditCell.IsDirty">
            <summary>
            Whether or not the cell is considered dirty
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditCellResult">
            <summary>
            Parameters to return when a cell is updated in isolation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditCellResult.Cell">
            <summary>
            The cell after the revert was applied
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditCellResult.IsRowDirty">
            <summary>
            Whether or not the row is dirty after the revert has been applied
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditCommitParams">
            <summary>
            Parameters for a request to commit pending edit operations
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditCommitResult">
            <summary>
            Parameters to return upon successful completion of commiting pending edit operations
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditCreateRowParams">
            <summary>
            Parameters for the update cell request
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditCreateRowResult">
            <summary>
            Parameters to return upon successful addition of a row to the edit session
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditCreateRowResult.DefaultValues">
            <summary>
            Each element corresponds to the default value for the column. If null, no default is
            defined. Calculated columns will have placeholders provided here.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditCreateRowResult.NewRowId">
            <summary>
            The internal ID of the newly created row
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditDeleteRowParams">
            <summary>
            Parameters for identifying a row to mark for deletion
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditDeleteRowResult">
            <summary>
            Parameters to return upon successfully adding row delete to update cache
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditDisposeParams">
            <summary>
            Parameters of the edit session dispose request
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditDisposeResult">
            <summary>
            Object to return upon successful disposal of an edit session
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditInitializeFiltering">
            <summary>
            Parameters for filtering a the rows in a table to make querying easier
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditInitializeFiltering.LimitResults">
            <summary>
            Limit the records queried from the database to this many. If null, all rows are returned
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditInitializeParams">
            <summary>
            Parameters of the edit session initialize request
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditInitializeParams.Filters">
            <summary>
            Filtering parameters
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditInitializeParams.ObjectName">
            <summary>
            The object to use for generating an edit script
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditInitializeParams.SchemaName">
            <summary>
            The schema for the object to use 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditInitializeParams.ObjectType">
            <summary>
            The type of the object to use for generating an edit script
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditInitializeParams.QueryString">
            <summary>
            The query used to retrieve result set
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditInitializeResult">
            <summary>
            Object to return upon successful completion of an edit session initialize request
            </summary>
            <remarks>
            Empty for now, since there isn't anything special to return on success
            </remarks>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditRevertCellParams">
            <summary>
            Parameters for the cell revert request
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditRevertCellResult">
            <summary>
            Parameters to return upon successful revert of the cell
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditRevertRowParams">
            <summary>
            Parameters for the revert row request
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditRevertRowResult">
            <summary>
            Parameters to return upon successful revert of a row
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditRow">
            <summary>
            A way to return a row in a result set that is being edited. It contains state about whether
            or not the row is dirty
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditRow.Cells">
            <summary>
            The cells in the row. If the row has pending changes, they will be represented in
            this list
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditRow.Id">
            <summary>
            Internal ID of the row. This should be used whenever referencing a row in row edit operations.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditRow.IsDirty">
            <summary>
            Whether or not the row has changes pending
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditRow.State">
            <summary>
            What type of dirty state (or lack thereof) the row is
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditSessionReadyParams.OwnerUri">
            <summary>
            URI for the editor
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditSessionReadyParams.Message">
            <summary>
            Message to explain why a session failed. Should only be set when <see cref="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditSessionReadyParams.Success"/>
            is <c>false</c>.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditSessionReadyParams.Success">
            <summary>
            Whether or not the session is ready
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditSubsetParams">
            <summary>
            Parameters for a subset retrieval request
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditSubsetParams.RowStartIndex">
            <summary>
            Beginning index of the rows to return from the selected resultset. This index will be
            included in the results.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditSubsetParams.RowCount">
            <summary>
            Number of rows to include in the result of this request. If the number of the rows
            exceeds the number of rows available after the start index, all available rows after
            the start index will be returned.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditSubsetResult">
            <summary>
            Parameters for the result of a subset retrieval request
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditSubsetResult.RowCount">
            <summary>
            The number of rows returned from result set, useful for determining if less rows were
            returned than requested.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditSubsetResult.Subset">
            <summary>
            The requested subset of rows, with information about whether or not the rows are dirty
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditUpdateCellParams">
            <summary>
            Parameters for the update cell request
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditUpdateCellParams.ColumnId">
            <summary>
            Internal ID of the column to update
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditUpdateCellParams.NewValue">
            <summary>
            String representation of the value to assign to the cell
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditUpdateCellResult">
            <summary>
            Parameters to return upon successful update of the cell
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.RowOperationParams">
            <summary>
            Abstract class for parameters that require an OwnerUri and a RowId
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.RowOperationParams.RowId">
            <summary>
            Internal ID of the row to revert
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.SessionOperationParams">
            <summary>
            Abstract class for parameters that require an OwnerUri
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.Contracts.SessionOperationParams.OwnerUri">
            <summary>
            Owner URI for the session to add new row to
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.EditColumnMetadata">
            <summary>
            Small class that stores information needed by the edit data service to properly process
            edits into scripts.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditColumnMetadata.#ctor">
            <summary>
            Constructs a simple edit column metadata provider
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditColumnMetadata.DefaultValue">
            <summary>
            If set, this is a string representation of the default value. If set to null, then the
            column does not have a default value.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditColumnMetadata.EscapedName">
            <summary>
            Escaped identifier for the name of the column
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditColumnMetadata.ExpressionForSelectStatement">
            <summary>
            The column's expression for select statement
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditColumnMetadata.IsHierarchyId">
            <summary>
            Whether or not the column's data type is HierarchyId
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditColumnMetadata.IsComputed">
            <summary>
            Whether or not the column is computed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditColumnMetadata.IsDeterministic">
            <summary>
            Whether or not the column is deterministically computed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditColumnMetadata.IsIdentity">
            <summary>
            Whether or not the column is an identity column
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditColumnMetadata.Ordinal">
            <summary>
            The ordinal ID of the column
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditColumnMetadata.HasExtendedProperties">
            <summary>
            Whether or not the column has extended properties
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditColumnMetadata.IsCalculated">
            <summary>
            Whether or not the column is calculated on the server side. This could be a computed
            column or a identity column.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditColumnMetadata.IsKey">
            <summary>
            Whether or not the column is used in a key to uniquely identify a row
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditColumnMetadata.IsTrustworthyForUniqueness">
            <summary>
            Whether or not the column can be trusted for uniqueness
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditColumnMetadata.Extend(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper)">
            <summary>
            Extracts extended column properties from the database columns from SQL Client
            </summary>
            <param name="dbColumn">The column information provided by SQL Client</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.EditDataService">
            <summary>
            Service that handles edit data scenarios
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditDataService.ActiveSessions">
            <summary>
            Dictionary mapping OwnerURIs to active sessions
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditDataService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the edit data service with the service host
            </summary>
            <param name="serviceHost">The service host to register commands/events with</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditDataService.GetActiveSessionOrThrow(System.String)">
            <summary>
            Returns the session with the given owner URI or throws if it can't be found
            </summary>
            <exception cref="T:System.Exception">If the edit session doesn't exist</exception>
            <param name="ownerUri">Owner URI for the edit session</param>
            <returns>The edit session that corresponds to the owner URI</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.InitializeEditRequestContext">
            <summary>
            Context for InitializeEditRequest, to provide a way to update the result set before sending it to UI.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.EditSession">
            <summary>
            Represents an edit "session" bound to the results of a query, containing a cache of edits
            that are pending. Provides logic for performing edit operations.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.#ctor(Microsoft.SqlTools.ServiceLayer.EditData.IEditMetadataFactory)">
            <summary>
            Constructs a new edit session bound to the result set and metadat object provided
            </summary>
            <param name="metaFactory">Factory for creating metadata</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.CommitTask">
            <summary>
            The task that is running to commit the changes to the db
            Internal for unit test purposes.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.NextRowId">
            <summary>
            The internal ID for the next row in the table. Internal for unit testing purposes only.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.EditCache">
            <summary>
            The cache of pending updates. Internal for unit test purposes only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.InitializeTask">
            <summary>
            The task that is running to initialize the edit session
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.IsInitialized">
            <summary>
            Whether or not the session has been initialized
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.Initialize(Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditInitializeParams,Microsoft.SqlTools.ServiceLayer.EditData.EditSession.Connector,Microsoft.SqlTools.ServiceLayer.EditData.EditSession.QueryRunner,System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
            Initializes the edit session, asynchronously, by retrieving metadata about the table to
            edit and querying the table for the rows of the table.
            </summary>
            <param name="initParams">Parameters for initializing the edit session</param>
            <param name="connector">Delegate that will return a DbConnection when executed</param>
            <param name="queryRunner">
            Delegate that will run the requested query and return a
            <see cref="T:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.EditSessionQueryExecutionState"/> object on execution
            </param>
            <param name="successHandler">Func to call when initialization has completed successfully</param>
            <param name="errorHandler">Func to call when initialization has completed with errors</param>
            <exception cref="T:System.InvalidOperationException">
            When session is already initialized or in progress of initializing
            </exception>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.ValidateQueryForSession(Microsoft.SqlTools.ServiceLayer.QueryExecution.Query)">
            <summary>
            Validates that a query can be used for an edit session. The target result set is returned
            </summary>
            <param name="query">The query to validate</param>
            <returns>The result set to use</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.CheckResultsForInvalidColumns(Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet,System.String)">
            <summary>
            If the results contain any results that conflict with the table metadata, then
            make all columns readonly so that the user cannot make an invalid update.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.CreateRow">
            <summary>
            Creates a new row update and adds it to the update cache
            </summary>
            <exception cref="T:System.InvalidOperationException">If inserting into cache fails</exception>
            <returns>The internal ID of the newly created row</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.CommitEdits(System.Data.Common.DbConnection,System.Func{System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task})">
            <summary>
            Commits the edits in the cache to the database and then to the associated result set of
            this edit session. This is launched asynchronously.
            </summary>
            <param name="connection">The connection to use for executing the query</param>
            <param name="successHandler">Callback to perform when the commit process has finished</param>
            <param name="errorHandler">Callback to perform if the commit process has failed at some point</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.DeleteRow(System.Int64)">
            <summary>
            Creates a delete row update and adds it to the update cache
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If row requested to delete already has a pending change in the cache
            </exception>
            <param name="rowId">The internal ID of the row to delete</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.GetRows(System.Int64,System.Int32)">
            <summary>
            Retrieves a subset of rows with the pending updates applied. If more rows than exist
            are requested, only the rows that exist will be returned.
            </summary>
            <param name="startIndex">Index to start returning rows from</param>
            <param name="rowCount">The number of rows to return.</param>
            <returns>An array of rows with pending edits applied</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.RevertCell(System.Int64,System.Int32)">
            <summary>
            Reverts a cell in a pending edit
            </summary>
            <param name="rowId">Internal ID of the row to have its edits reverted</param>
            <param name="columnId">Ordinal ID of the column to revert</param>
            <returns>String version of the old value for the cell</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.RevertRow(System.Int64)">
            <summary>
            Removes a pending row update from the update cache.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If a pending row update with the given row ID does not exist.
            </exception>
            <param name="rowId">The internal ID of the row to reset</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.ScriptEdits(System.String)">
            <summary>
            Generates a single script file with all the pending edits scripted.
            </summary>
            <param name="outputPath">The path to output the script to</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.UpdateCell(System.Int64,System.Int32,System.String)">
            <summary>
            Performs an update to a specific cell in a row. If the row has not already been
            initialized with a record in the update cache, one is created.
            </summary>
            <exception cref="T:System.InvalidOperationException">If adding a new update row fails</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the row that is requested to be edited is beyond the rows in the results and the
            rows that are being added.
            </exception>
            <param name="rowId">The internal ID of the row to edit</param>
            <param name="columnId">The ordinal of the column to edit in the row</param>
            <param name="newValue">The new string value of the cell to update</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.ConstructInitializeQuery(Microsoft.SqlTools.ServiceLayer.EditData.EditTableMetadata,Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditInitializeFiltering)">
            <summary>
            Constructs a query for selecting rows in a table based on the filters provided.
            Internal for unit testing purposes only.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.CleanupEditIfRowClean(System.Int64,Microsoft.SqlTools.ServiceLayer.EditData.Contracts.EditCellResult)">
            <summary>
            Removes the edit from the edit cache if the row is no longer dirty
            </summary>
            <param name="rowId">ID of the update to cleanup</param>
            <param name="editCellResult">Result with row dirty flag</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.EditSessionQueryExecutionState">
            <summary>
            State object to return upon completion of an edit session intialization query
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.EditSessionQueryExecutionState.Query">
            <summary>
            The query object that was used to execute the edit initialization query. If
            <c>null</c> the query was not successfully executed.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.EditSessionQueryExecutionState.Message">
            <summary>
            Any message that may have occurred during execution of the query (ie, exceptions).
            If this is and <see cref="P:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.EditSessionQueryExecutionState.Query"/> are <c>null</c> then the error messages were
            returned via message events.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditSession.EditSessionQueryExecutionState.#ctor(Microsoft.SqlTools.ServiceLayer.QueryExecution.Query,System.String)">
            <summary>
            Constructs a new instance. Sets the values of the properties.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.EditTableMetadata">
            <summary>
            Provides metadata about the table or view being edited
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditTableMetadata.#ctor">
            <summary>
            Constructs a simple edit table metadata provider
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditTableMetadata.Columns">
            <summary>
            List of columns in the object being edited
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditTableMetadata.EscapedMultipartName">
            <summary>
            Full escaped multipart identifier for the object being edited
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditTableMetadata.IsMemoryOptimized">
            <summary>
            Whether or not the object being edited is memory optimized
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditTableMetadata.HasExtendedProperties">
            <summary>
            Whether or not the table has had extended properties added to it
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.EditTableMetadata.KeyColumns">
            <summary>
            List of columns that are used to uniquely identify a row
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditTableMetadata.FilterColumnMetadata(Microsoft.SqlTools.ServiceLayer.EditData.EditColumnMetadata[],Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper[])">
            <summary>
            Filters out metadata that is not present in the result set, and matches metadata ordering to resultset.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.EditTableMetadata.Extend(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper[])">
            <summary>
            Extracts extended column properties from the database columns from SQL Client
            </summary>
            <param name="dbColumnWrappers">The column information provided by SQL Client</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.IEditMetadataFactory">
            <summary>
            Interface for a factory that generates metadata for an object to edit
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.IEditMetadataFactory.GetObjectMetadata(System.Data.Common.DbConnection,System.String[],System.String)">
            <summary>
            Generates a edit-ready metadata object
            </summary>
            <param name="connection">Connection to use for getting metadata</param>
            <param name="objectNamedParts">
            The multipart name for the object split and unwrapped. At most two components can be
            provided (schema, table/view name). At minimum table/view name can be provided, and
            default schema will be used for schema name.
            </param>
            <param name="objectType">Type of the object to return metadata for</param>
            <returns>Metadata about the object requested</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.SmoEditMetadataFactory">
            <summary>
            Factory that generates metadata using a combination of SMO and SqlClient metadata
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.SmoEditMetadataFactory.GetObjectMetadata(System.Data.Common.DbConnection,System.String[],System.String)">
            <summary>
            Generates a edit-ready metadata object using SMO
            </summary>
            <param name="connection">Connection to use for getting metadata</param>
            <param name="objectNamedParts">Split and unwrapped name parts</param>
            <param name="objectType">Type of the object to return metadata for</param>
            <returns>Metadata about the object requested</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.CellUpdate">
            <summary>
            Representation of a cell that should have a value inserted or updated
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.CellUpdate.#ctor(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper,System.String)">
            <summary>
            Constructs a new cell update based on the the string value provided and the column
            for the cell.
            </summary>
            <param name="column">Column the cell will be under</param>
            <param name="valueAsString">The string from the client to convert to an object</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.CellUpdate.AsDbCellValue">
            <summary>
            Converts the cell update to a DbCellValue
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.CellUpdate.AsEditCell">
            <summary>
            Generates a new EditCell that represents the contents of the cell update
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.CellUpdate.Column">
            <summary>
            The column that the cell will be placed in
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.CellUpdate.Value">
            <summary>
            The object representation of the cell provided by the client
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.CellUpdate.ValueAsString">
            <summary>
            <see cref="P:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.CellUpdate.Value"/> converted to a string
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowCreate">
            <summary>
            Represents a row that should be added to the result set. Generates an INSERT statement.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowCreate.#ctor(System.Int64,Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet,Microsoft.SqlTools.ServiceLayer.EditData.EditTableMetadata)">
            <summary>
            Creates a new Row Creation edit to the result set
            </summary>
            <param name="rowId">Internal ID of the row that is being created</param>
            <param name="associatedResultSet">The result set for the rows in the table we're editing</param>
            <param name="associatedMetadata">The metadata for table we're editing</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowCreate.SortId">
            <summary>
            Sort ID for a RowCreate object. Setting to 1 ensures that these are the first changes 
            to be committed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowCreate.DefaultValues">
            <summary>
            Default values for the row, will be applied as cell updates if there isn't a user-
            provided cell update during commit
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowCreate.ApplyChanges(System.Data.Common.DbDataReader)">
            <summary>
            Applies the changes to the associated result set after successfully executing the
            change on the database
            </summary>
            <param name="dataReader">
            Reader returned from the execution of the command to insert a new row. Should contain
            a single row that represents the newly added row.
            </param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowCreate.GetCommand(System.Data.Common.DbConnection)">
            <summary>
            Generates a command that can be executed to insert a new row -- and return the newly
            inserted row.
            </summary>
            <param name="connection">The connection the command should be associated with</param>
            <returns>Command to insert the new row</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowCreate.GetEditRow(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue[])">
            <summary>
            Generates a edit row that represents a row pending insertion
            </summary>
            <param name="cachedRow">Original, cached cell contents. (Should be null in this case)</param>
            <returns>EditRow of pending update</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowCreate.GetScript">
            <summary>
            Generates the INSERT INTO statement that will apply the row creation
            </summary>
            <returns>INSERT INTO statement</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowCreate.RevertCell(System.Int32)">
            <summary>
            Reverts a cell to an unset value.
            </summary>
            <param name="columnId">The ordinal ID of the cell to reset</param>
            <returns>The default value for the column, or null if no default is defined</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowCreate.SetCell(System.Int32,System.String)">
            <summary>
            Sets the value of a cell in the row to be added
            </summary>
            <param name="columnId">Ordinal of the column to set in the row</param>
            <param name="newValue">String representation from the client of the value to add</param>
            <returns>
            The updated value as a string of the object generated from <paramref name="newValue"/>
            </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowCreate.IsCellValueProvided(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper,Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.CellUpdate,System.String)">
            <summary>
            Verifies the column and cell, ensuring a column that needs a value has one.
            </summary>
            <param name="column">Column that will be inserted into</param>
            <param name="cell">Current cell value for this row</param>
            <param name="defaultCell">Default value for the column in this row</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the column needs a value but it is not provided
            </exception>
            <returns>
            <c>true</c> If the column has a value provided 
            <c>false</c> If the column does not have a value provided (column is read-only, has default, etc)
            </returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.EditDataDeleteException">
            <summary>
            An error indicating that a delete action will delete multiple rows.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowDelete">
            <summary>
            Represents a row that should be deleted. This will generate a DELETE statement
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowDelete.#ctor(System.Int64,Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet,Microsoft.SqlTools.ServiceLayer.EditData.EditTableMetadata)">
            <summary>
            Constructs a new RowDelete object
            </summary>
            <param name="rowId">Internal ID of the row to be deleted</param>
            <param name="associatedResultSet">Result set that is being edited</param>
            <param name="associatedMetadata">Improved metadata of the object being edited</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowDelete.SortId">
            <summary>
            Sort ID for a RowDelete object. Setting to 2 ensures that these are the LAST changes 
            to be committed
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowDelete.ApplyChanges(System.Data.Common.DbDataReader)">
            <summary>
            Applies the changes to the associated result set after successfully executing the
            change on the database
            </summary>
            <param name="dataReader">
            Reader returned from the execution of the command to insert a new row. Should NOT
            contain any rows.
            </param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowDelete.GetCommand(System.Data.Common.DbConnection)">
            <summary>
            Generates a command for deleting the selected row
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowDelete.HasDuplicateRows(Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.WhereClause,System.String,System.Data.Common.DbConnection)">
            <summary>
            Runs a query using the where clause to determine if duplicates are found (causes issues when deleting).
            If duplicates are found, the check returns true, else it returns false;
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowDelete.GetEditRow(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue[])">
            <summary>
            Generates a edit row that represents a row pending deletion. All the original cells are
            intact but the state is dirty.
            </summary>
            <param name="cachedRow">Original, cached cell contents</param>
            <returns>EditRow that is pending deletion</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowDelete.GetScript">
            <summary>
            Generates a DELETE statement to delete this row
            </summary>
            <returns>String of the DELETE statement</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowDelete.GetVerifyScript">
            <summary>
            Generates a WHERE statement to verify the row delete is unique.
            </summary>
            <returns>String of the WHERE statement</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowDelete.RevertCell(System.Int32)">
            <summary>
            This method should not be called. A cell cannot be reverted on a row that is pending
            deletion.
            </summary>
            <param name="columnId">Ordinal of the column to update</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowDelete.SetCell(System.Int32,System.String)">
            <summary>
            This method should not be called. A cell cannot be updated on a row that is pending
            deletion.
            </summary>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
            <param name="columnId">Ordinal of the column to update</param>
            <param name="newValue">New value for the cell</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase">
            <summary>
            Base class for row edit operations. Provides basic information and helper functionality
            that all RowEdit implementations can use. Defines functionality that must be implemented
            in all child classes. Implements a custom IComparable to enable sorting by type of the edit
            and then by an overrideable 
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.#ctor">
            <summary>
            Internal parameterless constructor, required for mocking
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.#ctor(System.Int64,Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet,Microsoft.SqlTools.ServiceLayer.EditData.EditTableMetadata)">
            <summary>
            Base constructor for a row edit. Stores the state that should be available to all row
            edit implementations.
            </summary>
            <param name="rowId">The internal ID of the row that is being edited</param>
            <param name="associatedResultSet">The result set that will be updated</param>
            <param name="associatedMetadata">Metadata provider for the object to edit</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.RowId">
            <summary>
            The internal ID of the row to which this edit applies, relative to the result set
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.AssociatedResultSet">
            <summary>
            The result set that is associated with this row edit
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.AssociatedObjectMetadata">
            <summary>
            The metadata for the table this edit is associated to
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.SortId">
            <summary>
            Sort ID for a row edit. Ensures that when a collection of RowEditBase objects are
            sorted, the appropriate types are sorted to the top.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.ApplyChanges(System.Data.Common.DbDataReader)">
            <summary>
            Applies the changes to the associated result set
            </summary>
            <param name="dataReader">
            Data reader from execution of the command to commit the change to the db
            </param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.GetCommand(System.Data.Common.DbConnection)">
            <summary>
            Gets a command that will commit the change to the db
            </summary>
            <param name="connection">The connection to associate the command to</param>
            <returns>Command to commit the change to the db</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.GetEditRow(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue[])">
            <summary>
            Generates a row that has the pending update applied. The dirty status of the row is
            reflected in the returned EditRow.
            </summary>
            <param name="cachedRow">The original, cached row values</param>
            <returns>An EditRow with the pending changes applied</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.GetScript">
            <summary>
            Converts the row edit into a SQL statement
            </summary>
            <returns>A SQL statement</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.RevertCell(System.Int32)">
            <summary>
            Reverts a specific cell in row with pending edits
            </summary>
            <param name="columnId">Ordinal ID of the column to revert</param>
            <returns>String value of the original value of the cell</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.SetCell(System.Int32,System.String)">
            <summary>
            Changes the value a cell in the row.
            </summary>
            <param name="columnId">Ordinal of the column in the row to update</param>
            <param name="newValue">The new value for the cell</param>
            <returns>The value of the cell after applying validation logic</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.ValidateColumnIsUpdatable(System.Int32)">
            <summary>
            Performs validation of column ID and if column can be updated.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="columnId"/> is less than 0 or greater than the number of columns
            in the row
            </exception>
            <exception cref="T:System.InvalidOperationException">If the column is not updatable</exception>
            <param name="columnId">Ordinal of the column to update</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.GetWhereClause(System.Boolean)">
            <summary>
            Generates a WHERE clause that uses the key columns of the table to uniquely identity
            the row that will be updated.
            </summary>
            <param name="parameterize">
            Whether or not to generate a parameterized where clause. If <c>true</c> verbatim values
            will be replaced with paremeters (like @Param12). The parameters must be added to the
            SqlCommand used to execute the commit.
            </param>
            <returns>A <see cref="T:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.WhereClause"/> object</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.CompareTo(Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase)">
            <summary>
            Compares a row edit against another row edit. If they are the same type, then we
            compare using an overrideable "same type" comparer. If they are different types, they
            are sorted by their sort indexes.
            
            In general, RowCreate and RowUpdates are sorted to the top. RowDeletes are sorted last.
            If there are ties, default behavior is to sort by row ID ascending.
            </summary>
            <param name="other">The other row edit to compare against</param>
            <returns>
            A positive value if this edit should go first, a negative value if the other edit
            should go first. 0 is returned if there is a tie.
            </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.CompareToSameType(Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase)">
            <summary>
            Default behavior for sorting if the two compared row edits are the same type. Sorts
            by row ID ascending.
            </summary>
            <param name="rowEdit">The other row edit to compare against</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.CompareByRowId(Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase)">
            <summary>
            Compares two row edits by their row ID ascending.
            </summary>
            <param name="rowEdit">The other row edit to compare against</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.WhereClause">
            <summary>
            Represents a WHERE clause that can be used for identifying a row in a table.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.WhereClause.#ctor">
            <summary>
            Constructs and initializes a new where clause
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.WhereClause.Parameters">
            <summary>
            SqlParameters used in a parameterized query. If this object was generated without
            parameterization, this will be an empty list
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.WhereClause.ClauseComponents">
            <summary>
            Strings that make up the WHERE clause, such as <c>"([col1] = 'something')"</c>
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowEditBase.WhereClause.CommandText">
            <summary>
            Total text of the WHERE clause that joins all the components with AND
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowUpdate">
            <summary>
            An update to apply to a row of a result set. This will generate an UPDATE statement.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowUpdate.#ctor(System.Int64,Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet,Microsoft.SqlTools.ServiceLayer.EditData.EditTableMetadata)">
            <summary>
            Constructs a new RowUpdate to be added to the cache.
            </summary>
            <param name="rowId">Internal ID of the row that will be updated with this object</param>
            <param name="associatedResultSet">Result set for the rows of the object to update</param>
            <param name="associatedMetadata">Metadata provider for the object to update</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowUpdate.SortId">
            <summary>
            Sort order property. Sorts to same position as RowCreate
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowUpdate.ApplyChanges(System.Data.Common.DbDataReader)">
            <summary>
            Applies the changes to the associated result set after successfully executing the
            change on the database
            </summary>
            <param name="dataReader">
            Reader returned from the execution of the command to update a row. Should contain
            a single row that represents all the values of the row.
            </param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowUpdate.GetCommand(System.Data.Common.DbConnection)">
            <summary>
            Generates a command that can be executed to update a row -- and return the contents of
            the updated row.
            </summary>
            <param name="connection">The connection the command should be associated with</param>
            <returns>Command to update the row</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowUpdate.GetEditRow(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue[])">
            <summary>
            Generates a edit row that represents a row with pending update. The cells pending
            updates are merged into the unchanged cells.
            </summary>
            <param name="cachedRow">Original, cached cell contents</param>
            <returns>EditRow with pending updates</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowUpdate.GetScript">
            <summary>
            Constructs an update statement to change the associated row.
            </summary>
            <returns>An UPDATE statement</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowUpdate.RevertCell(System.Int32)">
            <summary>
            Reverts the value of a cell to its original value
            </summary>
            <param name="columnId">Ordinal of the column to revert</param>
            <returns>The value that was </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.EditData.UpdateManagement.RowUpdate.SetCell(System.Int32,System.String)">
            <summary>
            Sets the value of the cell in the associated row. If <paramref name="newValue"/> is
            identical to the original value, this will remove the cell update from the row update.
            </summary>
            <param name="columnId">Ordinal of the columns that will be set</param>
            <param name="newValue">String representation of the value the user input</param>
            <returns>
            The string representation of the new value (after conversion to target object) if the
            a change is made. <c>null</c> is returned if the cell is reverted to it's original value.
            </returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionGraphComparisonResult">
            <summary>
            An ExecutionGraphComparisonResult is composed of an execution plan node, but has additional properties
            to keep track of matching ExecutionGraphComparisonResult nodes for execution plan nodes present in the
            the graph being compared against. This class also features a group index that can assist
            with coloring similar sections of execution plans in the UI.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionGraphComparisonResult.BaseNode">
            <summary>
            The base ExecutionPlanNode for the ExecutionGraphComparisonResult.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionGraphComparisonResult.Children">
            <summary>
            The children of the ExecutionGraphComparisonResult.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionGraphComparisonResult.GroupIndex">
            <summary>
            The group index of the ExecutionGraphComparisonResult.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionGraphComparisonResult.HasMatch">
            <summary>
            Flag to indicate if the ExecutionGraphComparisonResult has a matching node in the compared execution plan.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionGraphComparisonResult.MatchingNodesId">
            <summary>
            List of matching nodes for the ExecutionGraphComparisonResult.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionGraphComparisonResult.ParentNode">
            <summary>
            The parent of the ExecutionGraphComparisonResult.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanComparisonParams.FirstExecutionPlanGraphInfo">
            <summary>
            First query execution plan for comparison.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanComparisonParams.SecondExecutionPlanGraphInfo">
            <summary>
            Second query execution plan for comparison.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanComparisonParams.IgnoreDatabaseName">
            <summary>
            Flag to indicate if the database name should be ignored
            during comparisons.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanComparisonResult.FirstComparisonResult">
            <summary>
            Created ExecutionGraphComparisonResult for the first execution plan
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanComparisonResult.SecondComparisonResult">
            <summary>
            Created ExecutionGraphComparisonResult for the second execution plan
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanGraph">
            <summary>
            Execution plan graph object that is sent over JSON RPC
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanGraph.Root">
            <summary>
            Root of the execution plan tree
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanGraph.Query">
            <summary>
            Underlying query for the execution plan graph
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanGraph.GraphFile">
            <summary>
            Graph file that used to generate ExecutionPlanGraph
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanGraph.Recommendations">
            <summary>
            Index recommendations given by show plan to improve query performance
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanNode.ID">
            <summary>
            ID for the node.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanNode.Type">
            <summary>
            Type of the node. This determines the icon that is displayed for it
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanNode.Cost">
            <summary>
            Cost associated with the node
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanNode.SubTreeCost">
            <summary>
            Cost of the node subtree
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanNode.RelativeCost">
            <summary>
            Relative cost of the node compared to its siblings.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanNode.ElapsedTimeInMs">
            <summary>
            Time take by the node operation in milliseconds
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanNode.Properties">
            <summary>
            Node properties to be shown in the tooltip
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanNode.Name">
            <summary>
            Display name for the node
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanNode.Description">
            <summary>
            Description associated with the node.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanNode.Subtext">
            <summary>
            Subtext displayed under the node name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanNode.Badges">
            <summary>
            Add badge icon to nodes like warnings and parallelism
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanNode.TopOperationsData">
            <summary>
            Top operations table data for the node
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanGraphPropertyBase.Name">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanGraphPropertyBase.ShowInTooltip">
            <summary>
            Flag to show/hide props in tooltip
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanGraphPropertyBase.DisplayOrder">
            <summary>
            Display order of property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanGraphPropertyBase.PositionAtBottom">
            <summary>
            Flag to show property at the bottom of tooltip. Generally done for for properties with longer value.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanGraphPropertyBase.DisplayValue">
            <summary>
            Value to be displayed in UI like tooltips and properties View
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanGraphPropertyBase.BetterValue">
            <summary>
            Indicates what kind of value is better amongst 2 values of the same property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanGraphPropertyBase.DataType">
            <summary>
            Indicates the data type of the property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.NestedExecutionPlanGraphProperty.Value">
            <summary>
            In case of nested properties, the value field is a list of properties. 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanGraphProperty.Value">
            <summary>
            Formatted value for the property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanEdges.RowCount">
            <summary>
            Count of the rows returned by the subtree of the edge.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanEdges.RowSize">
            <summary>
            Size of the rows returned by the subtree of the edge.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanEdges.Properties">
            <summary>
            Edge properties to be shown in the tooltip.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanRecommendation.DisplayString">
            <summary>
            Text displayed in the show plan graph control
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanRecommendation.Query">
            <summary>
            Raw query that is recommended to the user
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanRecommendation.QueryWithDescription">
            <summary>
            Query that will be opened in a new file once the user click on the recommendation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanGraphInfo.GraphFileContent">
            <summary>
            File contents
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanGraphInfo.GraphFileType">
            <summary>
            File type for execution plan. This will be the file type of the editor when the user opens the graph file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanGraphInfo.PlanIndexInFile">
            <summary>
            Index of the execution plan in the file content
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.Badge.Type">
            <summary>
            Type of the node overlay. This determines the icon that is displayed for it
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.Badge.Tooltip">
            <summary>
            Text to display for the overlay tooltip
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ExecutionPlanGraphUtils.ParseMissingIndexQueryText(System.String,System.String,System.String,System.String)">
            <summary>
            Creates query file text for the recommendations. It has the missing index query along with some lines of description.
            </summary>
            <param name="fileName">query file name that has generated the plan</param>
            <param name="impact">impact of the missing query on performance</param>
            <param name="database">database name to create the missing index in</param>
            <param name="query">actual query that will be used to create the missing index</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ExecutionPlanService">
            <summary>
            Main class for Execution Plan Service functionality
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ExecutionPlanService.#ctor">
            <summary>
            Construct a new Execution Plan Service instance with default parameters
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ExecutionPlanService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ExecutionPlanService.ServiceHost">
            <summary>
            Service host object for sending/receiving requests/events.
            Internal for testing purposes.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ExecutionPlanService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the Execution Plan Service instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ExecutionPlanService.HandleExecutionPlanComparisonRequest(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanComparisonParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.ExecutionPlan.Contracts.ExecutionPlanComparisonResult})">
            <summary>
            Handles requests for color matching similar nodes.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ExecutionPlanService.Dispose">
            <summary>
            Disposes the Execution Plan Service
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ActualPlanDataReaderNodeBuilder">
            <summary>
            Builds hierarchy of Graph objects from SQL 2000 Actual ShowPlan Record Set
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ActualPlanDataReaderNodeBuilder.#ctor">
            <summary>
            Constructs ActualPlanDataReaderNodeBuilder
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ActualPlanDataReaderNodeBuilder.NodeIdIndex">
            <summary>
            Gets index of Node Id in the recordset
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ActualPlanDataReaderNodeBuilder.ParentIndex">
            <summary>
            Gets index of Parent Id in the recordset
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ActualPlanDataReaderNodeBuilder.GetPropertyNames">
            <summary>
            Gets property names that correspond to values returned
            in each ShowPlan row.
            </summary>
            <returns>Array of property names</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FloatTypeConverter">
            <summary>
            FloatTypeConverter is used to get a desired float / double representation 
            in the property sheet and the tool tip.
            The currently used scientific format isn't very readable
            
            To use this converter, add the following attribute on top of the property:
            [TypeConverter(typeof(FloatTypeConverter))]
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FloatTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object value to another type.
            In this case the method only supports conversion to string.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DataSizeTypeConverter">
            <summary>
            DataSizeTypeConverter is used to represent data size in bytes,
            kilobytes, megabytes, etc., depending on the actual number. 
            
            To use this converter, add the following attribute on top of the property:
            [TypeConverter(typeof(DataSizeTypeConverter))]
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DataSizeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object value to another type.
            In this case the method only supports conversion to string.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DataSizeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type,System.Int32)">
            <summary>
            Converts the object value to another type.
            In this case the method only supports conversion to string.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <param name="formatIndex">The index in size formats to start with.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.KBSizeTypeConverter">
            <summary>
            KBSizeTypeConverter is used to represent data size in 
            kilobytes, megabytes, etc., depending on the actual number. 
            Assumes input is in kilobytes
            
            To use this converter, add the following attribute on top of the property:
            [TypeConverter(typeof(KBSizeTypeConverter))]
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.KBSizeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the object value to another type.
            In this case the method only supports conversion to string.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DisplayNameDescriptionAttribute">
            <summary>
            Describes property DisplayName and description keywords.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DisplayNameDescriptionAttribute.#ctor(System.String)">
            <summary>
            Public default constructor
            </summary>
            <param name="displayName">Property DisplayName key.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DisplayNameDescriptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Public default constructor
            </summary>
            <param name="displayName">Property DisplayName key.</param>
            <param name="description">Property Description key.</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DisplayNameDescriptionAttribute.DisplayName">
            <summary>
            Gets Display name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DisplayNameDescriptionAttribute.Description">
            <summary>
            Gets Description
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DisplayOrderAttribute">
            <summary>
            Represent order attribute. Tool tip window uses this attribute to sort properties accordingly
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DisplayOrderAttribute.#ctor(System.Int32)">
            <summary>
            Public default constructor
            </summary>
            <param name="displayOrder"></param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DisplayOrderAttribute.DisplayOrder">
            <summary>
            Display order
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowInToolTipAttribute">
            <summary>
            Represent order attribute. Tool tip window uses this attribute to sort properties accordingly
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowInToolTipAttribute.#ctor">
            <summary>
            Public default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowInToolTipAttribute.#ctor(System.Boolean)">
            <summary>
            Public constructor.
            </summary>
            <param name="value">Specifies whether the corresponding property should be visible in tool tips.
            The default value is true.</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowInToolTipAttribute.Value">
            <summary>
            True if a property should be shown in ToolTip; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowInToolTipAttribute.LongString">
            <summary>
            True if a property is a long string and should take an entire row in a tool tip; otherwise false.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Comparison.SkeletonManager">
            <summary>
            Handles operations for creating and comparing skeletons of showplan trees
            A skeleton is the tree with some nodes filtered out to reduce complexity
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Comparison.SkeletonManager.CreateSkeleton(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node)">
            <summary>
            Constructs a skeleton tree representing logical structure of the showplan
            Primarily represents joins and data access operators
            </summary>
            <param name="root">Node to construct skeleton of</param>
            <returns>SkeletonNode with children representing logical descendants of the input node</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Comparison.SkeletonManager.AreSkeletonsEquivalent(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Comparison.SkeletonNode,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Comparison.SkeletonNode,System.Boolean)">
            <summary>
            Checks root and all children for equivalent tree structure and logical equivalence at the node level
            </summary>
            <param name="root1"></param>
            <param name="root2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Comparison.SkeletonManager.ColorMatchingSections(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Comparison.SkeletonNode,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Comparison.SkeletonNode,System.Boolean)">
            <summary>
            Finds the largest matching subtrees in two skeletons and colors those subtrees a unique color
            </summary>
            <param name="skeleton1"></param>
            <param name="skeleton2"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Comparison.SkeletonManager.ShouldIgnoreDuringComparison(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node)">
            <summary>
            Determines if the node should be ignored when building a skeleton of the showplan
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Comparison.SkeletonManager.IgnoreWhenBuildingSkeleton">
            <summary>
            List of Node names which can safely be ignored when building the skeleton
            We can ignore these because not finding a matching between them shouldn't imapct of the shaping of matching nodes
            However, if in the future we see a use case to benefit from matching one of them, for ex I removed Filter because we need it to be skeleton node
            so we user can find issue for, and jump to the Filter node pair when doing scenario based issue detection
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Comparison.SkeletonNode.AddChild(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Comparison.SkeletonNode)">
            <summary>
            Adds node to children collection and sets this node as parent of the child
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConditionParser.ExtractFunctions(System.Object)">
            <summary>
            Enumerates FunctionType blocks and removes all items from UDF property.
            </summary>
            <param name="parsedItem">The item being parsed.</param>
            <returns>Enumeration.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConditionParser.#ctor">
            <summary>
            Private constructor prevents this object from being externally instantiated
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConditionParser.conditionParser">
            <summary>
            Singelton instance
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorOperationParser">
            <summary>
            Parses StmtCursorType ShowPlan XML nodes
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorOperationParser.GetCurrentNode(System.Object,System.Object,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext)">
            <summary>
            Creates new node and adds it to the graph.
            </summary>
            <param name="item">Item being parsed.</param>
            <param name="parentItem">Parent item.</param>
            <param name="parentNode">Parent node.</param>
            <param name="context">Node builder context.</param>
            <returns>The node that corresponds to the item being parsed.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorOperationParser.GetNodeOperation(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node)">
            <summary>
            Determines Operation that corresponds to the object being parsed.
            </summary>
            <param name="node">Node being parsed.</param>
            <returns>Operation that corresponds to the node.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorOperationParser.GetNodeSubtreeCost(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node)">
            <summary>
            Determines node subtree cost from existing node properties.
            </summary>
            <param name="node">Node being parsed.</param>
            <returns>Node subtree cost.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorOperationParser.#ctor">
            <summary>
            Private constructor prevents this object from being externally instantiated
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorOperationParser.cursorOperationParser">
            <summary>
            Singelton instance
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorStatementParser">
            <summary>
            Parses StmtCursorType ShowPlan XML nodes
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorStatementParser.GetNodeOperation(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node)">
            <summary>
            Determines Operation that corresponds to the object being parsed.
            </summary>
            <param name="node">Node being parsed.</param>
            <returns>Operation that corresponds to the node.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorStatementParser.#ctor">
            <summary>
            Private constructor prevents this object from being externally instantiated
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorStatementParser.cursorStatementParser">
            <summary>
            Singelton instance
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DataReaderNodeBuilder">
            <summary>
            Base class for building hierarchy of Graph objects from ShowPlan Record Set
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DataReaderNodeBuilder.#ctor">
            <summary>
            Initializes base class members.
            </summary>
            <param name="showPlanType">Show Plan type.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DataReaderNodeBuilder.Execute(System.Object)">
            <summary>
            Builds one or more Graphs that
            represnet data from the data source.
            </summary>
            <param name="dataSource">Data Source.</param>
            <returns>An array of AnalysisServices Graph objects.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DataReaderNodeBuilder.GetPropertyNames">
            <summary>
            Gets property names that correspond to values returned
            in each ShowPlan row.
            </summary>
            <returns>Array of property names</returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DataReaderNodeBuilder.NodeIdIndex">
            <summary>
            Gets index of Node Id in the recordset
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DataReaderNodeBuilder.ParentIndex">
            <summary>
            Gets index of Parent Id in the recordset
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DataReaderNodeBuilder.ShowPlanType">
            <summary>
            Gets the ShowPlanType of hte resordset
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DataReaderNodeBuilder.ReadValues(System.Data.IDataReader,System.Object[]@)">
            <summary>
            Sequentially reads all columns from IDataReader
            </summary>
            <param name="reader"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DataReaderNodeBuilder.ParseProperties(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node,System.String[],System.Object[])">
            <summary>
            Reads properties from the data row.
            </summary>
            <param name="node">Node which is populated with properties</param>
            <param name="names">Property names.</param>
            <param name="values">Property values.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DataReaderNodeBuilder.SetNodeSpecialProperties(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node)">
            <summary>
            Sets special properties on the node.
            </summary>
            <param name="node">Node.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DataReaderNodeBuilder.CreateNode(System.Int32,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext)">
            <summary>
            'Factory' method for creating Nodes, allows for subclasses to override
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DataReaderNodeBuilder.GetNodeSubtreeCost(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node)">
            <summary>
            Determines node subtree cost from existing node properties.
            </summary>
            <param name="node">Node being parsed.</param>
            <returns>Node subtree cost.</returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Edge.Properties">
            <summary>
            Gets Edge properties.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Edge.Item(System.String)">
            <summary>
            Gets or sets node property value.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Edge.Initialize(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node)">
            <summary>
            Copy some of edge properties from the node connected through this edge.
            </summary>
            <param name="node">The node connected on the right side of the edge.</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.EstimatedPlanDataReaderNodeBuilder">
            <summary>
            Builds hierarchy of Graph objects from SQL 2000 Estimated ShowPlan Record Set
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.EstimatedPlanDataReaderNodeBuilder.#ctor">
            <summary>
            Constructs EstimatedPlanDataReaderNodeBuilder
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.EstimatedPlanDataReaderNodeBuilder.NodeIdIndex">
            <summary>
            Gets index of Node Id in the recordset
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.EstimatedPlanDataReaderNodeBuilder.ParentIndex">
            <summary>
            Gets index of Parent Id in the recordset
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.EstimatedPlanDataReaderNodeBuilder.GetPropertyNames">
            <summary>
            Gets property names that correspond to values returned
            in each ShowPlan row.
            </summary>
            <returns>Array of property names</returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExpandableObjectWrapper.Item(System.String)">
            <summary>
            Gets or sets node property value.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExpandableObjectWrapper.GetDefaultDisplayName(System.Object)">
            <summary>
            Gets the result of item.ToString if it isn't the item class name.
            </summary>
            <param name="item">Item to stringize.</param>
            <returns>Default item display name.</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FilterTypeParser">
            <summary>
            Parses ShowPlan XML objects derived from RelOpBaseType type
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FilterTypeParser.#ctor">
            <summary>
            Private constructor prevents this object from being externally instantiated
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FilterTypeParser.ParseProperties(System.Object,System.ComponentModel.PropertyDescriptorCollection,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext)">
            <summary>
            Updates node special properties.
            </summary>
            <param name="node">Node being parsed.</param>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FilterTypeParser.filterTypeParser">
            <summary>
            Singelton instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FunctionTypeParser.GetCurrentNode(System.Object,System.Object,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext)">
            <summary>
            This function doesn't do anything. It simply returns the parent node
            passed it.
            </summary>
            <param name="item">Item being parsed.</param>
            <param name="parentItem">Parent item.</param>
            <param name="parentNode">Parent node.</param>
            <param name="context">Node builder context.</param>
            <returns>The node that corresponds to the item being parsed.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FunctionTypeParser.GetNodeOperation(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node)">
            <summary>
            Determines Operation that corresponds to the object being parsed.
            </summary>
            <param name="node">Node being parsed.</param>
            <returns>Operation that corresponds to the node.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FunctionTypeParser.GetNodeSubtreeCost(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node)">
            <summary>
            Determines node subtree cost from existing node properties.
            </summary>
            <param name="node">Node being parsed.</param>
            <returns>Node subtree cost.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FunctionTypeParser.#ctor">
            <summary>
            Private constructor prevents this object from being externally instantiated
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FunctionTypeParser.functionTypeParser">
            <summary>
            Singelton instance
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexOpTypeParser">
            <summary>
            Parses ShowPlan XML objects derived from RelOpBaseType type
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexOpTypeParser.#ctor">
            <summary>
            Private constructor prevents this object from being externally instantiated
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexOpTypeParser.indexOpTypeParser">
            <summary>
            Singelton instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexOpTypeParser.GetObjectTypeFromProperties(System.Object)">
            <summary>
            Retrieves the ObjectType that the Index operation references.
            </summary>
            <param name="indexScanType">The current Index operation node being parsed</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexOpTypeParser.AddIndexKindAsPhysicalOperatorKind(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType,System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            Adds the indexKind attribute, if it exists, from the ObjectType as a property in the targetPropertyBag.
            </summary>
            <param name="objectType">The objectType for the indexScan.</param>
            <param name="targetPropertyBag">The target the property bag where we will put the PhysicalOperationKind element.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexOpTypeParser.ParseProperties(System.Object,System.ComponentModel.PropertyDescriptorCollection,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext)">
            <summary>
            Updates node special properties.
            </summary>
            <param name="node">Node being parsed.  The node should be IndexScanType or CreateIndexType</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.INodeBuilder">
            <summary>
            Interface represents an abstract builder that gets
            data from the data source and represents it as
            an array of AnalysisServices Graph objects.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.INodeBuilder.Execute(System.Object)">
            <summary>
            Builds one or more Graphs that
            represnet data from the data source.
            </summary>
            <param name="dataSource">Data Source.</param>
            <returns>An array of AnalysisServices Graph objects.</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IXmlBatchParser">
            <summary>
            Interface represents ability to split an data source containing multiple
            batches / statement into statements and return an XML containing a single statement.
            This is used for XML ShowPlan saving.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IXmlBatchParser.GetSingleStatementXml(System.Object,System.Int32)">
            <summary>
            Builds one or more Graphs that
            represnet data from the data source.
            </summary>
            <param name="dataSource">Data Source.</param>
            <returns>An array of AnalysisServices Graph objects.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IXmlBatchParser.GetSingleStatementObject(System.Object,System.Int32)">
            <summary>
            Returns statements block type object
            </summary>
            <param name="dataSource">Data source</param>
            <param name="statementIndex">Statement index in the data source</param>
            <returns>Statement block type object</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MergeTypeParser">
            <summary>
            Parses ShowPlan XML objects derived from RelOpBaseType type
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MergeTypeParser.#ctor">
            <summary>
            Private constructor prevents this object from being externally instantiated
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MergeTypeParser.ParseProperties(System.Object,System.ComponentModel.PropertyDescriptorCollection,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext)">
            <summary>
            Updates node special properties.
            </summary>
            <param name="node">Node being parsed.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MergeTypeParser.ShouldSkipProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Indicates if a property should be skipped from the target property bag
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MergeTypeParser.mergeTypeParser">
            <summary>
            Singelton instance
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MergeColumns">
            <summary>
            This type is used for 2 purposes:
            1) It creates additional level in the property hierarchy. Instead of including
            InnerSideJoinColumns and OuterSideJoinColumnsField properties in the Node, we
            create additional property which has these two properties as nested properties.
            2) It allows to convert this to string the same way we convert other custom types
            See static Convert(MergeColumns) method in ObjectWrapperTypeConverter.cs
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.STATUS" -->
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.DisplayName">
            <summary>
            Gets Node display name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.Description">
            <summary>
            Gets Node description
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.IsParallel">
            <summary>
            Gets the value that indicates Node parallelism.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.HasWarnings">
            <summary>
            Gets the value that indicates whether the Node has warnings.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.HasCriticalWarnings">
            <summary>
            Gets the value that indicates whether the Node has critical warnings.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.HasPDWCost">
            <summary>
            Check if this showplan_xml has PDW cost.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.DisplayCost">
            <summary>
            Gets the cost associated with the Node.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.Cost">
            <summary>
            Gets the cost associated with the current Node.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.RelativeCost">
            <summary>
            Gets the relative cost associated with the current Node.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.SubtreeCost">
            <summary>
            Gets the cost associated with the Node subtree.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.MaxChildrenXPosition">
            <summary>
            Max Children X Position.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.Operation">
            <summary>
            Gets the operation information (localized name, description, image, etc)
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.Properties">
            <summary>
            Gets node properties.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.Item(System.String)">
            <summary>
            Gets or sets node property value.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.Children">
            <summary>
            Gets collection of node children.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.Edges">
            <summary>
            Gets collection of node children.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.Parent">
            <summary>
            Gets current node parent.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.IsFinished">
            <summary>
            Identifies if this node is finished executing
            </summary>
            <returns>True if finished</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.IsRunning">
            <summary>
            Identifies if this node is executing
            </summary>
            <returns>True if running</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.IsLogicallyEquivalentTo(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node,System.Boolean)">
            <summary>
            Returns whether the properties of two nodes are logically similar enough to be considered
            the same for skeleton comparison purposes
            Does not check children
            </summary>
            <param name="nodeToCompare"></param>
            <param name="ignoreDatabaseName"></param>
            <returns></returns>
            
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.LogicalOpUnlocName">
            <summary>
            ENU name for Logical Operator
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.PhysicalOpUnlocName">
            <summary>
            ENU name for Physical Operator
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.GetObjectNameForDisplay(System.Object)">
            <summary>
            Gets short object name for display.
            Since database and schema is not important and displaying table first is much useful,
            we are displaying object name in [Table].[Index] [Alias] format.
            </summary>
            <param name="objectProperty">Object property in the property bag</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.CompareObjectPropertyValue(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PropertyValue,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PropertyValue)">
            <summary>
            used to compare multiple string type PropertyValue in Object properties,
            for ex: Server, Database, Schema, Table, Index, etc...
            </summary>
            <returns>True if two PropertyValue are equal</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.GetDisplayLinesOfText(System.Boolean)">
            <summary>
            Gets lines of text displayed under the icon.
            </summary>
            <param name="roundCostForSmallGraph">Converts decimal costs in case of graph with less than 20 nodes.</param>
            <returns>Array of strings.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.GetElapsedTimeDisplayString">
            <summary>
            Provide a string for the actual elapsed time if it is available
            </summary>
            <returns>formatted string of execution time</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.GetRowStatisticsDisplayString">
            <summary>
            Provide a string for the actual rows vs estimated rows if they are both available in the actual execution plan
            </summary>
            <returns>formatted string of actual rows vs estimated rows; or null if estimateRows or actualRows is null</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.GetRowStatisticsDisplayString(System.Nullable{System.UInt64},System.Nullable{System.Double})">
            <summary>
            Inner function to provide a string for the actual rows vs estimated rows if they are both available in the actual execution plan
            </summary>
            <param name="actualRows">actual rows</param>
            <param name="estimateRows">estimated rows</param>
            <returns>formatted string of actual rows vs estimated rows; or null if any of the arguments is null</returns>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node.SeekOrScanPhysicalOpList">
            <summary>
            List of Seek or Scan type operators that can be considered match
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderConstants">
            <summary>
            A class that lists String constants common to XML Show Plan Node Parsing
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowPlanType">
            <summary>
            ShowPlan type
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext.Graph">
            <summary>
            Gets currently processing Graph
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext.ShowPlanType">
            <summary>
            Gets current ShowPlan type. 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext.Context">
            <summary>
            Misc context object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderFactory">
            <summary>
            Class that creates concrete INodeBuilder instances.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderFactory.Create(System.Object,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowPlanType)">
            <summary>
            Instantiates a concrete node builder based on dataSource type
            </summary>
            <param name="dataSource">data</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectParser">
            <summary>
            Base class for all object / Node parsers
            Used for parsing properties and hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectParser.ParseProperties(System.Object,System.ComponentModel.PropertyDescriptorCollection,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext)">
            <summary>
            Parses item properties.
            </summary>
            <param name="parsedItem">Item which properties are being parsed.</param>
            <param name="targetPropertyBag">Target property bag to populate with property wrappers.</param>
            <param name="context">Node builder context.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectParser.ShouldSkipProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Determines if the current property is used to reference a child item.
            Hierarchy properties are skipped when property wrappers are being created.
            </summary>
            <param name="property">Property subject to test.</param>
            <returns>True if the property is a hierarchy property;
            false if this is a regular property that should appear in the property grid.
            </returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter">
            <summary>
            This class converts methods for converting from ShowPlanXML native classes
            such as ColumnReferenceType or DefinedValuesListTypeDefinedValue to
            ShowPlan control types used in UI such as string or ExpandableObjectWrapper.
            
            The actual Conversion is done within multiple static Convert methods which are
            invoked dynamically via reflection. There is code in the static constructor which
            discovers all Convert methods and stores them in a hash table using the type
            to convert from as a key.
            If you need to add a new conversion type, you typically just need to add a new
            Convert() method.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Default">
            <summary>
            Default instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.ConvertToWrapperObject(System.Object)">
            <summary>
            Default converter to ExpandableObjectWrapper 
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnReferenceType)">
            <summary>
            Converts ColumnReferenceType to a wrapper object.
            </summary>
            <param name="item">Object to convert.</param>
            <returns>Wrapper object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GroupingSetReferenceType)">
            <summary>
            Converts GroupingSetReferenceType to a wrapper object.
            </summary>
            <param name="item">Object to convert.</param>
            <returns>Wrapper object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType)">
            <summary>
            Converts ObjectType to a wrapper object.
            </summary>
            <param name="item">Object to convert.</param>
            <returns>Wrapper object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SingleColumnReferenceType)">
            <summary>
            Converts ObjectType to a wrapper object.
            </summary>
            <param name="item">Object to convert.</param>
            <returns>Wrapper object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DefinedValuesListTypeDefinedValue[])">
            <summary>
            Converts array of DefinedValuesListTypeDefinedValue to a wrapper array.
            </summary>
            <param name="item">Object to convert.</param>
            <returns>Wrapper object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetOptionsType)">
            <summary>
            Converts ObjectType to a wrapper object.
            </summary>
            <param name="item">Object to convert.</param>
            <returns>Wrapper object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RollupLevelType)">
            <summary>
            Converts RollupLevelType to a wrapper object.
            </summary>
            <param name="item">Object to convert.</param>
            <returns>Wrapper object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WarningsType)">
            <summary>
            Converts WarningsType to a wrapper object.
            </summary>
            <param name="item">Object to convert.</param>
            <returns>Wrapper object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryFractionsType)">
            <summary>
            Converts WarningsType to a wrapper object.
            </summary>
            <param name="item">Object to convert.</param>
            <returns>Wrapper object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScalarType[][])">
            <summary>
            Converts ScalarType[][] to a string
            The format looks like (1,2,3), (4,5,6)
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScalarType)">
            <summary>
            Converts ScalarType to a wrapper object
            </summary>
            <param name="item">scalar to be converted</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScalarExpressionType)">
            <summary>
            Converts ScalarType to a string.
            </summary>
            <param name="item">Object to convert.</param>
            <returns>Scalar string.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareType)">
            <summary>
            Converts CompareType to a wrapper object.
            </summary>
            <param name="item">Object to convert.</param>
            <returns>Wrapper object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OrderByTypeOrderByColumn)">
            <summary>
            Converts OrderByTypeOrderByColumn to a wrapper object.
            </summary>
            <param name="item">Object to convert.</param>
            <returns>Wrapper object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScanRangeType)">
            <summary>
            Converts ScanRangeType to a wrapper object.
            </summary>
            <param name="item">Object to convert.</param>
            <returns>Wrapper object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SeekPredicateType)">
            <summary>
            Converts SeekPredicateType to a wrapper object.
            </summary>
            <param name="item">Object to convert.</param>
            <returns>Wrapper object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SeekPredicatesType)">
            <summary>
            Converts SeekPredicatesType to a wrapper object.
            </summary>
            <param name="items">Objects to convert.</param>
            <returns>Wrapper object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SeekPredicateNewType)">
            <summary>
            Converts SeekPredicateNewType to a wrapper object.
            </summary>
            <param name="items">Objects to convert.</param>
            <returns>Wrapper object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SeekPredicatePartType)">
            <summary>
            Converts SeekPredicatePartType to a wrapper object.
            </summary>
            <param name="items">Objects to convert.</param>
            <returns>Wrapper object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.Convert(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MergeColumns)">
            <summary>
            Converts MergeColumns to a wrapper object.
            </summary>
            <param name="item">Object to convert.</param>
            <returns>Wrapper object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if this converter can convert an object from the specified type.
            </summary>
            <param name="context">Type descriptor context.</param>
            <param name="sourceType">Source object type.</param>
            <returns>True if the object can be converted; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts an object to a type supported by this converter.
            Note that the target type is determined by the converter itself.
            </summary>
            <param name="context">Type descriptor context.</param>
            <param name="culture">Culture.</param>
            <param name="value">The object or value to convert from.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts an object to a specified type.
            </summary>
            <param name="context">Type descriptor context.</param>
            <param name="culture">Culture.</param>
            <param name="value">The object or value to convert from.</param>
            <param name="destType">Target type to convert to.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.ConvertToObjectWrapper(System.Object)">
            <summary>
            Converts an object to a wrapper object.
            </summary>
            <param name="item">An object to convert.</param>
            <returns>Array or object wrapper that implements ICustomTypeDescriptor and provides expandable properties.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.MergeString(System.String,System.Object[])">
            <summary>
            Constructs string from multiple items.
            </summary>
            <param name="separator">Separator placed between items.</param>
            <param name="items">Items to be merged.</param>
            <returns>Text string that contains merged items with separators between them.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.MakeDisplayNameFromObjectNamesAndValues(System.Object)">
            <summary>
            Makes a comma separated list from object property names and values.
            This method overload enumerates all properties.
            </summary>
            <param name="item">Object to get display name for.</param>
            <returns>Display name string.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.MakeDisplayNameFromObjectNamesAndValues(System.Object,System.String[])">
            <summary>
            Makes a comma separated list from object property names and values.
            This method overload uses only specified properties.
            </summary>
            <param name="item">Object to get display name for.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectWrapperTypeConverter.AppendPropertyNameValuePair(System.Text.StringBuilder,System.Object,System.ComponentModel.PropertyDescriptor)">
            <summary>
            An utility method that appends property name and value to string builder.
            </summary>
            <param name="stringBuilder">String builder.</param>
            <param name="item">Object that contains properties.</param>
            <param name="property">Property Descriptor.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Operation.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructs Operation.
            </summary>
            <param name="name">Operator name</param>
            <param name="displayNameKey">Display name resource ID</param>
            <param name="descriptionKey">Description resource ID</param>
            <param name="imageName">Image name</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Operation.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name">Operator name</param>
            <param name="displayNameKey">Display name resource ID</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Operation.Name">
            <summary>
            Gets operator name.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Operation.DisplayName">
            <summary>
            Gets localized display name.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Operation.Description">
            <summary>
            Gets localized description.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Operation.Image">
            <summary>
            Gets image.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Operation.CreateUnknown(System.String,System.String)">
            <summary>
            Creates one-off operation with only display name.
            </summary>
            <param name="operationDisplayName">Operation display name.</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Operation.Unknown">
            <summary>
            Unknown operation
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OperationTable">
            <summary>
            A class that holds information about a physical or logical operator, or a statement.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PropertyFactory">
            <summary>
            PropertyFactory creates properties based on template properties (this class public properties)
            
            IMPORTANT: Property names should match those in ShowPlanXML classes
            
            Note: to hide a property from PropertyGrid, it should be defined
            here with [Browsable(false)] attribute.
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PropertyFactory.RunTimePartitionSummary">
            <summary>
            Run time partition summary should not show up as one node. Details such as PartitionsAccessed is displayed in individually.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpBaseTypeParser">
            <summary>
            Parses ShowPlan XML objects derived from RelOpBaseType type
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpBaseTypeParser.GetCurrentNode(System.Object,System.Object,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext)">
            <summary>
            This function doesn't do anything. It simply returns the parent node
            passed it.
            </summary>
            <param name="item">Item being parsed.</param>
            <param name="parentItem">Parent item.</param>
            <param name="parentNode">Parent node.</param>
            <param name="context">Node builder context.</param>
            <returns>The node that corresponds to the item being parsed.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpBaseTypeParser.GetChildren(System.Object)">
            <summary>
            Enumerates children items of the item being parsed.
            </summary>
            <param name="parsedItem">The item being parsed.</param>
            <returns>Enumeration.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpBaseTypeParser.#ctor">
            <summary>
            Protected constructor prevents this object from being externally instantiated
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpBaseTypeParser.relOpBaseTypeParser">
            <summary>
            Singelton instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpTypeParser.GetCurrentNode(System.Object,System.Object,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext)">
            <summary>
            Creates new node and adds it to the graph.
            </summary>
            <param name="item">Item being parsed.</param>
            <param name="parentItem">Parent item.</param>
            <param name="parentNode">Parent node.</param>
            <param name="context">Node builder context.</param>
            <returns>The node that corresponds to the item being parsed.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpTypeParser.GetChildren(System.Object)">
            <summary>
            Enumerates children items of the item being parsed.
            </summary>
            <param name="parsedItem">The item being parsed.</param>
            <returns>Enumeration.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpTypeParser.GetNodeOperation(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node)">
            <summary>
            Determines Operation that corresponds to the object being parsed.
            </summary>
            <param name="node">Node being parsed.</param>
            <returns>Operation that corresponds to the node.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpTypeParser.GetNodeSubtreeCost(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node)">
            <summary>
            Determines node subtree cost from existing node properties.
            </summary>
            <param name="node">Node being parsed.</param>
            <returns>Node subtree cost.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpTypeParser.ParseProperties(System.Object,System.ComponentModel.PropertyDescriptorCollection,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext)">
            <summary>
            Updates node special properties such as Operator, Cost, SubtreeCost.
            </summary>
            <param name="node">Node being parsed.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpTypeParser.GetPartitionRangeString(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimePartitionSummaryTypePartitionsAccessedPartitionRange[])">
            <summary>
            Helper method to format partition range string.
            </summary>
            <param name="ranges">Partition ranges</param>
            <returns>property string</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpTypeParser.#ctor">
            <summary>
            Private constructor prevents this object from being externally instantiated
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpTypeParser.relOpTypeParser">
            <summary>
            Singelton instance
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeCounters">
            <summary>
            RunTimeCounters class stores RunTimeCountersPerThread information
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeCounters.TotalCounters">
            <summary>
            sum of values passed to AddCounter
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeCounters.MaxCounter">
            <summary>
            max value passed to AddCounter
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeCounters.DisplayTotalCounters">
            <summary>
            if true, display TotalCounters as string representation, otherwise display MaxCounter
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeCounters.NumOfCounters">
            <summary>
            Returns the number of Counter objects added to counters list
            Does not represent the calculated total count.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeCounters.ToString">
            <summary>
            string representation of RunTimeCounters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemGrantRunTimeCounters">
            <summary>
            derived class that overrides ToString for memory grant related properties
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemGrantRunTimeCounters.ToString">
            <summary>
            string representation of MemGrantRunTimeCounters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowPlanGraph">
            <summary>
            Extension of graph with some handy included methods specific for ShowPlan use
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowPlanGraph.Statement">
            <summary>
            Gets the SQL Statement for this graph.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowPlanGraph.StatementId">
            <summary>
            The StatementId as recorded in the RootNode for this graph, -1 if not available
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowPlanGraph.StatementCompId">
            <summary>
            The StatementCompId as recorded in the RootNode for this graph, -1 if not available
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowPlanGraph.XmlDocument">
            <summary>
            Contains the raw xml document for the graph. Used to save graphs. 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowPlanGraph.QueryPlanHash">
            <summary>
            The QueryPlanHash as recorded in the RootNode for this graph, null if not available
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowPlanGraph.ParseShowPlanXML(System.Object,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowPlanType)">
            <summary>
            Helper method to parse an XMLString and return the set of ShowPlan graphs for it
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowPlanXML">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowPlanXML.BatchSequence">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowPlanXML.Version">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowPlanXML.Build">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowPlanXML.ClusteredMode">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowPlanXML.ClusteredModeSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtBlockType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtBlockType.Items">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExternalDistributedComputationType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExternalDistributedComputationType.Items">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExternalDistributedComputationType.EdcShowplanXml">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtSimpleType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtSimpleType.Dispatcher">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtSimpleType.QueryPlan">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtSimpleType.UDF">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtSimpleType.StoredProc">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParameterSensitivePredicateType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParameterSensitivePredicateType.StatisticsInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParameterSensitivePredicateType.Predicate">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParameterSensitivePredicateType.LowBoundary">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParameterSensitivePredicateType.HighBoundary">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StatsInfoType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StatsInfoType.Database">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StatsInfoType.Schema">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StatsInfoType.Table">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StatsInfoType.Statistics">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StatsInfoType.ModificationCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StatsInfoType.SamplingPercent">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StatsInfoType.LastUpdate">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StatsInfoType.LastUpdateSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanType.Operation">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanType.CursorName">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanType.CursorActualType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanType.CursorActualTypeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanType.CursorRequestedType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanType.CursorRequestedTypeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanType.CursorConcurrency">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanType.CursorConcurrencySpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanType.ForwardOnly">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanType.ForwardOnlySpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanTypeOperation">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanTypeOperation.Dispatcher">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanTypeOperation.QueryPlan">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanTypeOperation.UDF">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanTypeOperation.OperationType">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.InternalInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.ThreadStat">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.MissingIndexes">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.GuessedSelectivity">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.UnmatchedIndexes">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.Warnings">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.MemoryGrantInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.OptimizerHardwareDependentProperties">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.OptimizerStatsUsage">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.TraceFlags">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.WaitStats">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.QueryTimeStats">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.ParameterList">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.DegreeOfParallelism">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.DegreeOfParallelismSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.EffectiveDegreeOfParallelism">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.EffectiveDegreeOfParallelismSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.NonParallelPlanReason">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.MemoryGrant">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.MemoryGrantSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.CachedPlanSize">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.CachedPlanSizeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.CompileTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.CompileTimeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.CompileCPU">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.CompileCPUSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.CompileMemory">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.CompileMemorySpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.UsePlan">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.UsePlanSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.ContainsInterleavedExecutionCandidates">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.ContainsInterleavedExecutionCandidatesSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.ContainsInlineScalarTsqlUdfs">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.ContainsInlineScalarTsqlUdfsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.QueryVariantID">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.QueryVariantIDSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryPlanType.DispatcherPlanHandle">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.InternalInfoType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.InternalInfoType.Any">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.InternalInfoType.AnyAttr">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ThreadStatType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ThreadStatType.ThreadReservation">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ThreadStatType.Branches">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ThreadStatType.UsedThreads">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ThreadStatType.UsedThreadsSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ThreadReservationType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ThreadReservationType.NodeId">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ThreadReservationType.NodeIdSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ThreadReservationType.ReservedThreads">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MissingIndexGroupType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MissingIndexGroupType.MissingIndex">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MissingIndexGroupType.Impact">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MissingIndexType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MissingIndexType.ColumnGroup">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MissingIndexType.Database">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MissingIndexType.Schema">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MissingIndexType.Table">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnGroupType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnGroupType.Column">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnGroupType.Usage">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnType.Name">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnType.ColumnId">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnGroupTypeUsage">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnGroupTypeUsage.EQUALITY">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnGroupTypeUsage.INEQUALITY">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnGroupTypeUsage.INCLUDE">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GuessedSelectivityType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GuessedSelectivityType.Spatial">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.Server">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.Database">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.Schema">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.Table">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.Index">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.Filtered">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.FilteredSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.OnlineInbuildIndex">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.OnlineInbuildIndexSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.OnlineIndexBuildMappingIndex">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.OnlineIndexBuildMappingIndexSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.Alias">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.TableReferenceId">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.TableReferenceIdSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.IndexKind">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.IndexKindSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.CloneAccessScope">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.CloneAccessScopeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.Storage">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.StorageSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.GraphWorkTableType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.GraphWorkTableTypeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.GraphWorkTableIdentifier">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ObjectType.GraphWorkTableIdentifierSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexKindType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexKindType.Heap">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexKindType.Clustered">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexKindType.FTSChangeTracking">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexKindType.FTSMapping">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexKindType.NonClustered">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexKindType.PrimaryXML">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexKindType.SecondaryXML">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexKindType.Spatial">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexKindType.ViewClustered">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexKindType.ViewNonClustered">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexKindType.NonClusteredHash">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexKindType.SelectiveXML">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexKindType.SecondarySelectiveXML">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CloneAccessScopeType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CloneAccessScopeType.Primary">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CloneAccessScopeType.Secondary">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CloneAccessScopeType.Both">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CloneAccessScopeType.Either">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CloneAccessScopeType.ExactMatch">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CloneAccessScopeType.Local">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StorageType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StorageType.RowStore">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StorageType.ColumnStore">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StorageType.MemoryOptimized">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UnmatchedIndexesType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UnmatchedIndexesType.Parameterization">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WarningsType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WarningsType.Items">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WarningsType.ItemsElementName">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WarningsType.NoJoinPredicate">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WarningsType.NoJoinPredicateSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WarningsType.SpatialGuess">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WarningsType.SpatialGuessSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WarningsType.UnmatchedIndexes">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WarningsType.UnmatchedIndexesSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WarningsType.FullUpdateForOnlineIndexBuild">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WarningsType.FullUpdateForOnlineIndexBuildSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnReferenceListType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnReferenceListType.ColumnReference">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnReferenceType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnReferenceType.ScalarOperator">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnReferenceType.InternalInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnReferenceType.Server">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnReferenceType.Database">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnReferenceType.Schema">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnReferenceType.Table">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnReferenceType.Alias">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnReferenceType.Column">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnReferenceType.ComputedColumn">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnReferenceType.ComputedColumnSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnReferenceType.ParameterDataType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnReferenceType.ParameterCompiledValue">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ColumnReferenceType.ParameterRuntimeValue">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScalarType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScalarType.Item">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScalarType.InternalInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScalarType.ScalarString">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AggregateType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AggregateType.ScalarOperator">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AggregateType.AggType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AggregateType.Distinct">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ArithmeticType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ArithmeticType.ScalarOperator">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ArithmeticType.Operation">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ArithmeticOperationType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ArithmeticOperationType.ADD">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ArithmeticOperationType.BIT_ADD">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ArithmeticOperationType.BIT_AND">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ArithmeticOperationType.BIT_COMBINE">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ArithmeticOperationType.BIT_NOT">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ArithmeticOperationType.BIT_OR">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ArithmeticOperationType.BIT_XOR">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ArithmeticOperationType.DIV">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ArithmeticOperationType.HASH">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ArithmeticOperationType.MINUS">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ArithmeticOperationType.MOD">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ArithmeticOperationType.MULT">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ArithmeticOperationType.SUB">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AssignType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AssignType.Item">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AssignType.ScalarOperator">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AssignType.SourceColumn">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AssignType.TargetColumn">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareType.ScalarOperator">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareType.CompareOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareOpType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareOpType.BINARYIS">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareOpType.BOTHNULL">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareOpType.EQ">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareOpType.GE">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareOpType.GT">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareOpType.IS">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareOpType.ISNOT">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareOpType.ISNOTNULL">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareOpType.ISNULL">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareOpType.LE">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareOpType.LT">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareOpType.NE">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CompareOpType.ONENULL">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConstType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConstType.ConstValue">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConvertType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConvertType.Style">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConvertType.ScalarOperator">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConvertType.DataType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConvertType.Length">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConvertType.LengthSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConvertType.Precision">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConvertType.PrecisionSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConvertType.Scale">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConvertType.ScaleSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConvertType.Style1">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConvertType.Implicit">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScalarExpressionType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScalarExpressionType.ScalarOperator">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetPredicateElementType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetPredicateElementType.SetPredicateType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetPredicateElementType.SetPredicateTypeSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetPredicateType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetPredicateType.Update">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetPredicateType.Insert">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConditionalType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConditionalType.Condition">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConditionalType.Then">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConditionalType.Else">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IdentType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IdentType.ColumnReference">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IdentType.Table">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IntrinsicType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IntrinsicType.ScalarOperator">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IntrinsicType.FunctionName">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalType.ScalarOperator">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalType.Operation">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOperationType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOperationType.AND">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOperationType.IMPLIES">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOperationType.ISNOTNULL">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOperationType.ISNULL">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOperationType.IS">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOperationType.IsFalseOrNull">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOperationType.NOT">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOperationType.OR">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOperationType.XOR">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MultAssignType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MultAssignType.Assign">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScalarExpressionListType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScalarExpressionListType.ScalarOperator">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScalarSequenceType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScalarSequenceType.FunctionName">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryType.ScalarOperator">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryType.Operation">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.OutputList">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.Warnings">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.MemoryFractions">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.RunTimeInformation">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.RunTimePartitionSummary">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.InternalInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.Item">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.ItemElementName">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.AvgRowSize">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.EstimateCPU">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.EstimateIO">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.EstimateRebinds">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.EstimateRewinds">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.EstimatedExecutionMode">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.EstimatedExecutionModeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.GroupExecuted">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.GroupExecutedSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.EstimateRows">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.EstimateRowsWithoutRowGoal">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.EstimateRowsWithoutRowGoalSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.EstimatedRowsRead">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.EstimatedRowsReadSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.LogicalOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.NodeId">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.NodeIdSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.Parallel">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.RemoteDataAccess">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.RemoteDataAccessSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.Partitioned">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.PartitionedSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.PhysicalOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.IsAdaptive">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.IsAdaptiveSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.AdaptiveThresholdRows">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.AdaptiveThresholdRowsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.EstimatedTotalSubtreeCost">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.TableCardinality">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.TableCardinalitySpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.StatsCollectionId">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.StatsCollectionIdSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.EstimatedJoinType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.EstimatedJoinTypeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.PDWAccumulativeCost">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpType.PDWAccumulativeCostSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryFractionsType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryFractionsType.Input">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryFractionsType.Output">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.Thread">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.BrickId">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.BrickIdSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualRebinds">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualRebindsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualRewinds">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualRewindsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualRows">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualRowsRead">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualRowsReadSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.Batches">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.BatchesSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualEndOfScans">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualExecutions">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualExecutionMode">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualExecutionModeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.TaskAddr">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.TaskAddrSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.SchedulerId">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.SchedulerIdSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.FirstActiveTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.FirstActiveTimeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.LastActiveTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.LastActiveTimeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.OpenTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.OpenTimeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.FirstRowTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.FirstRowTimeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.LastRowTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.LastRowTimeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.CloseTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.CloseTimeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualElapsedms">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualElapsedmsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualCPUms">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualCPUmsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualScans">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualScansSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualLogicalReads">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualLogicalReadsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualPhysicalReads">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualPhysicalReadsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualPageServerReads">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualPageServerReadsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualReadAheads">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualReadAheadsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualPageServerReadAheads">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualPageServerReadAheadsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualLobLogicalReads">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualLobLogicalReadsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualLobPhysicalReads">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualLobPhysicalReadsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualLobPageServerReads">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualLobPageServerReadsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualLobReadAheads">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualLobReadAheadsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualLobPageServerReadAheads">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualLobPageServerReadAheadsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.SegmentReads">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.SegmentReadsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.SegmentSkips">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.SegmentSkipsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualLocallyAggregatedRows">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualLocallyAggregatedRowsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.InputMemoryGrant">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.InputMemoryGrantSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.OutputMemoryGrant">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.OutputMemoryGrantSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.UsedMemoryGrant">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.UsedMemoryGrantSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.IsInterleavedExecuted">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.IsInterleavedExecutedSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualJoinType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.ActualJoinTypeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.HpcRowCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.HpcRowCountSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.HpcKernelElapsedUs">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.HpcKernelElapsedUsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.HpcHostToDeviceBytes">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.HpcHostToDeviceBytesSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.HpcDeviceToHostBytes">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimeInformationTypeRunTimeCountersPerThread.HpcDeviceToHostBytesSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExecutionModeType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExecutionModeType.Row">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExecutionModeType.Batch">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.AdaptiveJoin">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Apply">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Assert">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.BatchHashTableBuild">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Bitmap">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Broadcast">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ClusteredIndexDelete">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ClusteredIndexInsert">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ClusteredIndexScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ClusteredIndexSeek">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ClusteredIndexUpdate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ClusteredIndexMerge">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ClusteredUpdate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Collapse">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ColumnstoreIndexDelete">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ColumnstoreIndexInsert">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ColumnstoreIndexMerge">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ColumnstoreIndexScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ColumnstoreIndexUpdate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ComputeScalar">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ComputeToControlNode">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Concatenation">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ConstantScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ConstantTableGet">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ControlToComputeNodes">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Delete">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.DeletedScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ExternalBroadcast">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ExternalExtractionScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ExternalLocalStreaming">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ExternalRoundRobin">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ExternalSelect">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ExternalShuffle">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Filter">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ForeignKeyReferencesCheck">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.GbAgg">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.GbApply">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Get">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Generic">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.HashMatch">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.IndexDelete">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.IndexInsert">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.IndexScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Insert">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Join">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.IndexSeek">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.IndexSpool">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.IndexUpdate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.InsertedScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.LocalCube">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.LogRowScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.MergeInterval">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.MergeJoin">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.NestedLoops">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.OnlineIndexInsert">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Parallelism">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ParameterTableScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Print">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Project">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Put">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Rank">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.RemoteDelete">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.RemoteIndexScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.RemoteIndexSeek">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.RemoteInsert">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.RemoteQuery">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.RemoteScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.RemoteUpdate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.RIDLookup">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.RowCountSpool">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Segment">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Sequence">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.SequenceProject">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Shuffle">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.SingleSourceRoundRobinMove">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Sort">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Split">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.StreamAggregate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Switch">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.TableDelete">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.TableInsert">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.TableMerge">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.TableScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.TableSpool">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.TableUpdate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Tablevaluedfunction">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.TFP">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Top">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Trim">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.UDX">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.Union">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.UnionAll">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.WindowAggregate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.WindowSpool">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.KeyLookup">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PhysicalOpType.ExtensibleColumnStoreScan">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimePartitionSummaryType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimePartitionSummaryType.PartitionsAccessed">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimePartitionSummaryTypePartitionsAccessed">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimePartitionSummaryTypePartitionsAccessed.PartitionRange">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimePartitionSummaryTypePartitionsAccessed.PartitionCount">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimePartitionSummaryTypePartitionsAccessedPartitionRange">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimePartitionSummaryTypePartitionsAccessedPartitionRange.Start">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RunTimePartitionSummaryTypePartitionsAccessedPartitionRange.End">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType.HashKeysBuild">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType.HashKeysProbe">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType.BuildResidual">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType.ProbeResidual">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType.StarJoinInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType.Predicate">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType.PassThru">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType.OuterReferences">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType.PartitionId">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType.BitmapCreator">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType.BitmapCreatorSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType.Optimized">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType.WithOrderedPrefetch">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType.WithOrderedPrefetchSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType.WithUnorderedPrefetch">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AdaptiveJoinType.WithUnorderedPrefetchSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StarJoinInfoType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StarJoinInfoType.Root">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StarJoinInfoType.RootSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StarJoinInfoType.OperationType">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StarJoinInfoTypeOperationType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StarJoinInfoTypeOperationType.Fetch">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StarJoinInfoTypeOperationType.IndexIntersection">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StarJoinInfoTypeOperationType.IndexFilter">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StarJoinInfoTypeOperationType.IndexLookup">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SingleColumnReferenceType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SingleColumnReferenceType.ColumnReference">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpBaseType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpBaseType.DefinedValues">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RelOpBaseType.InternalInfo">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DefinedValuesListTypeDefinedValue">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DefinedValuesListTypeDefinedValue.Item">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DefinedValuesListTypeDefinedValue.Items">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DefinedValuesListTypeDefinedValueValueVector">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DefinedValuesListTypeDefinedValueValueVector.ColumnReference">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GetType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GetType.Bookmarks">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GetType.OutputColumns">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GetType.GeneratedData">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GetType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GetType.NumRows">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GetType.NumRowsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GetType.IsExternal">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GetType.IsExternalSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GetType.IsDistributed">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GetType.IsDistributedSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GetType.IsHashDistributed">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GetType.IsHashDistributedSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GetType.IsReplicated">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GetType.IsReplicatedSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GetType.IsRoundRobin">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GetType.IsRoundRobinSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OutputColumnsType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OutputColumnsType.DefinedValues">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OutputColumnsType.Object">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DMLOpType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DMLOpType.AssignmentMap">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DMLOpType.SourceTable">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DMLOpType.TargetTable">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.DMLOpType.RelOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LocalCubeType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LocalCubeType.GroupBy">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LocalCubeType.GroupingSets">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LocalCubeType.RelOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GroupingSetReferenceType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GroupingSetReferenceType.Value">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GbAggType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GbAggType.GroupBy">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GbAggType.AggFunctions">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GbAggType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GbAggType.IsScalar">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GbAggType.IsScalarSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GbAggType.AggType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GbAggType.HintType">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GbApplyType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GbApplyType.Predicate">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GbApplyType.AggFunctions">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GbApplyType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GbApplyType.JoinType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GbApplyType.AggType">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.JoinType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.JoinType.Predicate">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.JoinType.Probe">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.JoinType.RelOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ProjectType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ProjectType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ProjectType.IsNoOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ProjectType.IsNoOpSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExternalSelectType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExternalSelectType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExternalSelectType.MaterializeOperation">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExternalSelectType.DistributionType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExternalSelectType.IsDistributed">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExternalSelectType.IsDistributedSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExternalSelectType.IsExternal">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExternalSelectType.IsExternalSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExternalSelectType.IsFull">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExternalSelectType.IsFullSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MoveType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MoveType.DistributionKey">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MoveType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MoveType.MoveType1">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MoveType.DistributionType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MoveType.IsDistributed">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MoveType.IsDistributedSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MoveType.IsExternal">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MoveType.IsExternalSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MoveType.IsFull">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MoveType.IsFullSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GenericType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.GenericType.RelOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RemoteType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RemoteType.RemoteDestination">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RemoteType.RemoteSource">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RemoteType.RemoteObject">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RemoteQueryType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RemoteQueryType.RemoteQuery">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PutType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PutType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PutType.IsExternallyComputed">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PutType.IsExternallyComputedSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PutType.ShuffleType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PutType.ShuffleColumn">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RemoteModifyType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RemoteModifyType.SetPredicate">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RemoteModifyType.RelOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RemoteFetchType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RemoteFetchType.RelOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RemoteRangeType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RemoteRangeType.SeekPredicates">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SeekPredicatesType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SeekPredicatesType.Items">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SeekPredicateType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SeekPredicateType.Prefix">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SeekPredicateType.StartRange">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SeekPredicateType.EndRange">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SeekPredicateType.IsNotNull">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScanRangeType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScanRangeType.RangeColumns">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScanRangeType.RangeExpressions">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScanRangeType.ScanType">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SeekPredicateNewType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SeekPredicateNewType.SeekKeys">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SeekPredicatePartType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SeekPredicatePartType.Items">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BatchHashTableBuildType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BatchHashTableBuildType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BatchHashTableBuildType.BitmapCreator">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BatchHashTableBuildType.BitmapCreatorSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SpoolType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SpoolType.Item">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SpoolType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SpoolType.Stack">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SpoolType.StackSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SpoolType.PrimaryNodeId">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SpoolType.PrimaryNodeIdSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WindowAggregateType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WindowAggregateType.RelOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WindowType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WindowType.RelOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UDXType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UDXType.UsedUDXColumns">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UDXType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UDXType.UDXName">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopType.TieColumns">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopType.OffsetExpression">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopType.TopExpression">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopType.RowCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopType.RowCountSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopType.Rows">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopType.RowsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopType.IsPercent">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopType.IsPercentSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopType.WithTies">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopType.WithTiesSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopType.TopLocation">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SplitType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SplitType.ActionColumn">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SplitType.RelOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SequenceType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SequenceType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SequenceType.IsGraphDBTransitiveClosure">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SequenceType.IsGraphDBTransitiveClosureSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SequenceType.GraphSequenceIdentifier">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SegmentType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SegmentType.GroupBy">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SegmentType.SegmentColumn">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SegmentType.RelOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NestedLoopsType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NestedLoopsType.Predicate">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NestedLoopsType.PassThru">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NestedLoopsType.OuterReferences">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NestedLoopsType.PartitionId">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NestedLoopsType.ProbeColumn">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NestedLoopsType.StarJoinInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NestedLoopsType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NestedLoopsType.Optimized">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NestedLoopsType.WithOrderedPrefetch">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NestedLoopsType.WithOrderedPrefetchSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NestedLoopsType.WithUnorderedPrefetch">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NestedLoopsType.WithUnorderedPrefetchSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MergeType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MergeType.InnerSideJoinColumns">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MergeType.OuterSideJoinColumns">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MergeType.Residual">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MergeType.PassThru">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MergeType.StarJoinInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MergeType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MergeType.ManyToMany">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MergeType.ManyToManySpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConcatType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConcatType.RelOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SwitchType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SwitchType.Predicate">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CollapseType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CollapseType.GroupBy">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CollapseType.RelOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BitmapType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BitmapType.HashKeys">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BitmapType.RelOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SortType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SortType.OrderBy">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SortType.PartitionId">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SortType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SortType.Distinct">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OrderByTypeOrderByColumn">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OrderByTypeOrderByColumn.ColumnReference">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OrderByTypeOrderByColumn.Ascending">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopSortType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopSortType.Rows">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopSortType.WithTies">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TopSortType.WithTiesSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StreamAggregateType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StreamAggregateType.GroupBy">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StreamAggregateType.RollupInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StreamAggregateType.RelOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RollupInfoType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RollupInfoType.RollupLevel">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RollupInfoType.HighestLevel">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RollupLevelType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RollupLevelType.Level">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismType.PartitionColumns">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismType.OrderBy">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismType.HashKeys">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismType.ProbeColumn">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismType.Predicate">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismType.Activation">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismType.BrickRouting">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismType.PartitioningType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismType.PartitioningTypeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismType.Remoting">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismType.RemotingSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismType.LocalParallelism">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismType.LocalParallelismSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismType.InRow">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismType.InRowSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismTypeActivation">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismTypeActivation.Object">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismTypeActivation.Type">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismTypeActivation.FragmentElimination">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismTypeActivationType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismTypeActivationType.CloneLocation">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismTypeActivationType.Resource">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismTypeActivationType.SingleBrick">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismTypeActivationType.Region">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismTypeBrickRouting">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismTypeBrickRouting.Object">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ParallelismTypeBrickRouting.FragmentIdColumn">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PartitionType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PartitionType.Broadcast">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PartitionType.Demand">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PartitionType.Hash">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PartitionType.NoPartitioning">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PartitionType.Range">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PartitionType.RoundRobin">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PartitionType.CloneLocation">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ComputeScalarType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ComputeScalarType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ComputeScalarType.ComputeSequence">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ComputeScalarType.ComputeSequenceSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashType.HashKeysBuild">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashType.HashKeysProbe">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashType.BuildResidual">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashType.ProbeResidual">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashType.StarJoinInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashType.BitmapCreator">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashType.BitmapCreatorSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableValuedFunctionType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableValuedFunctionType.Object">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableValuedFunctionType.Predicate">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableValuedFunctionType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableValuedFunctionType.ParameterList">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PredictFunctionType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.PredictFunctionType.RelOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConstantScanType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ConstantScanType.Values">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FilterType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FilterType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FilterType.Predicate">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FilterType.StartupExpression">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SimpleIteratorOneChildType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SimpleIteratorOneChildType.RelOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RowsetType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.RowsetType.Object">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScalarInsertType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScalarInsertType.SetPredicate">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScalarInsertType.DMLRequestSort">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ScalarInsertType.DMLRequestSortSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CreateIndexType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CreateIndexType.RelOp">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UpdateType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UpdateType.SetPredicate">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UpdateType.ProbeColumn">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UpdateType.ActionColumn">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UpdateType.OriginalActionColumn">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UpdateType.AssignmentMap">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UpdateType.SourceTable">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UpdateType.TargetTable">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UpdateType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UpdateType.WithOrderedPrefetch">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UpdateType.WithOrderedPrefetchSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UpdateType.WithUnorderedPrefetch">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UpdateType.WithUnorderedPrefetchSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UpdateType.DMLRequestSort">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UpdateType.DMLRequestSortSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SimpleUpdateType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SimpleUpdateType.Item">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SimpleUpdateType.SetPredicate">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SimpleUpdateType.DMLRequestSort">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SimpleUpdateType.DMLRequestSortSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.SeekPredicates">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.Predicate">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.PartitionId">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.IndexedViewInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.Lookup">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.LookupSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.Ordered">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.ScanDirection">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.ScanDirectionSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.ForcedIndex">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.ForcedIndexSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.ForceSeek">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.ForceSeekSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.ForceSeekColumnCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.ForceSeekColumnCountSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.ForceScan">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.ForceScanSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.NoExpandHint">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.NoExpandHintSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.Storage">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.StorageSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.DynamicSeek">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.DynamicSeekSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.IndexScanType.SBSFileUrl">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OrderType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OrderType.BACKWARD">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OrderType.FORWARD">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XcsScanType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XcsScanType.Predicate">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XcsScanType.PartitionId">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XcsScanType.IndexedViewInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XcsScanType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XcsScanType.Ordered">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XcsScanType.ForcedIndex">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XcsScanType.ForcedIndexSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XcsScanType.ForceScan">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XcsScanType.ForceScanSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XcsScanType.NoExpandHint">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XcsScanType.NoExpandHintSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XcsScanType.Storage">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XcsScanType.StorageSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableScanType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableScanType.Predicate">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableScanType.PartitionId">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableScanType.IndexedViewInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableScanType.Ordered">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableScanType.ForcedIndex">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableScanType.ForcedIndexSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableScanType.ForceScan">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableScanType.ForceScanSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableScanType.NoExpandHint">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableScanType.NoExpandHintSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableScanType.Storage">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TableScanType.StorageSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ForeignKeyReferencesCheckType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ForeignKeyReferencesCheckType.RelOp">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ForeignKeyReferencesCheckType.ForeignKeyReferenceCheck">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ForeignKeyReferencesCheckType.ForeignKeyReferencesCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ForeignKeyReferencesCheckType.ForeignKeyReferencesCountSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ForeignKeyReferencesCheckType.NoMatchingIndexCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ForeignKeyReferencesCheckType.NoMatchingIndexCountSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ForeignKeyReferencesCheckType.PartialMatchingIndexCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ForeignKeyReferencesCheckType.PartialMatchingIndexCountSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ForeignKeyReferenceCheckType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ForeignKeyReferenceCheckType.IndexScan">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.AdaptiveJoin">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Apply">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Assert">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.BatchHashTableBuild">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Bitmap">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Collapse">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.ComputeScalar">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Concat">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.ConstTableGet">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.ConstantScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.CreateIndex">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Delete">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.DeletedScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.ExtExtractScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Extension">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.ExternalSelect">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Filter">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.ForeignKeyReferencesCheck">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.GbAgg">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.GbApply">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Generic">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Get">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Hash">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.IndexScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Insert">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.InsertedScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Join">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.LocalCube">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.LogRowScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Merge">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.MergeInterval">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Move">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.NestedLoops">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.OnlineIndex">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Parallelism">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.ParameterTableScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.PrintDataflow">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Project">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Put">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.RemoteFetch">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.RemoteModify">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.RemoteQuery">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.RemoteRange">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.RemoteScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.RowCountSpool">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.ScalarInsert">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Segment">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Sequence">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.SequenceProject">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.SimpleUpdate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Sort">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Split">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Spool">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.StreamAggregate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Switch">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.TFP">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.TableScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.TableValuedFunction">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Top">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.TopSort">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Union">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.UnionAll">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.Update">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.WindowAggregate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.WindowSpool">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemChoiceType.XcsScan">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Aggregate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.AntiDiff">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Assert">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.AsyncConcat">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.BatchHashTableBuild">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.BitmapCreate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.ClusteredIndexScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.ClusteredIndexSeek">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.ClusteredUpdate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Collapse">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.ComputeScalar">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Concatenation">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.ConstantScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.ConstantTableGet">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.CrossJoin">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Delete">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.DeletedScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.DistinctSort">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Distinct">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.DistributeStreams">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.EagerSpool">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.ExternalExtractionScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.ExternalSelect">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Filter">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.FlowDistinct">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.ForeignKeyReferencesCheck">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.FullOuterJoin">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.GatherStreams">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.GbAgg">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.GbApply">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Get">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Generic">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.InnerApply">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.IndexScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.IndexSeek">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.InnerJoin">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Insert">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.InsertedScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Intersect">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.IntersectAll">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.LazySpool">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.LeftAntiSemiApply">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.LeftSemiApply">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.LeftOuterApply">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.LeftAntiSemiJoin">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.LeftDiff">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.LeftDiffAll">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.LeftOuterJoin">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.LeftSemiJoin">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.LocalCube">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.LogRowScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Merge">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.MergeInterval">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.MergeStats">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Move">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.ParameterTableScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.PartialAggregate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Print">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Project">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Put">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Rank">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.RemoteDelete">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.RemoteIndexScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.RemoteIndexSeek">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.RemoteInsert">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.RemoteQuery">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.RemoteScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.RemoteUpdate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.RepartitionStreams">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.RIDLookup">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.RightAntiSemiJoin">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.RightDiff">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.RightDiffAll">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.RightOuterJoin">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.RightSemiJoin">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Segment">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Sequence">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Sort">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Split">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Switch">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Tablevaluedfunction">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.TFP">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.TableScan">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Top">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.TopNSort">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.UDX">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Union">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.UnionAll">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.Update">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.LocalStats">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.WindowSpool">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.WindowAggregate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.KeyLookup">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.LogicalOpType.ExtensibleColumnStoreScan">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryOperationType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryOperationType.EQALL">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryOperationType.EQANY">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryOperationType.EXISTS">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryOperationType.GEALL">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryOperationType.GEANY">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryOperationType.GTALL">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryOperationType.GTANY">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryOperationType.IN">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryOperationType.LEALL">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryOperationType.LEANY">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryOperationType.LTALL">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryOperationType.LTANY">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryOperationType.NEALL">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SubqueryOperationType.NEANY">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UDTMethodType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UDTMethodType.CLRFunction">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UDTMethodType.ScalarOperator">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CLRFunctionType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CLRFunctionType.Assembly">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CLRFunctionType.Class">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CLRFunctionType.Method">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UDAggregateType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UDAggregateType.UDAggObject">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UDAggregateType.ScalarOperator">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UDAggregateType.Distinct">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UDFType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UDFType.ScalarOperator">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UDFType.CLRFunction">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UDFType.FunctionName">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UDFType.IsClrFunction">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.UDFType.IsClrFunctionSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExchangeSpillDetailsType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExchangeSpillDetailsType.WritesToTempDb">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ExchangeSpillDetailsType.WritesToTempDbSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashSpillDetailsType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashSpillDetailsType.GrantedMemoryKb">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashSpillDetailsType.GrantedMemoryKbSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashSpillDetailsType.UsedMemoryKb">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashSpillDetailsType.UsedMemoryKbSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashSpillDetailsType.WritesToTempDb">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashSpillDetailsType.WritesToTempDbSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashSpillDetailsType.ReadsFromTempDb">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.HashSpillDetailsType.ReadsFromTempDbSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantWarningInfo">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantWarningInfo.GrantWarningKind">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantWarningInfo.RequestedMemory">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantWarningInfo.GrantedMemory">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantWarningInfo.MaxUsedMemory">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantWarningType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantWarningType.ExcessiveGrant">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantWarningType.UsedMoreThanGranted">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantWarningType.GrantIncrease">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AffectingConvertWarningType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AffectingConvertWarningType.ConvertIssue">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AffectingConvertWarningType.Expression">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AffectingConvertWarningTypeConvertIssue">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AffectingConvertWarningTypeConvertIssue.CardinalityEstimate">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.AffectingConvertWarningTypeConvertIssue.SeekPlan">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SortSpillDetailsType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SortSpillDetailsType.GrantedMemoryKb">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SortSpillDetailsType.GrantedMemoryKbSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SortSpillDetailsType.UsedMemoryKb">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SortSpillDetailsType.UsedMemoryKbSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SortSpillDetailsType.WritesToTempDb">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SortSpillDetailsType.WritesToTempDbSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SortSpillDetailsType.ReadsFromTempDb">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SortSpillDetailsType.ReadsFromTempDbSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SpillOccurredType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SpillOccurredType.Detail">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SpillOccurredType.DetailSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SpillToTempDbType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SpillToTempDbType.SpillLevel">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SpillToTempDbType.SpillLevelSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SpillToTempDbType.SpilledThreadCount">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SpillToTempDbType.SpilledThreadCountSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WaitWarningType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WaitWarningType.WaitType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WaitWarningType.WaitTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WaitWarningType.WaitTimeSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WaitWarningTypeWaitType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WaitWarningTypeWaitType.MemoryGrant">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemsChoiceType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemsChoiceType.ColumnsWithNoStatistics">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemsChoiceType.ColumnsWithStaleStatistics">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemsChoiceType.ExchangeSpillDetails">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemsChoiceType.HashSpillDetails">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemsChoiceType.MemoryGrantWarning">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemsChoiceType.PlanAffectingConvert">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemsChoiceType.SortSpillDetails">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemsChoiceType.SpillOccurred">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemsChoiceType.SpillToTempDb">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ItemsChoiceType.Wait">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.SerialRequiredMemory">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.SerialDesiredMemory">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.RequiredMemory">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.RequiredMemorySpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.DesiredMemory">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.DesiredMemorySpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.RequestedMemory">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.RequestedMemorySpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.GrantWaitTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.GrantWaitTimeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.GrantedMemory">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.GrantedMemorySpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.MaxUsedMemory">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.MaxUsedMemorySpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.MaxQueryMemory">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.MaxQueryMemorySpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.LastRequestedMemory">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.LastRequestedMemorySpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.IsMemoryGrantFeedbackAdjusted">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantType.IsMemoryGrantFeedbackAdjustedSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantFeedbackInfoType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantFeedbackInfoType.YesAdjusting">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantFeedbackInfoType.YesStable">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantFeedbackInfoType.NoFirstExecution">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantFeedbackInfoType.NoAccurateGrant">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantFeedbackInfoType.NoFeedbackDisabled">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.MemoryGrantFeedbackInfoType.YesPercentileAdjusting">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OptimizerHardwareDependentPropertiesType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OptimizerHardwareDependentPropertiesType.EstimatedAvailableMemoryGrant">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OptimizerHardwareDependentPropertiesType.EstimatedPagesCached">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OptimizerHardwareDependentPropertiesType.EstimatedAvailableDegreeOfParallelism">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OptimizerHardwareDependentPropertiesType.EstimatedAvailableDegreeOfParallelismSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OptimizerHardwareDependentPropertiesType.MaxCompileMemory">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.OptimizerHardwareDependentPropertiesType.MaxCompileMemorySpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TraceFlagListType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TraceFlagListType.TraceFlag">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TraceFlagListType.IsCompileTime">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TraceFlagType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TraceFlagType.Value">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TraceFlagType.Scope">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TraceFlagScopeType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TraceFlagScopeType.Global">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.TraceFlagScopeType.Session">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WaitStatType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WaitStatType.WaitType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WaitStatType.WaitTimeMs">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.WaitStatType.WaitCount">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryExecTimeType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryExecTimeType.CpuTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryExecTimeType.ElapsedTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryExecTimeType.UdfCpuTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryExecTimeType.UdfCpuTimeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryExecTimeType.UdfElapsedTime">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.QueryExecTimeType.UdfElapsedTimeSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FunctionType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FunctionType.Statements">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FunctionType.ProcName">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FunctionType.IsNativelyCompiled">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FunctionType.IsNativelyCompiledSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanTypeOperationOperationType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanTypeOperationOperationType.FetchQuery">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanTypeOperationOperationType.PopulateQuery">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanTypeOperationOperationType.RefreshQuery">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorType.Dynamic">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorType.FastForward">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorType.Keyset">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorType.SnapShot">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanTypeCursorConcurrency">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanTypeCursorConcurrency.ReadOnly">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanTypeCursorConcurrency.Pessimistic">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.CursorPlanTypeCursorConcurrency.Optimistic">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetOptionsType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetOptionsType.ANSI_NULLS">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetOptionsType.ANSI_NULLSSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetOptionsType.ANSI_PADDING">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetOptionsType.ANSI_PADDINGSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetOptionsType.ANSI_WARNINGS">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetOptionsType.ANSI_WARNINGSSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetOptionsType.ARITHABORT">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetOptionsType.ARITHABORTSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetOptionsType.CONCAT_NULL_YIELDS_NULL">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetOptionsType.CONCAT_NULL_YIELDS_NULLSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetOptionsType.NUMERIC_ROUNDABORT">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetOptionsType.NUMERIC_ROUNDABORTSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetOptionsType.QUOTED_IDENTIFIER">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.SetOptionsType.QUOTED_IDENTIFIERSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.StatementSetOptions">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.StatementCompId">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.StatementCompIdSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.StatementEstRows">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.StatementEstRowsSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.StatementId">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.StatementIdSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.StatementOptmLevel">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.StatementOptmEarlyAbortReason">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.StatementOptmEarlyAbortReasonSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.CardinalityEstimationModelVersion">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.StatementSubTreeCost">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.StatementSubTreeCostSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.StatementText">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.StatementType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.TemplatePlanGuideDB">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.TemplatePlanGuideName">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.PlanGuideDB">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.PlanGuideName">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.ParameterizedText">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.ParameterizedPlanHandle">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.QueryHash">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.QueryPlanHash">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.RetrievedFromCache">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.StatementSqlHandle">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.DatabaseContextSettingsId">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.DatabaseContextSettingsIdSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.ParentObjectId">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.ParentObjectIdSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.BatchSqlHandle">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.StatementParameterizationType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.StatementParameterizationTypeSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.SecurityPolicyApplied">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.SecurityPolicyAppliedSpecified">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.BatchModeOnRowStoreUsed">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType.BatchModeOnRowStoreUsedSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoTypeStatementOptmEarlyAbortReason">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoTypeStatementOptmEarlyAbortReason.TimeOut">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoTypeStatementOptmEarlyAbortReason.MemoryLimitExceeded">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoTypeStatementOptmEarlyAbortReason.GoodEnoughPlanFound">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtReceiveType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtReceiveType.ReceivePlan">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ReceivePlanTypeOperation">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ReceivePlanTypeOperation.QueryPlan">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ReceivePlanTypeOperation.OperationType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ReceivePlanTypeOperation.OperationTypeSpecified">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ReceivePlanTypeOperationOperationType">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ReceivePlanTypeOperationOperationType.ReceivePlanSelect">
            <remarks/>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ReceivePlanTypeOperationOperationType.ReceivePlanUpdate">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtCursorType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtCursorType.CursorPlan">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtCondType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtCondType.Condition">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtCondType.Then">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtCondType.Else">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtCondTypeCondition">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtCondTypeCondition.QueryPlan">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtCondTypeCondition.UDF">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtCondTypeThen">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtCondTypeThen.Statements">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtCondTypeElse">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtCondTypeElse.Statements">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtUseDbType">
            <remarks/>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtUseDbType.Database">
            <remarks/>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StatementParser">
            <summary>
            Parses stytement type ShowPlan XML nodes
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StatementParser.GetCurrentNode(System.Object,System.Object,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext)">
            <summary>
            Creates new node and adds it to the graph.
            </summary>
            <param name="item">Item being parsed.</param>
            <param name="parentItem">Parent item.</param>
            <param name="parentNode">Parent node.</param>
            <param name="context">Node builder context.</param>
            <returns>The node that corresponds to the item being parsed.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StatementParser.GetNodeOperation(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node)">
            <summary>
            Determines Operation that corresponds to the object being parsed.
            </summary>
            <param name="node">Node being parsed.</param>
            <returns>Operation that corresponds to the node.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StatementParser.GetNodeSubtreeCost(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node)">
            <summary>
            Determines node subtree cost from existing node properties.
            </summary>
            <param name="node">Node being parsed.</param>
            <returns>Node subtree cost.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StatementParser.ExtractFunctions(System.Object)">
            <summary>
            Enumerates FunctionType blocks and removes all items from UDF and StoredProc properties.
            </summary>
            <param name="parsedItem">The item being parsed.</param>
            <returns>Enumeration.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StatementParser.#ctor">
            <summary>
            protected constructor prevents this object from being externally instantiated
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StatementParser.statementParser">
            <summary>
            Singelton instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanHierarchyParser.GetCurrentNode(System.Object,System.Object,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext)">
            <summary>
            This function doesn't do anything. It simply returns the parent node
            passed it.
            </summary>
            <param name="item">Item being parsed.</param>
            <param name="parentItem">Parent item.</param>
            <param name="parentNode">Parent node.</param>
            <param name="context">Node builder context.</param>
            <returns>The node that corresponds to the item being parsed.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanHierarchyParser.ExtractFunctions(System.Object)">
            <summary>
            Extracts FunctionType blocks.
            </summary>
            <param name="parsedItem">The item being parsed.</param>
            <returns>Enumeration.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanHierarchyParser.#ctor">
            <summary>
            Private constructor prevents this object from being externally instantiated
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanHierarchyParser.xmlPlanHierarchyParser">
            <summary>
            Singelton instance
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanNodeBuilder">
            <summary>
            Builds hierarchy of Graph objects from ShowPlan XML
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanNodeBuilder.Execute(System.Object)">
            <summary>
            Builds one or more Graphs that
            represnet data from the data source.
            </summary>
            <param name="dataSource">Data Source.</param>
            <returns>An array of AnalysisServices Graph objects.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanNodeBuilder.GetSingleStatementXml(System.Object,System.Int32)">
            <summary>
            Returns an XML string for a specific ShowPlan statement.
            This is used to save a plan corresponding to a particular graph control.
            </summary>
            <param name="dataSource">Data source that contains the full plan.</param>
            <param name="statementIndex">Statement index.</param>
            <returns>XML string that contains execution plan for the specified statement index.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanNodeBuilder.GetSingleStatementObject(System.Object,System.Int32)">
            <summary>
            Returns single statement block type object
            </summary>
            <param name="dataSource">Data source</param>
            <param name="statementIndex">Statement index in the data source</param>
            <returns>Single statement block type object</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanNodeBuilder.GetCurrentNodeId">
            <summary>
            Gets current node Id and internally increments the Id.
            </summary>
            <returns>ID.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanNodeBuilder.ReadXmlShowPlan(System.Object)">
            <summary>
            Deserializes XML ShowPlan from the data source
            </summary>
            <param name="dataSource">Data Source</param>
            <returns>ShowPlanXML object which is the root of deserialized plan.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanNodeBuilder.EnumStatements(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.ShowPlanXML)">
            <summary>
            Enumerates statements in XML ShowPlan. This also looks inside each statement and
            enumerates sub-statements found in FunctionType blocks.
            </summary>
            <param name="plan">XML ShowPlan.</param>
            <returns>Statements enumerator.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanNodeBuilder.FlattenConditionClauses(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtBlockType)">
            <summary>
            We do some special handling of the showplan graphs to flatten out control nodes.  See VSTS 3657984.
            Essentially the problem is that the Actual showplan and the predicted show plan are treated differently.
            The predicted show plan shows the control node (while, if-then-else) when the actual show plans only contain a single
            plan per statement.  This difference makes it difficult to match up the running query against the predicted showplan.  Further
            complicating the situation is that each statement may re-use nodeIDs which violates a fundamental assumption
            of the LQS tool and the progress estimators.  We can work-around this by flattening out the predicted show plan graph
            to look as a series of statements without the control structures or nesting
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanNodeBuilder.ExtractFunctions(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtBlockType)">
            <summary>
            Extracts UDF and StoredProc items and places each of them at the top level
            wrapping each of them with an empty statement.
            </summary>
            <param name="statementBlock">Statement block</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanNodeBuilder.ExtractFunctions(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.BaseStmtInfoType,System.Collections.ArrayList)">
            <summary>
            Extracts UDF and StoredProc items from a statement and adds them to a target list.
            </summary>
            <param name="statement">Statement.</param>
            <param name="targetStatementList">Target list to add a newly generated statement to.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanNodeBuilder.EnumStatements(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.StmtBlockType)">
            <summary>
            Recursively enumerates statements in StmtBlockType.
            </summary>
            <param name="statementBlock">Statement block (may contain multiple statements).</param>
            <returns>Statement enumerator.</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.FunctionTypeItem">
            <summary>
            Class for enumerating FunctionType objects
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanParser">
            <summary>
            Base class for all Xml Execution plan node parsers.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanParser.Parse(System.Object,System.Object,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext)">
            <summary>
            Parses a ShowPlan item and either creates a new Node or adds properties to
            the provided Node.
            </summary>
            <param name="item">Item being parsed.</param>
            <param name="parentNode">Existing node which is used as a property host or a parent for the new node.</param>
            <param name="context">Node builder context.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanParser.GetCurrentNode(System.Object,System.Object,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node,Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="parentItem"></param>
            <param name="parentNode"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanParser.GetChildren(System.Object)">
            <summary>
            Enumerates children items of the item being parsed.
            </summary>
            <param name="parsedItem">The item being parsed.</param>
            <returns>Enumeration.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanParser.ExtractFunctions(System.Object)">
            <summary>
            Extracts FunctionType blocks.
            </summary>
            <param name="parsedItem">The item being parsed.</param>
            <returns>Enumeration.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanParser.ShouldParseItem(System.Object)">
            <summary>
            Determines whether this node should be parsed
            </summary>
            <param name="parsedItem">ShowPlan item</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanParser.SetNodeSpecialProperties(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node)">
            <summary>
            Updates node special properties such as Operator, Cost, SubtreeCost.
            </summary>
            <param name="node">Node being parsed.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanParser.ShouldSkipProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Determines if the current property is used to reference a child item.
            Hierarchy properties are skipped when property wrappers are being created.
            </summary>
            <param name="property">Property subject to test.</param>
            <returns>True if the property is a hierarchy property;
            false if this is a regular property that should appear in the property grid.
            </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanParser.GetNodeOperation(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node)">
            <summary>
            Determines Operation that corresponds to the object being parsed.
            </summary>
            <param name="node">Node being parsed.</param>
            <returns>Operation that corresponds to the node.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanParser.GetNodeSubtreeCost(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.Node)">
            <summary>
            Determines node subtree cost from existing node properties.
            </summary>
            <param name="node">Node being parsed.</param>
            <returns>Node subtree cost.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanParser.EnumerateChildren(System.Object)">
            <summary>
            This method gets children in a generic way.
            It should be avoided in the cases where performance matters.
            </summary>
            <param name="parsedItem">Item to enumerate children for</param>
            <returns>Enumeration of children</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.XmlPlanParser.NewNode(Microsoft.SqlTools.ServiceLayer.ExecutionPlan.ShowPlan.NodeBuilderContext)">
            <summary>
            Creates a new Node.
            </summary>
            <param name="context">NodeBuilderContext.</param>
            <returns>New node instance.</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserCloseParams">
            <summary>
            Parameters to pass to close file browser
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserCloseParams.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserCloseResponse">
            <summary>
            Response for closing the browser
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserCloseResponse.Succeeded">
            <summary>
            Result of the operation
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserCloseResponse.Message">
            <summary>
            Error message if any
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserCloseRequest">
            <summary>
            Requst to close the file browser
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserClosedNotification">
            <summary>
            Notification for close completion
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserExpandedParams">
            <summary>
            Event params for expanding a node
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserExpandedParams.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserExpandedParams.ExpandPath">
            <summary>
            Expand path
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserExpandedParams.Children">
            <summary>
            Children nodes
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserExpandedParams.Succeeded">
            <summary>
            Result of the operation
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserExpandedParams.Message">
            <summary>
            Error message if any
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserExpandedNotification">
            <summary>
            Notification for expand completion
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserExpandParams">
            <summary>
            Parameters for expanding a folder node
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserExpandParams.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserExpandParams.ExpandPath">
            <summary>
            The path to expand the nodes for
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserExpandRequest">
            <summary>
            Request to expand a node in the file browser
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserOpenedParams">
            <summary>
            Event params for opening a file browser
            Returns full directory structure on the server side
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserOpenedParams.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserOpenedParams.FileTree">
            <summary>
            Entire file/folder tree 
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserOpenedParams.Succeeded">
            <summary>
            Result of the operation
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserOpenedParams.Message">
            <summary>
            Error message
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserOpenedNotification">
            <summary>
            Notification for completing file browser opening
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserOpenParams">
            <summary>
            Parameters for opening file browser
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserOpenParams.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserOpenParams.ExpandPath">
            <summary>
            The initial path to expand the nodes for (e.g. Backup will set this path to default backup folder)
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserOpenParams.FileFilters">
            <summary>
            File extension filter (e.g. *.bak)
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserOpenParams.ChangeFilter">
            <summary>
            True if this is a request to change file filter
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserOpenRequest">
            <summary>
            Request to open a file browser
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserValidatedParams">
            <summary>
            Event params for validation completion
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserValidatedParams.Succeeded">
            <summary>
            Result of the operation
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserValidatedParams.Message">
            <summary>
            Error message if any
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserValidatedNotification">
            <summary>
            Notification for validation completion
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserValidateParams">
            <summary>
            Parameters for validating selected file paths
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserValidateParams.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserValidateParams.ServiceType">
            <summary>
            Type of service that uses the file browser
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserValidateParams.SelectedFiles">
            <summary>
            Selected files
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileBrowserValidateRequest">
            <summary>
            Requst to validate the selected file paths
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileTree">
            <summary>
            Tree to represent file/folder structure
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileTree.RootNode">
            <summary>
            Root node of the tree
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileTree.SelectedNode">
            <summary>
            Selected node of the tree
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileTree.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileTreeNode">
            <summary>
            Tree node to represent file or folder
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileTreeNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileTreeNode.Children">
            <summary>
            List of children nodes
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileTreeNode.Name">
            <summary>
            File or folder name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.FileBrowser.Contracts.FileTreeNode.FullPath">
            <summary>
            Full path
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserBase">
            <summary>
            Base class for file browser
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserBase.PathSeparator">
            <summary>
            Separator string for components of the file path. Defaults to \ for Windows and / for Linux
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserBase.GetPathSeparator(Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator,Microsoft.SqlServer.Management.Common.ServerConnection)">
            <summary>
            Returns the PathSeparator values of the Server.
            </summary>
            <returns>PathSeparator</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserBase.EnumerateDrives(Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator,Microsoft.SqlServer.Management.Common.ServerConnection)">
            <summary>
            Enumerates the FileInfo objects associated with drives 
            </summary>
            <param name="enumerator"></param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserBase.EnumerateFilesInFolder(Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator,Microsoft.SqlServer.Management.Common.ServerConnection,System.String)">
            <summary>
            Enumerates files and folders that are immediate children of the given path on the server
            </summary>
            <param name="enumerator"></param>
            <param name="connection"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserException">
            <summary>
            Exception raised from file browser operation
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserOperation">
            <summary>
            Implementation for file browser operation
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserOperation.#ctor(Microsoft.SqlServer.Management.Common.ServerConnection,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="N:Microsoft.SqlTools.ServiceLayer.FileBrowser"/> class.
            </summary>
            <param name="connection">The connection object</param>
            <param name="fileFilters">The file extension filters</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserOperation.ExpandSelectedNode(System.String)">
            <summary>
            Expand nodes for the selected path.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserOperation.FilterFile(System.String,System.String[])">
            <summary>
            Filter a filename based on the full mask provide.  The full mask may be a collection a masks seperated by semi-colons.
            For example: *; *.txt
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserOperation.ScopeFileTreeToPath(System.String)">
            <summary>
            Creates file tree for a scoped path
            Removes the top level file tree so only use this if you intend to do that
            </summary>
            <param name="expandPath">path to consider at top level node for tree</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserOperation.MatchFileToSubMask(System.String,System.String)">
            <summary>
            Compares a file name to the user specified mask using a regular expression
            </summary>
            <param name="fileName"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserService">
            <summary>
            Main class for file browser service
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserService.ValidatePathsCallback">
            <summary>
            Signature for callback method that validates the selected file paths
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserService.RegisterValidatePathsCallback(System.String,Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserService.ValidatePathsCallback)">
            <summary>
            Register validate path callback
            </summary>
            <param name="service"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the service instance
            </summary>
            <param name="serviceHost">Service host to register handlers with</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserValidateEventArgs">
            <summary>
            Event arguments for validating selected files in file browser
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserValidateEventArgs.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserValidateEventArgs.ServiceType">
            <summary>
            Service which provide validation callback
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileBrowserValidateEventArgs.FilePaths">
            <summary>
            Selected files
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileValidationServiceConstants">
            <summary>
            List of services that provide file validation callback to file browser service
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileValidationServiceConstants.Backup">
            <summary>
            Backup
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.FileBrowser.FileValidationServiceConstants.Restore">
            <summary>
            Restore
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Formatter.Contracts.DocumentFormattingRequest">
            <summary>
            A formatting request to process an entire document
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Formatter.Contracts.DocumentRangeFormattingRequest">
            <summary>
            A formatting request to process a specific range inside a document
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Formatter.Contracts.DocumentOnTypeFormattingRequest">
            <summary>
            A formatting request to handle a user typing, giving a chance to update the text based on this
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Formatter.Contracts.DocumentFormattingParams">
            <summary>
            Params for the <see cref="T:Microsoft.SqlTools.ServiceLayer.Formatter.Contracts.DocumentFormattingRequest"/>
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Formatter.Contracts.DocumentFormattingParams.TextDocument">
            <summary>
            The document to format.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Formatter.Contracts.DocumentFormattingParams.Options">
            <summary>
            The formatting options
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Formatter.Contracts.DocumentRangeFormattingParams">
            <summary>
            Params for the <see cref="T:Microsoft.SqlTools.ServiceLayer.Formatter.Contracts.DocumentRangeFormattingRequest"/>
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Formatter.Contracts.DocumentRangeFormattingParams.Range">
            <summary>
            The range to format
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Formatter.Contracts.DocumentOnTypeFormattingParams">
            <summary>
            Params for the <see cref="T:Microsoft.SqlTools.ServiceLayer.Formatter.Contracts.DocumentOnTypeFormattingRequest"/>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.SqlTools.ServiceLayer.Formatter.Contracts.DocumentOnTypeFormattingParams.Position" -->
        <!-- Badly formed XML comment ignored for member "P:Microsoft.SqlTools.ServiceLayer.Formatter.Contracts.DocumentOnTypeFormattingParams.Ch" -->
        <member name="T:Microsoft.SqlTools.ServiceLayer.Formatter.Contracts.FormattingOptions">
            <summary>
            Value-object describing what options formatting should use.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Formatter.Contracts.FormattingOptions.TabSize">
            <summary>
            Size of a tab in spaces
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Formatter.Contracts.FormattingOptions.InsertSpaces">
            <summary>
            Prefer spaces over tabs.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Formatter.ASTNodeFormatter.Format">
            <summary>
            Formats the text for a specific node.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Formatter.ASTNodeFormatterT`1.ProcessPrefixRegion(System.Int32,System.Int32)">
            <summary>
            Logical aliases for ProcessTokenRange that indicates the starting region is to be analyzed
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Formatter.ASTNodeFormatterT`1.ProcessSuffixRegion(System.Int32,System.Int32)">
            <summary>
            Logical aliases for ProcessTokenRange that indicates the end region is to be analyzed
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Formatter.ASTNodeFormatterT`1.FindTokenWithId(System.Int32,System.Int32)">
            <summary>
            Finds an expected token 
            </summary>
            <param name="currentIndex">Current index to start the search at</param>
            <param name="id">ID defining the type of token being looked for - e.g. parenthesis, INSERT</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Formatter.FormatContext.ProcessTokenRange(System.Int32,System.Int32)">
            <summary>
            Will apply any token-level formatting (e.g., uppercase/lowercase of keywords).
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Formatter.FormatOptions">
            <summary>
            The supported options to use when formatting text
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Formatter.FormatterTokens">
            <summary>
            Dynamically resolves the token IDs to match the values in the enum Microsoft.SqlServer.Management.SqlParser.Parser.Tokens.
            This way, if the values in the enum change but their names remain the same
            (when the Microsoft.SqlServer.Management.SqlParser.Parser.dll adds new tokens to the enum and is rebuilt),
            the new values are retreived at runtime without having to rebuild Microsoft.SqlTools.ServiceLayer.Formatter.dll
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Formatter.FormatterVisitor">
            <summary>
            The main entry point for our formatter implementation, via the <see cref="!:Format(string, FormatOptions, bool, Replacement.OnReplace)"/> method. 
            This converts a text string into a parsed AST using the Intellisense parser.
            It then uses the Visitor pattern to find each element in the tree and determine if any edits are needed based on 
            All edits are applied after the entire AST has been visited using an algorithm that keeps track of index changes caused by previous updates. This allows
            us to apply multiple edits to a text string in one sweep.
            
            A note on the <see cref="T:Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCodeObjectVisitor"/> implementation: All of the override nodes in the Intellisense AST are defined here, and routed to the Format method which looks up a matching
            formatter to handle them. Any entry not explicitly formatted will use the no-op formatter which passes through the text unchanged.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Formatter.FormatterVisitor.VerifyTokenStreamsOnlyDifferByWhitespace(Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScript,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlScript)">
            <summary>
            Checks that the token streams of two SqlScript objects differ only by whitespace tokens or
            by the relative positioning of commas and comments. The important rule enforced is that there are
            no changes in relative positioning which involve tokens other than commas, comments or whitespaces.
            </summary>
            <param name="script1">SQL script containing the first token stream.</param>
            <param name="script2">SQL script containing the second token stream.</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Formatter.Replacement">
            <summary>
            Describes a string editing action which requests that a particular
            substring found at a given location be replaced by another string
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Formatter.Replacement.IsIdentity">
            <summary>
            Checks whether the replacement will have any effect.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Formatter.Replacement.InducedOffset">
            <summary>
            Reports the relative change in text length (number of characters)
            between the initial and the formatted code introduced by this
            particular replacement.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Formatter.Replacement.CumulativeOffset">
            <summary>
            Replacements will often change the length of the code, making
            indexing relative to the original text ambiguous. The CumulatedOffset
            can be used to adjust the relative indexing between the original and the
            edited text as perceived at the start of this replacement and help
            compensate for the difference.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Formatter.Replacement.OnReplace">
            <summary>
            A delegate responsible for applying the replacement. Each application assumes
            nothing about other replacements which might have taken place before or which
            might take place after the current one.
            </summary>
            <param name="pos">Position of the begining of the replacement relative to the beginig of the character stream.</param>
            <param name="len">The number of consecutive characters which are to be replaced.</param>
            <param name="with">The characters which are to replace the old ones. Note that the length of this string might be greater or smaller than the number of replaced characters.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Formatter.Replacement.Apply(Microsoft.SqlTools.ServiceLayer.Formatter.Replacement.OnReplace)">
            <summary>
            Applies a replacement action according to a given strategy defined by the delegate procedure.
            </summary>
            <param name="replace">This delegate function implements the strategy for applying the replacement.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Formatter.ReplacementQueue.Add(Microsoft.SqlTools.ServiceLayer.Formatter.Replacement)">
            <summary>
             Adds a replace action to the queue and adjusts its absolute
             offset to reflect the global indexing after applying the replacements
             in the queue.
            
                NOTE: The method assumes the replacements occur in front-to-back order
                and that they never overlap.
                
            </summary>
            <param name="r">The latest replacement to be added to the queue.</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Formatter.SysCommentsFormatterBase`1">
            <summary>
            Common base class for objects dealing with sys comments. These follow
            similar patterns so identical methods are held here
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Formatter.SysCommentsFormatterBase`1.ProcessQuerySection(System.Int32,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCodeObject)">
            <summary>
            processes any section in a query, since the basic behavior is constant
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Formatter.SysCommentsFormatterBase`1.ProcessOpenParenthesis(System.Int32,System.Int32,System.Boolean)">
            <summary>
            if there was no whitespace before the parenthesis to be converted into a newline, 
            and the references need to be on a newline, then append a newline
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Formatter.WhiteSpaceSeparatedListFormatter">
            <summary>
            Base class for a set of utility formatters that are used by Node-specific formatters when dealing with whitespace
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Formatter.WhiteSpaceSeparatedListFormatter.#ctor(Microsoft.SqlTools.ServiceLayer.Formatter.FormatterVisitor,Microsoft.SqlServer.Management.SqlParser.SqlCodeDom.SqlCodeObject,System.Boolean)">
            <summary>
            This constructor initalizes the <see cref="!:Visitor"/> and <see cref="!:CodeObject"/> properties since the formatter's entry point
            is not the Format method
            </summary>
            <param name="visitor"></param>
            <param name="codeObject"></param>
            <param name="incrementIndentLevelOnPrefixRegion"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Formatter.TSqlFormatterService.#ctor">
            <summary>
            The default constructor is required for MEF-based composable services
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Formatter.TSqlFormatterService.WorkspaceService">
            <summary>
            Gets the workspace service. Note: should handle case where this is null in cases where unit tests do not set this up
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Formatter.TSqlFormatterService.LanguageService">
            <summary>
            Gets the language service. Note: should handle case where this is null in cases where unit tests do not set this up
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Formatter.TSqlFormatterService.HandleDidChangeConfigurationNotification(Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings,Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings,Microsoft.SqlTools.Hosting.Protocol.EventContext)">
            <summary>
            Ensure formatter settings are always up to date
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.HostLoader">
            <summary>
            Provides support for starting up a service host. This is a common responsibility
            for both the main service program and test driver that interacts with it
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.HostLoader.InitializeHostedServices(Microsoft.SqlTools.Extensibility.RegisteredServiceProvider,Microsoft.SqlTools.Hosting.Protocol.IProtocolEndpoint)">
            <summary>
            Internal to support testing. Initializes <see cref="T:Microsoft.SqlTools.Hosting.IHostedService"/> instances in the service,
            and registers them for their preferred service type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.InsightsGenerator.Contracts.QueryInsightsGeneratorParams">
            <summary>
            Query insights generator parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.InsightsGenerator.Contracts.InsightsGeneratorResult">
            <summary>
            Query insights generator result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.InsightsGenerator.Contracts.QueryInsightsGeneratorRequest">
            <summary>
            Query insights generato request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.InsightsGenerator.Contracts.QueryInsightsGeneratorRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.InsightsGenerator.InsightsGeneratorService">
            <summary>
            Service responsible for securing credentials in a platform-neutral manner. This provides
            a generic API for read, save and delete credentials
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.InsightsGenerator.InsightsGeneratorService.instance">
            <summary>
            Singleton service instance
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.InsightsGenerator.InsightsGeneratorService.Instance">
            <summary>
            Gets the singleton service instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.InsightsGenerator.InsightsGeneratorService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the service instance
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageDeleteRequestParams.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageDeleteRequestParams.LanguageName">
            <summary>
            Language name
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageDeleteResponseParams">
            <summary>
            Response class for external language status
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageDeleteRequest">
            <summary>
            Request class for external language status
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageListRequestParams.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageListResponseParams">
            <summary>
            Response class for external language list
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageListResponseParams.Languages">
            <summary>
            Language status
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageListRequest">
            <summary>
            Request class for external language list
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguage">
            <summary>
            Language metadata
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguage.Name">
            <summary>
            Language Name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguage.Owner">
            <summary>
            Language Owner
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguage.CreatedDate">
            <summary>
            Created Date
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageContent.PathToExtension">
            <summary>
            Path to extension file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageContent.ExtensionFileName">
            <summary>
            Extension file name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageContent.PlatformId">
            <summary>
            Platform name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageContent.Parameters">
            <summary>
            Extension parameters
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageContent.EnvironmentVariables">
            <summary>
            Environment variables
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageStatusRequestParams.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageStatusRequestParams.LanguageName">
            <summary>
            Language name
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageStatusResponseParams">
            <summary>
            Response class for external language status
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageStatusResponseParams.Status">
            <summary>
            Language status
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageStatusRequest">
            <summary>
            Request class for external language status
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageUpdateRequestParams.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageUpdateRequestParams.Language">
            <summary>
            Language name
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageUpdateResponseParams">
            <summary>
            Response class for external language update
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageUpdateRequest">
            <summary>
            Request class for external language status
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.ExternalLanguageOperations.GetLanguageStatus(System.Data.IDbConnection,System.String)">
            <summary>
            Returns the status of external languages in a connection
            </summary>
            <param name="connection"></param>
            <param name="languageName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.ExternalLanguageOperations.GetLanguages(System.Data.IDbConnection)">
            <summary>
            Returns the list of languages
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.ExternalLanguageOperations.GetLanguage(System.Data.IDbConnection,System.String)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="languageName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.ExternalLanguageOperations.UpdateLanguage(System.Data.IDbConnection,Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguage)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="language"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.ExternalLanguageOperations.GetLanguages(System.Data.IDbConnection,System.String)">
            <summary>
            Returns the status of external languages in a connection
            </summary>
            <param name="connection"></param>
            <param name="languageName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.ExternalLanguageService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.ExternalLanguageService.ConnectionServiceInstance">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.ExternalLanguageService.HandleExternalLanguageDeleteRequest(Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageDeleteRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageDeleteResponseParams})">
            <summary>
            Handles external language delete request
            </summary>
            <param name="parameters">Request parameters</param>
            <param name="requestContext">Request Context</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.ExternalLanguageService.HandleExternalLanguageUpdateRequest(Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageUpdateRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageUpdateResponseParams})">
            <summary>
            Handles external language delete request
            </summary>
            <param name="parameters">Request parameters</param>
            <param name="requestContext">Request Context</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.ExternalLanguageService.HandleExternalLanguageStatusRequest(Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageStatusRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageStatusResponseParams})">
            <summary>
            Handles external language status request
            </summary>
            <param name="parameters">Request parameters</param>
            <param name="requestContext">Request Context</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.ExternalLanguageService.HandleExternalLanguageListRequest(Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageListRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.Contracts.ExternalLanguageListResponseParams})">
            <summary>
            Handles external language status request
            </summary>
            <param name="parameters">Request parameters</param>
            <param name="requestContext">Request Context</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageExtensibility.LanguageExtensibilityException">
            <summary>
            Exception raised from machine learning services operations
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.AutoCompleteHelper">
            <summary>
            Main class for Language Service functionality including anything that reqires knowledge of
            the language to perfom, such as definitions, intellisense, etc.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.AutoCompleteHelper.EmptyCompletionList">
            <summary>
            Gets a static instance of an empty completion list to avoid
            unneeded memory allocations
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.AutoCompleteHelper.IsReservedWord(System.String)">
            <summary>
            Checks whether a given word is in the reserved
            word list or not
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.AutoCompleteHelper.GetDefaultCompletionItems(Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo,System.Boolean)">
            <summary>
            Get the default completion list from hard-coded list
            </summary>
            <param name="row"></param>
            <param name="startColumn"></param>
            <param name="endColumn"></param>
            <param name="useLowerCase"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.AutoCompleteHelper.CreateDefaultCompletionItem(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a completion item from the default item text
            </summary>
            <param name="label"></param>
            <param name="row"></param>
            <param name="startColumn"></param>
            <param name="endColumn"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.AutoCompleteHelper.ConvertDeclarationsToCompletionItems(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.SqlParser.Intellisense.Declaration},System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Converts a list of Declaration objects to CompletionItem objects
            since VS Code expects CompletionItems but SQL Parser works with Declarations
            </summary>
            <param name="suggestions"></param>
            <param name="cursorRow"></param>
            <param name="cursorColumn"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.AutoCompleteHelper.ConvertQuickInfoToHover(Babel.CodeObjectQuickInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a SQL Parser QuickInfo object into a VS Code Hover object
            </summary>
            <param name="quickInfo"></param>
            <param name="row"></param>
            <param name="startColumn"></param>
            <param name="endColumn"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.AutoCompleteHelper.ConvertMethodHelpTextListToSignatureHelp(System.Collections.Generic.List{Babel.MethodHelpText},Babel.MethodNameAndParamLocations,System.Int32,System.Int32)">
            <summary>
            Converts a SQL Parser List of MethodHelpText objects into a VS Code SignatureHelp object
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.AutoCompleteHelper.ExpandSqlStarExpression(Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo)">
            <summary>
            Give suggestions for sql star expansion. 
            </summary>
            <param name="scriptDocumentInfo">Document info containing the current cursor position</param>
            <returns>Completion item array containing the expanded star suggestion</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.BindingQueue`1">
            <summary>
            Main class for the Binding Queue
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.BindingQueue`1.BindingContextMap">
            <summary>
            Map from context keys to binding context instances
            Internal for testing purposes only
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.BindingQueue`1.#ctor">
            <summary>
            Constructor for a binding queue instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.BindingQueue`1.StopQueueProcessor(System.Int32)">
            <summary>
            Stops the binding queue by sending cancellation request
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.BindingQueue`1.IsCancelRequested">
            <summary>
            Returns true if cancellation is requested
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.BindingQueue`1.QueueBindingOperation(System.String,System.Func{Microsoft.SqlTools.ServiceLayer.LanguageServices.IBindingContext,System.Threading.CancellationToken,System.Object},System.Func{Microsoft.SqlTools.ServiceLayer.LanguageServices.IBindingContext,System.Object},System.Func{System.Exception,System.Object},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Queue a binding request item
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.BindingQueue`1.IsBindingContextConnected(System.String)">
            <summary>
            Checks if a particular binding context is connected or not
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.BindingQueue`1.GetOrCreateBindingContext(System.String)">
            <summary>
            Gets or creates a binding context for the provided context key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.BindingQueue`1.BindingContextExists(System.String)">
            <summary>
            Checks if a binding context already exists for the provided context key
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.BindingQueue`1.RemoveBindingContext(System.String)">
            <summary>
            Remove the binding queue entry
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.BindingQueue`1.GetNextQueueItem">
            <summary>
            Gets the next pending queue item
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.BindingQueue`1.StartQueueProcessorAsync">
            <summary>
            Starts the queue processing thread
            </summary>        
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.BindingQueue`1.ProcessQueue">
            <summary>
            The core queue processing method
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.BindingQueue`1.ClearQueuedItems">
            <summary>
            Clear queued items
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.AutoCompletionResult">
            <summary>
            Includes the objects created by auto completion service
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.AutoCompletionResult.#ctor">
            <summary>
            Creates new instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.AutoCompletionResult.CompleteResult(Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.CompletionItem[])">
            <summary>
            Completes the results to calculate the duration
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.AutoCompletionResult.Duration">
            <summary>
            The number of milliseconds to process the result
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.AutoCompletionResult.CompletionItems">
            <summary>
            Completion list
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.CompletionService">
            <summary>
            A service to create auto complete list for given script document 
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.CompletionService.#ctor(Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingQueue)">
            <summary>
            Created new instance given binding queue
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.CompletionService.SqlParserWrapper">
            <summary>
            SQL parser wrapper to create the completion list
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.CompletionService.CreateCompletions(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo,System.Boolean)">
            <summary>
            Creates a completion list given connection and document info
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.Extension.CompletionExtensionParams.AssemblyPath">
            <summary>
            Absolute path for the assembly containing the completion extension
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.Extension.CompletionExtensionParams.TypeName">
            <summary>
            The type name for the completion extension
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.Extension.CompletionExtensionParams.Properties">
            <summary>
            Property bag for initializing the completion extension
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.Extension.ICompletionExtension.Name">
            <summary>
            Unique name for the extension
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.Extension.ICompletionExtension.Initialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Method for initializing the extension, this is called once when the extension is loaded
            </summary>
            <param name="properties">Parameters needed by the extension</param>
            <param name="cancelToken">Cancellation token used to indicate that the initialization should be cancelled</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.Extension.ICompletionExtension.HandleCompletionAsync(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo,Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.CompletionItem[],System.Threading.CancellationToken)">
            <summary>
            Handles the completion request, returning the modified CompletionItemList if used
            </summary>
            <param name="connInfo">Connection information for the completion session</param>
            <param name="scriptDocumentInfo">Script parsing information</param>
            <param name="completions">Current completion list</param>
            <param name="cancelToken">Token used to indicate that the completion request should be cancelled</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.SqlCompletionItem">
            <summary>
            Creates a completion item from SQL parser declaration item
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.SqlCompletionItem.#ctor(Microsoft.SqlServer.Management.SqlParser.Intellisense.Declaration,System.String)">
            <summary>
            Create new instance given the SQL parser declaration
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.SqlCompletionItem.#ctor(System.String,Microsoft.SqlServer.Management.SqlParser.Intellisense.DeclarationType,System.String)">
            <summary>
            Creates new instance given declaration title and type
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.SqlCompletionItem.DeclarationTitle">
            <summary>
            Declaration Title
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.SqlCompletionItem.TokenText">
            <summary>
            Token text from the editor
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.SqlCompletionItem.DeclarationType">
            <summary>
            SQL declaration type
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.SqlCompletionItem.Label">
            <summary>
            Completion item label
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.SqlCompletionItem.Kind">
            <summary>
            Completion item kind
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.SqlCompletionItem.InsertText">
            <summary>
            Completion insert text
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.SqlCompletionItem.Detail">
            <summary>
            Completion item detail
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.SqlCompletionItem.CreateCompletionItem(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a completion item given the editor info
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.SqlCompletionItem.CreateCompletionItem(System.String,System.String,System.String,Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.CompletionItemKind,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a completion item
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ISqlParserWrapper">
            <summary>
            SqlParserWrapper interface
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.SqlParserWrapper">
            <summary>
            A wrapper class around SQL parser methods to make the operations testable
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.SqlParserWrapper.FindCompletions(Microsoft.SqlServer.Management.SqlParser.Parser.ParseResult,System.Int32,System.Int32,Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IMetadataDisplayInfoProvider)">
            <summary>
            Creates completion list given SQL script info
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo">
            <summary>
            A class to calculate the numbers used by SQL parser using the text positions and content
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo.#ctor(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentPosition,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile,Microsoft.SqlTools.ServiceLayer.LanguageServices.ScriptParseInfo)">
            <summary>
            Create new instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo.CreateDefaultDocumentInfo(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentPosition,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile)">
            <summary>
            Creates a new <see cref="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo"/> with no backing <see cref="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo.ScriptParseInfo"/> defined
            </summary>
            <param name="textDocumentPosition">A <see cref="T:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentPosition"/></param>
            <param name="scriptFile">A <see cref="T:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile"/> to process</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo.Contents">
            <summary>
            Gets a string containing the full contents of the file.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo.ScriptParseInfo">
            <summary>
            Script Parse Info Instance
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo.StartLine">
            <summary>
            Start Line
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo.ParserLine">
            <summary>
            Parser Line
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo.StartColumn">
            <summary>
            Start Column
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo.EndColumn">
            <summary>
            end Column
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo.ParserColumn">
            <summary>
            Parser Column
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo.TokenText">
            <summary>
            The token text in the file content used for completion list
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo.Token">
            <summary>
            The token in the file content used for completion list
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo.GetToken(Microsoft.SqlTools.ServiceLayer.LanguageServices.ScriptParseInfo,System.Int32,System.Int32)">
            <summary>
            Returns the token that will be used by SQL parser for creating the completion list
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo.GetPeekDefinitionTokens(Microsoft.SqlTools.ServiceLayer.LanguageServices.ScriptParseInfo,System.Int32,System.Int32)">
            <summary>
            Returns the token that is used for Peek Definition objects
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingContext">
            <summary>
            Class for the binding context for connected sessions
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingContext.#ctor">
            <summary>
            Connected binding context constructor
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingContext.IsConnected">
            <summary>
            Gets or sets a flag indicating if the binder is connected
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingContext.ServerConnection">
            <summary>
            Gets or sets the binding server connection
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingContext.MetadataDisplayInfoProvider">
            <summary>
            Gets or sets the metadata display info provider
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingContext.SmoMetadataProvider">
            <summary>
            Gets or sets the SMO metadata provider
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingContext.Binder">
            <summary>
            Gets or sets the binder
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingContext.BindingLock">
            <summary>
            Gets the binding lock object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingContext.BindingTimeout">
            <summary>
            Gets or sets the binding operation timeout in milliseconds
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingContext.ServerVersion">
            <summary>
            Gets the Language Service ServerVersion
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingContext.DatabaseEngineType">
            <summary>
            Gets the current DataEngineType
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingContext.TransactSqlVersion">
            <summary>
            Gets the current connections TransactSqlVersion
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingContext.DatabaseCompatibilityLevel">
            <summary>
            Gets the current DatabaseCompatibilityLevel
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingContext.ParseOptions">
            <summary>
            Gets the current ParseOptions
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingContext.GetDatabaseCompatibilityLevel(Microsoft.SqlServer.Management.Smo.Server)">
            <summary>
            Gets the database compatibility level for a given server connection
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingContext.GetTransactSqlVersion(Microsoft.SqlServer.Management.Smo.Server)">
            <summary>
            Gets the transaction sql version for a given server connection
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingContext.GetServerCompatibilityLevel(Microsoft.SqlServer.Management.Smo.Server)">
            <summary>
            Gets the SMO compatibility level for the given server, defaulting to the highest available level if an
            error occurs while querying. 
            </summary>
            <param name="server">The server object to get the compat level of</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.SqlConnectionOpener.OpenServerConnection(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,System.String)">
            <summary>
            Virtual method used to support mocking and testing
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingQueue">
            <summary>
            ConnectedBindingQueue class for processing online binding requests
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingQueue.needsMetadata">
            <summary>
            flag determing if the connection queue requires online metadata objects
            it's much cheaper to not construct these objects if not needed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingQueue.CurrentSettings">
            <summary>
            Gets the current settings
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingQueue.GetConnectionContextKey(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails)">
            <summary>
            Generate a unique key based on the ConnectionInfo object
            </summary>
            <param name="connInfo"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingQueue.GetConnectionContextKey(System.String,System.String)">
            <summary>
            Generate a unique key based on the ConnectionInfo object
            </summary>
            <param name="connInfo"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingQueue.AddConnectionContext(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,System.String,System.Boolean)">
            <summary>
            Use a ConnectionInfo item to create a connected binding context
            </summary>
            <param name="connInfo">Connection info used to create binding context</param>   
            <param name="overwrite">Overwrite existing context</param>      
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.Command.Title">
            <summary>
            Title of the command.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.Command.command">
            <summary>
            The identifier of the actual command handler, like `vsintellicode.completionItemSelected`.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.Command.Tooltip">
            <summary>
            A tooltip for the command, when represented in the UI.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.Command.Arguments">
            <summary>
            Arguments that the command handler should be invoked with.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.CompletionItem.Documentation">
            <summary>
            Gets or sets the documentation string for the completion item.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.CompletionItem.Data">
            <summary>
            Gets or sets a custom data field that allows the server to mark
            each completion item with an identifier that will help correlate
            the item to the previous completion request during a completion
            resolve request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.CompletionItem.Command">
            <summary>
            Exposing a command field for a completion item for passing telemetry
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.CompletionItem.Preselect">
            <summary>
            Whether this completion item is preselected or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.PublishDiagnosticsNotification.Uri">
            <summary>
            Gets or sets the URI for which diagnostic information is reported.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.PublishDiagnosticsNotification.Diagnostics">
            <summary>
            Gets or sets the array of diagnostic information items.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.DiagnosticSeverity.Error">
            <summary>
            Indicates that the diagnostic represents an error.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.DiagnosticSeverity.Warning">
            <summary>
            Indicates that the diagnostic represents a warning.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.DiagnosticSeverity.Information">
            <summary>
            Indicates that the diagnostic represents an informational message.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.DiagnosticSeverity.Hint">
            <summary>
            Indicates that the diagnostic represents a hint.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.Diagnostic.Severity">
            <summary>
            Gets or sets the severity of the diagnostic.  If omitted, the
            client should interpret the severity.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.Diagnostic.Code">
            <summary>
            Gets or sets the diagnostic's code (optional).
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.Diagnostic.Message">
            <summary>
            Gets or sets the diagnostic message.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.IntelliSenseReadyParams">
            <summary>
            Parameters sent back with an IntelliSense ready event
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.IntelliSenseReadyParams.OwnerUri">
            <summary>
            URI identifying the text document
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.IntelliSenseReadyNotification">
            <summary>
            Event sent when the language service is finished updating after a connection
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.RebuildIntelliSenseParams">
            <summary>
            Parameters to be sent back with a rebuild IntelliSense event
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.RebuildIntelliSenseParams.OwnerUri">
            <summary>
            URI identifying the file that should have its IntelliSense cache rebuilt    
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.RebuildIntelliSenseNotification">
            <summary>
            RebuildIntelliSenseNotification notification mapping entry 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.StatusChangeParams">
            <summary>
            Parameters sent back with an status change event
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.StatusChangeParams.OwnerUri">
            <summary>
            URI identifying the text document
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.StatusChangeParams.Status">
            <summary>
            The new status for the document
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.StatusChangedNotification">
            <summary>
            Event sent for language service status change notification
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryProperties.Properties">
            <summary>
            Telemetry properties
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryProperties.Measures">
            <summary>
            Telemetry measures
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryParams">
            <summary>
            Parameters sent back with an IntelliSense ready event
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryNotification">
            <summary>
            Event sent when the language service needs to add a telemetry event
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryEventNames">
            <summary>
            List of telemetry events
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryEventNames.IntellisenseQuantile">
            <summary>
            telemetry event name for auto complete response time
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryEventNames.PeekDefinitionRequested">
            <summary>
            telemetry event name for when definition is requested
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryEventNames.FormatCode">
            <summary>
            telemetry event name for when definition is requested
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryPropertyNames">
            <summary>
             List of properties used in telemetry events
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryPropertyNames.IsAzure">
            <summary>
            Is a connection to an Azure database or not
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryPropertyNames.Succeeded">
            <summary>
            Did an event succeed or not
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryPropertyNames.Connected">
            <summary>
            Was the action against a connected file or similar resource, or not
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryPropertyNames.FormatType">
            <summary>
            Format type property - should be one of <see cref="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryPropertyNames.DocumentFormatType"/> or <see cref="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryPropertyNames.RangeFormatType"/>
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryPropertyNames.DocumentFormatType">
            <summary>
            A full document format
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryPropertyNames.RangeFormatType">
            <summary>
            A document range format
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.DiagnosticsHelper">
            <summary>
            Main class for Language Service functionality including anything that reqires knowledge of
            the language to perfom, such as definitions, intellisense, etc.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.DiagnosticsHelper.PublishScriptDiagnostics(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFileMarker[],Microsoft.SqlTools.Hosting.Protocol.EventContext)">
            <summary>
            Send the diagnostic results back to the host application
            </summary>
            <param name="scriptFile"></param>
            <param name="semanticMarkers"></param>
            <param name="eventContext"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.DiagnosticsHelper.ClearScriptDiagnostics(System.String,Microsoft.SqlTools.Hosting.Protocol.EventContext)">
            <summary>
            Send the diagnostic results back to the host application
            </summary>
            <param name="scriptFile"></param>
            <param name="semanticMarkers"></param>
            <param name="eventContext"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.DiagnosticsHelper.GetDiagnosticFromMarker(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFileMarker)">
            <summary>
            Convert a ScriptFileMarker to a Diagnostic that is Language Service compatible
            </summary>
            <param name="scriptFileMarker"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.DiagnosticsHelper.MapDiagnosticSeverity(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFileMarkerLevel)">
            <summary>
            Map ScriptFileMarker severity to Diagnostic severity
            </summary>
            <param name="markerLevel"></param>        
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.DocumentStatusHelper">
            <summary>
            Helper class to send events to the client
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.DocumentStatusHelper.SendStatusChange``1(Microsoft.SqlTools.Hosting.Protocol.RequestContext{``0},Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentPosition,System.String)">
            <summary>
            Sends an event for specific document using the existing request context
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.DocumentStatusHelper.SendTelemetryEvent``1(Microsoft.SqlTools.Hosting.Protocol.RequestContext{``0},System.String)">
            <summary>
            Sends a telemetry event for specific document using the existing request context
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.DocumentStatusHelper.SendTelemetryEvent``1(Microsoft.SqlTools.Hosting.Protocol.RequestContext{``0},Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.TelemetryProperties)">
            <summary>
            Sends a telemetry event for specific document using the existing request context
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.IBindingContext">
            <summary>
            The context used for binding requests
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.IBindingContext.IsConnected">
            <summary>
            Gets or sets a flag indicating if the context is connected
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.IBindingContext.ServerConnection">
            <summary>
            Gets or sets the binding server connection
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.IBindingContext.MetadataDisplayInfoProvider">
            <summary>
            Gets or sets the metadata display info provider
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.IBindingContext.SmoMetadataProvider">
            <summary>
            Gets or sets the SMO metadata provider
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.IBindingContext.Binder">
            <summary>
            Gets or sets the binder
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.IBindingContext.BindingLock">
            <summary>
            Gets the binding lock object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.IBindingContext.BindingTimeout">
            <summary>
            Gets or sets the binding operation timeout in milliseconds
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.IBindingContext.ParseOptions">
            <summary>
            Gets or sets the current connection parse options
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.IBindingContext.ServerVersion">
            <summary>
            Gets or sets the current connection server version
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.IBindingContext.DatabaseEngineType">
            <summary>
            Gets or sets the database engine type
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.IBindingContext.TransactSqlVersion">
            <summary>
            Gets or sets the T-SQL version
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.IBindingContext.DatabaseCompatibilityLevel">
            <summary>
            Gets or sets the database compatibility level
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService">
            <summary>
            Main class for Language Service functionality including anything that requires knowledge of
            the language to perform, such as definitions, intellisense, etc.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.ScriptParseInfoMap">
            <summary>
            Gets a mapping dictionary for SQL file URIs to ScriptParseInfo objects
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.#ctor">
            <summary>
            Default, parameterless constructor.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.BindingQueue">
            <summary>
            Gets or sets the binding queue instance
            Internal for testing purposes only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.ConnectionServiceInstance">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.WorkspaceServiceInstance">
            <summary>
            Gets or sets the current workspace service instance
            Setter for internal testing purposes only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.CurrentWorkspaceSettings">
            <summary>
            Gets the current settings
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.CurrentWorkspace">
            <summary>
            Gets the current workspace instance
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.Context">
            <summary>
            Gets or sets the current SQL Tools context
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost,Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsContext)">
            <summary>
            Initializes the Language Service instance
            </summary>
            <param name="serviceHost"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.HandleCompletionExtLoadRequest(Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.Extension.CompletionExtensionParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{System.Boolean})">
            <summary>
            Completion extension load request callback
            </summary>
            <param name="param"></param>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.CheckIfAssemblyShouldBeLoaded(System.String,System.String)">
            <summary>
            Check whether a particular assembly should be reloaded based on
            whether it's been updated since it was last loaded.
            </summary>
            <param name="assemblyPath">The assembly path</param>
            <param name="extTypeName">The type loading from the assembly</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.HandleSyntaxParseRequest(Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.SyntaxParseParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.SyntaxParseResult})">
            <summary>
            T-SQL syntax parse request callback
            </summary>
            <param name="param"></param>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.HandleCompletionRequest(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentPosition,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.CompletionItem[]})">
            <summary>
            Auto-complete completion provider request callback
            </summary>
            <param name="textDocumentPosition"></param>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.HandleCompletionResolveRequest(Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.CompletionItem,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.CompletionItem})">
            <summary>
            Handle the resolve completion request event to provide additional
            autocomplete metadata to the currently select completion item
            </summary>
            <param name="completionItem"></param>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.HandleDidOpenTextDocumentNotification(System.String,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile,Microsoft.SqlTools.Hosting.Protocol.EventContext)">
            <summary>
            Handle the file open notification
            </summary>
            <param name="uri"></param>
            <param name="scriptFile"></param>
            <param name="eventContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.HandleDidChangeTextDocumentNotification(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile[],Microsoft.SqlTools.Hosting.Protocol.EventContext)">
            <summary>
            Handles text document change events
            </summary>
            <param name="textChangeParams"></param>
            <param name="eventContext"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.HandleDidCloseTextDocumentNotification(System.String,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile,Microsoft.SqlTools.Hosting.Protocol.EventContext)">
            <summary>
            Handle the file close notification
            </summary>
            <param name="uri"></param>
            <param name="scriptFile"></param>
            <param name="eventContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.HandleRebuildIntelliSenseNotification(Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.RebuildIntelliSenseParams,Microsoft.SqlTools.Hosting.Protocol.EventContext)">
            <summary>
            Handle the rebuild IntelliSense cache notification
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.HandleDidChangeConfigurationNotification(Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings,Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings,Microsoft.SqlTools.Hosting.Protocol.EventContext)">
            <summary>
            Handle the file configuration change notification
            </summary>
            <param name="newSettings"></param>
            <param name="oldSettings"></param>
            <param name="eventContext"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.HandleDidChangeLanguageFlavorNotification(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.LanguageFlavorChangeParams,Microsoft.SqlTools.Hosting.Protocol.EventContext)">
            <summary>
            Handles language flavor changes by disabling intellisense on a file if it does not match the specific
            "MSSQL" language flavor returned by our service
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.RemoveAutoCompleteCacheUriReference(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.IConnectionSummary,System.String)">
            <summary>
            Remove a reference to an autocomplete cache from a URI. If
            it is the last URI connected to a particular connection,
            then remove the cache.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.ParseAndBind(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile,Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo)">
            <summary>
            Parses the SQL text and binds it to the SMO metadata provider if connected
            </summary>
            <param name="filePath"></param>
            <param name="sqlText"></param>
            <returns>The ParseResult instance returned from SQL Parser</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.UpdateLanguageServiceOnConnection(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo)">
            <summary>
            Update the autocomplete metadata provider when the user connects to a database
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.PrepopulateCommonMetadata(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,Microsoft.SqlTools.ServiceLayer.LanguageServices.ScriptParseInfo,Microsoft.SqlTools.ServiceLayer.LanguageServices.ConnectedBindingQueue)">
            <summary>
            Preinitialize the parser and binder with common metadata.
            This should front load the long binding wait to the time the
            connection is established.  Once this is completed other binding
            requests should be faster.
            </summary>
            <param name="info"></param>
            <param name="scriptInfo"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.ShouldSkipNonMssqlFile(System.String)">
            <summary>
            Checks if a given URI is not an MSSQL file. Only files explicitly excluded by a language flavor change
            notification will be treated as skippable
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.ShouldSkipIntellisense(System.String)">
            <summary>
            Determines whether intellisense should be skipped for a document.
            If IntelliSense is disabled or it's a non-MSSQL doc this will be skipped
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.RequiresReparse(Microsoft.SqlTools.ServiceLayer.LanguageServices.ScriptParseInfo,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile)">
            <summary>
            Determines whether a reparse and bind is required to provide autocomplete
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.ResolveCompletionItem(Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.CompletionItem)">
            <summary>
            Resolves the details and documentation for a completion item
            </summary>
            <param name="completionItem"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.QueueTask(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentPosition,Microsoft.SqlTools.ServiceLayer.LanguageServices.ScriptParseInfo,Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile,System.String)">
            <summary>
            Queue a task to the binding queue
            </summary>
            <param name="textDocumentPosition"></param>
            <param name="scriptParseInfo"></param>
            <param name="connectionInfo"></param>
            <param name="scriptFile"></param>
            <param name="tokenText"></param>
            <returns> Returns the result of the task as a DefinitionResult </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.GetDefinition(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentPosition,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile,Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo)">
            <summary>
            Get definition for a selected sql object using SMO Scripting
            </summary>
            <param name="textDocumentPosition"></param>
            <param name="scriptFile"></param>
            <param name="connInfo"></param>
            <returns> Location with the URI of the script file</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.FindTokenWithCorrectOffset(Microsoft.SqlTools.ServiceLayer.LanguageServices.ScriptParseInfo,System.Int32,System.Int32)">
            <summary>
            Wrapper around find token method
            </summary>
            <param name="scriptParseInfo"></param>
            <param name="startLine"></param>
            <param name="startColumn"></param>
            <returns> token index</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.GetSchemaName(Microsoft.SqlTools.ServiceLayer.LanguageServices.ScriptParseInfo,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.Position,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile)">
            <summary>
            Extract schema name for a token, if present
            </summary>
            <param name="scriptParseInfo"></param>
            <param name="position"></param>
            <param name="scriptFile"></param>
            <returns> schema name</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.GetHoverItem(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentPosition,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile)">
            <summary>
            Get quick info hover tooltips for the current position
            </summary>
            <param name="textDocumentPosition"></param>
            <param name="scriptFile"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.GetSignatureHelp(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentPosition,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile)">
            <summary>
            Get function signature help for the current position
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.GetCompletionItems(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentPosition,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile,Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo)">
            <summary>
            Return the completion item list for the current text position.
            This method does not await cache builds since it expects to return quickly
            </summary>
            <param name="textDocumentPosition"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.ApplyCompletionExtensions(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,Microsoft.SqlTools.ServiceLayer.LanguageServices.Contracts.CompletionItem[],Microsoft.SqlTools.ServiceLayer.LanguageServices.Completion.ScriptDocumentInfo)">
            <summary>
            Run all completion extensions
            </summary>
            <param name="connInfo"></param>
            <param name="resultCompletionItems"></param>
            <param name="scriptDocumentInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.GetSemanticMarkers(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile)">
            <summary>
            Gets a list of semantic diagnostic marks for the provided script file
            </summary>
            <param name="scriptFile"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.RunScriptDiagnostics(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile[],Microsoft.SqlTools.Hosting.Protocol.EventContext)">
            <summary>
            Runs script diagnostics on changed files
            </summary>
            <param name="filesToAnalyze"></param>
            <param name="eventContext"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.DelayThenInvokeDiagnostics(System.Int32,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile[],Microsoft.SqlTools.Hosting.Protocol.EventContext,System.Threading.CancellationToken)">
            <summary>
            Actually run the script diagnostics after waiting for some small delay
            </summary>
            <param name="delayMilliseconds"></param>
            <param name="filesToAnalyze"></param>
            <param name="eventContext"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.AddOrUpdateScriptParseInfo(System.String,Microsoft.SqlTools.ServiceLayer.LanguageServices.ScriptParseInfo)">
            <summary>
            Adds a new or updates an existing script parse info instance in local cache
            </summary>
            <param name="uri"></param>
            <param name="scriptInfo"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.GetScriptParseInfo(System.String,System.Boolean)">
            <summary>
            Gets a script parse info object for a file from the local cache
            Internal for testing purposes only
            </summary>
            <param name="uri"></param>
            <param name="createIfNotExists">Creates a new instance if one doesn't exist</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.LanguageService.IsPreviewWindow(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile)">
            <summary>
            Returns a flag indicating if the ScriptFile refers to the output window.
            </summary>
            <param name="scriptFile"></param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.DefinitionResult">
            <summary>
            /// Result object for PeekDefinition
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.DefinitionResult.IsErrorResult">
            <summary>
            True, if definition error occured
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.DefinitionResult.Message">
            <summary>
            Error message, if any
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.LanguageServices.DefinitionResult.Locations">
            <summary>
            Location object representing the definition script file
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.QueueItem">
            <summary>
            Class that stores the state of a binding queue request item
            </summary>    
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.QueueItem.#ctor">
            <summary>
            QueueItem constructor
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.QueueItem.Key">
            <summary>
            Gets or sets the queue item key
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.QueueItem.BindOperation">
            <summary>
            Gets or sets the bind operation callback method
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.QueueItem.TimeoutOperation">
            <summary>
            Gets or sets the timeout operation to call if the bind operation doesn't finish within timeout period
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.QueueItem.ErrorHandler">
            <summary>
            Gets or sets the operation to call if the bind operation encounters an unexpected exception.
            Supports returning an object in case of the exception occurring since in some cases we need to be
            tolerant of error cases and still return some value
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.QueueItem.ItemProcessed">
            <summary>
            Gets or sets an event to signal when this queue item has been processed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.QueueItem.Result">
            <summary>
            Gets or sets the result of the queued task
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.QueueItem.BindingTimeout">
            <summary>
            Gets or sets the binding operation timeout in milliseconds
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.QueueItem.WaitForLockTimeout">
            <summary>
            Gets or sets the timeout for how long to wait for the binding lock
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.LanguageServices.QueueItem.GetResultAsT``1">
            <summary>
            Converts the result of the execution to type T
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.LanguageServices.ScriptParseInfo">
            <summary>
            Class for storing cached metadata regarding a parsed SQL file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ScriptParseInfo.BuildingMetadataLock">
            <summary>
            Event which tells if MetadataProvider is built fully or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ScriptParseInfo.IsConnected">
            <summary>
            Gets or sets a flag determining is the LanguageService is connected
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ScriptParseInfo.ConnectionKey">
            <summary>
            Gets or sets the binding queue connection context key
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ScriptParseInfo.ParseResult">
            <summary>
            Gets or sets the previous SQL parse result
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.LanguageServices.ScriptParseInfo.CurrentSuggestions">
            <summary>
            Gets or sets the current autocomplete suggestion list
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1">
            <summary>
            A class to calculate the value for the metrics using the given bucket
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.#ctor(System.Int32[])">
            <summary>
            Creates new instance given a bucket of metrics
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.Metrics">
            <summary>
            The metrics bucket
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.IsSorted(System.Int32[])">
            <summary>
            Returns true if the given list is sorted
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.UpdateMetrics(System.Double,`0,System.Func{System.String,`0,`0})">
            <summary>
            Update metric value given new number
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.InteractionMetrics`1.Quantile">
            <summary>
            Returns the quantile
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.BrowseFolderHelper">
            <summary>
            Helper static class for the BrowseFolder dialog
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.BrowseFolderHelper.GetBrowseStartPath(Microsoft.SqlServer.Management.Common.ServerConnection)">
            <summary>
            Get the initial directory for the browse folder dialog
            </summary>
            <param name="serverConnection">The connection to the server</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.FileNameHelper">
            <summary>
            Static class with Utility functions dealing with filenames
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.FileNameHelper.IsValidFilename(System.String)">
            <summary>
            Checks whether a filename has invalid characters
            </summary>
            <param name="testName">filename to check</param>
            <returns>true if filename has only valid characters</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer">
            <summary>
            CDataContainer
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.Document">
            <summary>
            gets/sets XmlDocument with parameters
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.HashTable">
            <summary>
            returns the Hashtable that can be used to store generic information
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.Server">
            <summary>
            gets/sets SMO server object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.ConnectionInfo">
            <summary>
            connection info that should be used by the dialogs
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.ServerConnection">
            <summary>
            returns SMO server connection object constructed off the connectionInfo.
            This method cannot work until ConnectionInfo property has been set
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.SqlInfoWithConnection">
            <summary>
            returns SMO server connection object constructed off the connectionInfo.
            This method cannot work until ConnectionInfo property has been set
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.IsNewObject">
            <summary>
            Whether we are creating a new object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.ParentUrn">
            <summary>
            The URN to the parent of the object we are creating/modifying
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.ObjectUrn">
            <summary>
            The URN to the object we are creating/modifying
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.ObjectName">
            <summary>
            The name of the object we are modifying
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.ObjectSchema">
            <summary>
            The schema of the object we are modifying
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.ObjectType">
            <summary>
            The type of the object we are creating (as it appears in URNs)
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.SqlDialogSubject">
            <summary>
            The SQL SMO object that is the subject of the dialog.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.LoggedInUserIsSysadmin">
            <summary>
            Whether the logged in user is a system administrator
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.RelevantDatabaseName">
            <summary>
            Get the name of the Database that contains (or is) the subject of the dialog.
            If no there is no relevant database, then an empty string is returned.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.SqlServerVersion">
            <summary>
            The server major version number
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.EffectiveSqlServerVersion">
            <summary>
            The server version the database is emulating.  If database compatibility level is
            not relevant to the subject, then this just returns the actual server version.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.#ctor(System.Object,System.Boolean)">
            <summary>
            contructs the object and initializes its SQL ConnectionInfo and ServerConnection properties
            using the specified connection info containing live connection. 
            </summary>
            <param name="ciObj">connection info containing live connection</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.#ctor(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.ServerType,System.Object,System.Boolean)">
            <summary>
            contructs the object and initializes its SQL ConnectionInfo and ServerConnection properties
            using the specified connection info containing live connection. 
            
            in addition creates a server of the given server type
            </summary>
            <param name="ci">connection info containing live connection</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.#ctor(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.ServerType,System.String,System.Boolean,System.String,System.Security.SecureString,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="serverType">Server type</param>
            <param name="serverName">Server name</param>
            <param name="trusted">true if connection is trused. If true user name and password are ignored</param>
            <param name="userName">User name for not trusted connections</param>
            <param name="password">Password for not trusted connections</param>
            <param name="xmlParameters">XML string with parameters</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.#ctor(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,System.String)">
            <summary>
            
            </summary>
            <param name="dataContainer">Data container</param>
            <param name="xmlParameters">XML string with parameters</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.Init(System.String)">
            <summary>
            Initialization routine that is a convience fuction for clients with the data in a string
            </summary>
            <param name="xmlText">The string that contains the xml data</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.Init(System.Xml.XmlDocument,System.IServiceProvider)">
            <summary>
            Overload of basic Init which takes a IServiceProvider and initializes 
            what it can of the container with elements provided by IServcieProvider
            
            Today this is only the IManagedProvider if available but this function
            could be modified to init other things provided by the ServiceProvider
            </summary>
            <param name="doc"></param>
            <param name="site"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.Init(System.Xml.XmlDocument)">
            <summary>
            main initialization method - the object is unusable until this method is called
            NOTE: it will ensure the ConnectionInfo and ServerConnetion objects are constructed
            for the appropriate server types
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.LoadData">
            <summary>
            loads data into internal members from the XML document and detects the server type
            [SQL, OLAP etc] based on the info in the XML doc
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.SetManagedConnection(Microsoft.SqlTools.ServiceLayer.Management.IManagedConnection)">
            <summary>
            we need to store it as context from the OE
            </summary>
            <param name="managedConnection"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.GetDocumentPropertyValue(System.String)">
            <summary>
            Get the named property value from the XML document
            </summary>
            <param name="propertyName">The name of the property to get</param>
            <returns>The property value</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.GetDocumentPropertyString(System.String)">
            <summary>
            Get the named property value from the XML document
            </summary>
            <param name="propertyName">The name of the property to get</param>
            <returns>The property value</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.SetDocumentPropertyValue(System.String,System.String)">
            <summary>
            Set the named property value in the XML document
            </summary>
            <param name="propertyName">The name of the property to set</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.Reset">
            <summary>
            Reset the data container to its state from just after it was last initialized or reset
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.InitializeObjectNameAndSchema">
            <summary>
            Get the name and schema (if applicable) for the object we are referring to
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.GetTempSqlConnectionInfoWithConnection(System.String,System.Boolean,System.String,System.Security.SecureString,System.String,System.String)">
            <summary>
            returns SqlConnectionInfoWithConnection object constructed using our internal vars
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.OnSqlConnectionClosed(System.Object,System.EventArgs)">
            <summary>
            our handler of sqlCiWithConnection.ConnectionClosed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.ApplyConnectionInfo(Microsoft.SqlServer.Management.Common.SqlOlapConnectionInfoBase,System.Boolean)">
            <summary>
            stores specified connection info and performs some extra initialization steps
            that can only be done after we have the connection information
            </summary>
            <param name="ci"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.GenerateXmlDocumentFromString(System.String)">
            <summary>
            Generates an XmlDocument from a string, avoiding exploits available through
            DTDs
            </summary>
            <param name="sourceXml"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.Dispose(System.Boolean)">
            <summary>
            MUST be called, as we'll be closing SQL connection inside this call
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.CreateDataContainer(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,System.Boolean,System.Xml.XmlDocument)">
            <summary>
            Create a data container object
            </summary>
            <param name="connInfo">connection info</param>
            <param name="databaseExists">flag indicating whether to create taskhelper for existing database or not</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CDataContainer.CreateDataContainerDocument(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,System.Boolean)">
            <summary>
            Create data container document
            </summary>
            <param name="connInfo">connection info</param>
            <param name="databaseExists">flag indicating whether to create document for existing database or not</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.DbSize">
            <summary>
            Helper class to describe the size of an Azure database
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.DbSize.#ctor(Microsoft.SqlTools.ServiceLayer.Management.DbSize)">
            <summary>
            Copy constructor
            </summary> 
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.DbSize.Size">
            <summary>
            Size of the DB
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.DbSize.SizeUnit">
            <summary>
            Units that the size is measured in 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.DbSize.SizeInBytes">
            <summary>
            Returns the number of bytes represented by the DbSize
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.DbSize.ToString">
            <summary>
            Displays the size in the format ####UU (e.g. 100GB)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.DbSize.ParseDbSize(System.String)">
            <summary>
            Parses a string in the format ####UU into a DbSize object. The number of
            numeric characters must be parseable into an int and the last two characters
            mapped to one of the SizeUnits enum values. 
            </summary>
            <param name="dbSizeString"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.IManagementAction">
            <summary>
            defines mandatory interface that an action must implement
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IManagementAction.OnCancel(System.Object)">
            <summary>
            performs custom action when user requests to cancel execution.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IManagementAction.OnScript(System.Object)">
            <summary>
            Overridable function that allow a derived class to implement its
            OnScript functionality. 
            </summary>
            <param name="sender"></param>
            <returns>text of the generated script</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IManagementAction.OnRunNow(System.Object)">
            <summary>
            Overridable function that allow a derived class to implement its
            OnRunNow functionality
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IManagementAction.OnTaskCompleted(System.Object,Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode,Microsoft.SqlTools.ServiceLayer.Management.RunType)">
            <summary>
            Overridable function that allow a derived class to implement
            a finalizing action after a RunNow or RunNowAndClose were sucesfully executed
            NOTE: same as OnGatherUiInformation, this method is always called from UI thread
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.ExecutionHandlerDelegate">
            <summary>
            This class is responsible for executing panels one by one.
            It is reused by ViewSwitcherControlsManager and treepanelform classes
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ExecutionHandlerDelegate.Run(Microsoft.SqlTools.ServiceLayer.Management.RunType,System.Object)">
            <summary>
            </summary>
            <param name="runType"></param>
            <param name="sender"></param>
            <returns>execution result</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ExecutionHandlerDelegate.Cancel(System.Object)">
            <summary>
            performs custom action wen user requests a cancel
            this is called from the UI thread 
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.ExecutonHandler">
            <summary>
            manager that hooks up tree view with the individual views
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Management.ExecutonHandler.executionHandlerDelegate">
            <summary>
            handler that we delegate execution related tasks to
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Management.ExecutonHandler.managementAction">
            <summary>
            class that describes available views that is also aware of execution
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Management.ExecutonHandler.executionResult">
            <summary>
            result of the last execution
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Management.ExecutonHandler.executionFailureException">
            <summary>
            exception that caused execution failure
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Management.ExecutonHandler.script">
            <summary>
            text of the generated script if RunNow method was called last time with scripting option
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ExecutonHandler.#ctor(Microsoft.SqlTools.ServiceLayer.Management.IExecutionAwareManagementAction)">
            <summary>
            creates instance of the class and returns service provider that aggregates the provider
            provider with extra services
            </summary>
            <param name="serviceProvider">service provider from the host</param>
            <param name="aggregatedProvider">
            aggregates service provider that is derived from the host service provider and
            is extended with extra services and/or overriden services. The host should be
            using this provider whenever it has to specify an IServiceProvider to a component
            that will be managed by this class
            </param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.ExecutonHandler.ExecutionFailureException">
            <summary>
            exception that caused execution failure
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.ExecutonHandler.ScriptTextFromLastRun">
            <summary>
            text of the generated script if RunNow method was called last time with scripting option
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ExecutonHandler.RunNow(Microsoft.SqlTools.ServiceLayer.Management.RunType,System.Object)">
            <summary>
            we call the run now implementaion of the management action.
            If any exception is generated we stop the execution and we set the execution mode flag to failure. 
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ExecutonHandler.InitiateCancel(System.Object)">
            <summary>
            Kicks off Cancel operation
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ExecutonHandler.OnTaskCompleted(System.Object,Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode,Microsoft.SqlTools.ServiceLayer.Management.RunType)">
            <summary>
            is called by the host to do post execution actions
            </summary>
            <param name="sender"></param>
            <param name="executionMode"></param>
            <param name="executionType"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ExecutonHandler.Dispose">
            <summary>
            enables deterministic cleanup
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ExecutonHandler.IsScripting(Microsoft.SqlTools.ServiceLayer.Management.RunType)">
            <summary>
            determines whether given run type corresponds to scripting or not
            </summary>
            <param name="runType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ExecutonHandler.EnsureValidScriptBuilder">
            <summary>
            ensure that we have valid StringBulder for scripting
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ExecutonHandler.ProcessExceptionDuringExecution(System.Exception)">
            <summary>
            helper function that is called when we caught an exception during execution
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode">
            <summary>
            Execution mode enumeration Success if execution succeeded of Failure otherwise for now.
            This enumeration might be refined more as there are needs for it
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode.Failure">
            <summary>
            indicates that the operation failed
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode.Success">
            <summary>
            indicates that the operation succeded
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode.Cancel">
            <summary>
            indicates that the operation was canceled
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.IExecutionAwareManagementAction">
            <summary>
            IExecutionAwareSqlControlCollection allows control's container to do pre and post
            processing of the execution commands
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IExecutionAwareManagementAction.PreProcessExecution(Microsoft.SqlTools.ServiceLayer.Management.PreProcessExecutionInfo,Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode@)">
            <summary>
            called before dialog's host executes actions on all panels in the dialog one by one.
            If something fails inside this function and the execution should be aborted,
            it can either raise an exception [in which case the framework will show message box with exception text] 
            or set executionResult out parameter to be ExecutionMode.Failure
            NOTE: it might be called from worker thread
            </summary>
            <param name="executionInfo">information about execution action</param>
            <param name="executionResult">result of the execution</param>
            <returns>
            true if regular execution should take place, false if everything
            has been done by this function
            NOTE: in case of returning false during scripting operation 
            PreProcessExecutionInfo.Script property of executionInfo parameter 
            MUST be set by this function [if execution result is success]
            </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IExecutionAwareManagementAction.Cancel">
            <summary>
            called when the host received Cancel request. NOTE: this method can return while
            operation is still being canceled
            </summary>
            <returns>
            true if the host should do standard cancel for the currently running view or
            false if the Cancel operation was done entirely inside this method and there is nothing
            extra that should be done
            </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IExecutionAwareManagementAction.PostProcessExecution(Microsoft.SqlTools.ServiceLayer.Management.RunType,Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode)">
            <summary>
            called after host executes actions
            </summary>
            <param name="executionMode">result of the execution</param>
            <param name="runType">type of execution</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.IManagedConnection">
            <summary>
            Provides connection and enumerator context for a node
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.IManagedConnection.Connection">
            <summary>
            Connection information.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IManagedConnection.Close">
            <summary>
            Free any resources for this connection
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.IManagedConnection2">
            <summary>
            interface used by the objectexplorer. Allows us to "pool" the main connection
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.ManagedConnection">
            <summary>
            Implementation of IManagedConnection. Allows the use of a direct or indirect connection
            in the object explorer that takes care of the connection.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagedConnection.#ctor(Microsoft.SqlServer.Management.Common.SqlOlapConnectionInfoBase)">
            <summary>
            Create a new managed connection
            </summary>
            <param name="connection">connection wish to manage</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagedConnection.#ctor(Microsoft.SqlServer.Management.Common.SqlOlapConnectionInfoBase,System.Boolean)">
            <summary>
            create a new managed connection.
            </summary>
            <param name="connection">connection</param>
            <param name="attemptToPool">true if we are going to try and reuse the
            connection if possible</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.ManagedConnection.Connection">
            <summary>
            Connection
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagedConnection.Close">
            <summary>
            Close the current connection if applicable.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Management.ManagedConnection.activeConnections">
            <summary>
            hashtable we use to keep track of actively used main connections
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.IProgressItem">
            <summary>
            Interface that supports the delegation of individual actions in the progress dialog
            to individual classes.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IProgressItem.DoAction(Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection,System.Int32)">
            <summary>
            Perform the action for this class
            </summary>
            <param name="actions">Actions collection</param>
            <param name="index">array index of this particular action</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.IObjectWithSite">
            <summary>
            defines notion of sitable object
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.ISqlControlCollection">
            <summary>
            ISqlControlCollection allows access to a collection of dialog views
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase">
            <summary>
            base class that can be used to derived from for the main classes
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.serviceProvider">
            <summary>
            service provider of our host. We should direct all host-specific requests to the services
            implemented by this provider
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.m_executionMode">
            <summary>
            execution mode by default for now is success
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.dataContainer">
            <summary>
            data container with initialization-related information
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.Dispose(System.Boolean)">
            <summary>
            do the deterministic cleanup
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.PreProcessExecution(Microsoft.SqlTools.ServiceLayer.Management.PreProcessExecutionInfo,Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode@)">
            <summary>
            called before management action executes onRun method.
            If something fails inside this function and the execution should be aborted,
            it can either raise an exception [in which case the framework will fail with exception text] 
            or set executionResult out parameter to be ExecutionMode.Failure
            </summary>
            <param name="executionInfo">information about execution action</param>
            <param name="executionResult">result of the execution</param>
            <returns>
            true if regular execution should take place, false if everything
            has been done by this function
            NOTE: in case of returning false during scripting operation 
            PreProcessExecutionInfo.Script property of executionInfo parameter 
            MUST be set by this function [if execution result is success]
            </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.PostProcessExecution(Microsoft.SqlTools.ServiceLayer.Management.RunType,Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode)">
            <summary>
            called after dialog's host executes actions on all panels in the dialog one by one
            NOTE: it might be called from worker thread
            </summary>
            <param name="executionMode">result of the execution</param>
            <param name="runType">type of execution</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.Cancel">
            <summary>
            called when the host received Cancel request. NOTE: this method can return while
            operation is still being canceled
            </summary>
            <returns>
            true if the host should do standard cancel for the currently running view or
            false if the Cancel operation was done entirely inside this method and there is nothing
            extra that should be done
            </returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.OwnDataContainer">
            <summary>
            whether we own our DataContainer or not. Depending on this value it will or won't be
            disposed in our Dispose method
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.DoPreProcessExecution(Microsoft.SqlTools.ServiceLayer.Management.RunType,Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode@)">
            <summary>
            called by IExecutionAwareManagementAction.PreProcessExecution to enable derived
            classes to take over execution of the dialog and do entire execution in this method
            rather than having the framework to execute dialog views one by one.
            
            NOTE: it might be called from non-UI thread
            </summary>
            <param name="runType"></param>
            <param name="executionResult"></param>
            <returns>
            true if regular execution should take place, false if everything,
            has been done by this function
            </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.DoPostProcessExecution(Microsoft.SqlTools.ServiceLayer.Management.RunType,Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode)">
            <summary>
            called after management action executes onRun method.
            </summary>
            <param name="executionMode">result of the execution</param>
            <param name="runType">type of execution</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.PreProcessScripting(Microsoft.SqlTools.ServiceLayer.Management.PreProcessExecutionInfo,Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode@)">
            <summary>
            Called to intercept scripting operation
            </summary>
            <param name="executionInfo"></param>
            <param name="executionResult"></param>
            <returns>
            true if regular execution should take place, false the script
            has been created by this function
            </returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.DataContainer">
            <summary>
            CDataContainer accessor
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.ServerConnection">
            <summary>
            SMO Server connection that MUST be used for all enumerator calls
            We'll get this object out of CDataContainer, that must be initialized
            property by the initialization code
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.IsScripting(Microsoft.SqlTools.ServiceLayer.Management.RunType)">
            <summary>
            checks whether given run time represents one of scripting options
            </summary>
            <param name="runType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.DoPreProcessExecutionAndRunViews(Microsoft.SqlTools.ServiceLayer.Management.RunType)">
            <summary>
            calls DoPreProcessExecution and if it returns false, then it will execute all initialized views
            one by one. 
            This method allows derived classes to do both preprocessing and normal execution in a way
            that the framework would normally do. Use this method for special cases when derived class
            should really handle entire execution while doing exactly the same actions as the framework
            would do
            </summary>
            <param name="runType"></param>
            <returns>
            result of the execution. It will let exception fly out if it was raised during execution
            </returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.NeedToSwitchServer">
            <summary>
            determines whether we need to substitute SMO server objects with the
            temporary ones while doing scripting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.BuildSqlScript">
            <summary>
            builds a script string from SMO string collections. This function should
            probably be moved to SMO. Also we need a way to specify the tsql batch
            separator which for now is GO
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.ExecuteForSql(Microsoft.SqlTools.ServiceLayer.Management.PreProcessExecutionInfo,Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode@)">
            <summary>
            called when we need to script a Sql Server action
            </summary>
            <param name="executionInfo"></param>
            <param name="executionResult"></param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.ExecutionHandlerDelegate">
            <summary>
            returns internal helper class that we delegate execution of the panels one by one when 
            we do it ourselves during scripting
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.ExecutionMode">
            <summary>
            execution mode accessor
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.OnTaskCompleted(System.Object,Microsoft.SqlTools.ServiceLayer.Management.ExecutionMode,Microsoft.SqlTools.ServiceLayer.Management.RunType)">
            <summary>
            Overridable function that allow a derived class to implement
            a finalizing action after a RunNow or RunNowAndClose where sucesfully executed
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.OnRunNow(System.Object)">
            <summary>
            Overridable function that allow a derived class to implement its
            OnRunNow functionality
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.OnScript(System.Object)">
            <summary>
            Overridable function that allow a derived class to implement its
            OnScript functionality. 
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.Script">
            <summary>
            derived class should override this method if it does same action for all types of scripting,
            because all ILaunchFormHostedControl scripting methods implemented in this class simply
            call this method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ManagementActionBase.OnCancel(System.Object)">
            <summary>
            performs custom action wen user requests a cancel
            this is called from the UI thread and generally executes
            smoServer.Cancel() or amoServer.Cancel() causing
            the worker thread to inttrerupt its current action
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.ManagementUtils">
            <summary>
            Utility functions for working with Management classes
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection">
            <summary>
            Allows for the mapping of objects that implement IProgressItem to individual items in the
            progress dialog.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection.ActionIndexMap">
            <summary>
            Allows us to map an action to its index in the progress dialog.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection.ActionIndexMap.Action">
            <summary>
            action
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection.ActionIndexMap.Index">
            <summary>
            index
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection.actions">
            <summary>
            list of actions we will perform.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection.CloseOnUserCancel">
            <summary>
            Indicates whether to close the dialog immediately if the user cancels an operation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection.CloseOnSuccessfulCompletion">
            <summary>
            Indicates whether to automatically close the dialog when all actions are complete
            successfully.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection.QuitOnError">
            <summary>
            Indicates whether the operation should be terminated if any individual step fails.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection.OperationStatus">
            <summary>
            Indicates the status of the operation.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection.progress">
            <summary>
            Progress object this action collection will work with
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection.ToString">
            <summary>
            Generate a string representaion of this object. It will convert all of it's IProgressItem members
            to strings in a new line.
            </summary>
            <returns>string description of the actions this object contains</returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection.Count">
            <summary>
            Gets the number of actions in this collection
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection.IsSynchronized">
            <summary>
            not supported
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection.SyncRoot">
            <summary>
            not supported
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection.AddAction(Microsoft.SqlTools.ServiceLayer.Management.IProgressItem)">
            <summary>
            Add an action to the collection
            </summary>
            <param name="action">action to be added</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection.DoWorkOnThread">
            <summary>
            delegate called when the progress dialog wants us to perform work on a new thread.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.ProgressItemCollection.FixUpActionsToProgress">
            <summary>
            Adds the actions to an IProgress interface.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.ProgressStatus">
            <summary>
            Enumeration for status of individual actions
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.OperationStatus">
            <summary>
            Enumeration for status of the overall operation
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.IProgress">
            <summary>
            Interface defining core functionality of a progress control container
            
            NOTE: Refer to the comments for each method/property individually to determine 
                  whether it is thread-safe and may be used from the worker thread. Also note
                  that some members are asynchronous.      
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.IProgress.AllowAbort">
            <summary>
            The property that determines if the user should be allowed to abort the 
            operation. The default value is true.
            
            NOTE: This property is not thread safe. Set from UI thread.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.IProgress.AbortPrompt">
            <summary>
            The confirmation prompt to display if the user hits the Abort button.
            The abort prompt should be worded such that the abort is confirmed 
            if the user hits "Yes".
            
            NOTE: This property is not thread safe. Set from UI thread.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.IProgress.WorkerThreadStart">
            <summary>
            The ThreadStart delegate. The method referenced by this delegate is run by
            the worker thread to perform the operation.
            
            NOTE: This property is not thread safe. Set from UI thread.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.IProgress.IsAborted">
            <summary>
            Aborted status of the operation. 
            
            NOTE: This property is thread safe and may be called from the worker
                  thread. Accessing this property may cause caller to block if UI
                  is waiting for user confirmation of abort.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Management.IProgress.ActionUpdateEnabled">
            <summary>
            This property determines whether updates should be allowed for
            actions. If this is set to false, any calls that are made
            to add or update an action are ignored. The default value is true.
            
            NOTE: This property is thread safe and may be called from the worker
                  thread.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IProgress.AddAction(System.String)">
            <summary>
            Add an action to the displayed list of actions. Actions are 
            displayed in the order they are added. An action can be referenced
            in future calls using the zero-based index that is returned.
            
            The description must be a non-empty string.
            
            NOTE: This method is not thread safe. Call from the UI thread. 
            </summary>
            <param name="description">Description of the action</param>
            <returns>The index of the newly added action.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IProgress.AddActionDynamic(System.String)">
             <summary>
             Add an action to the displayed list of actions. This is meant
             to be called from the worker thread to add an action after
             the operation is already in progress.
             
             Actions are displayed in the order they are added. Use the 
             zero-based index of the action based on past actions added
             to reference it in future calls. The description must be a 
             non-empty string.
            
             NOTE: This method is thread safe and asynchronous. It may be
                   called from the worker thread. 
             </summary>
             <param name="description">Description of the action</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IProgress.UpdateActionDescription(System.Int32,System.String)">
            <summary>
            Update the description of an action 
            
            The description must be a non-empty string.
            
            NOTE: This method is thread safe and asynchronous. It may be
                  called from the worker thread.
            </summary>
            <param name="actionIndex">Index of the action</param>
            <param name="description">New description of the action</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IProgress.UpdateActionStatus(System.Int32,Microsoft.SqlTools.ServiceLayer.Management.ProgressStatus)">
            <summary>
            Update the status of an action
            
            NOTE: This method is thread safe and asynchronous. It may be
                  called from the worker thread.
            </summary>
            <param name="actionIndex">Index of the action</param>
            <param name="status">New status of the action</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IProgress.UpdateActionProgress(System.Int32,System.Int32)">
            <summary>
            Update the progress of an action in terms of percentage complete
            
            NOTE: This method is thread safe and asynchronous. It may be
                  called from the worker thread.
            </summary>
            <param name="actionIndex">Index of the action</param>
            <param name="percentComplete">Percentage of the action that is complete (0-100)</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IProgress.UpdateActionProgress(System.Int32,System.String)">
            <summary>
            Update the progress of an action with a text description of 
            the progress
            
            The description must be a non-empty string.
            
            NOTE: This method is thread safe and asynchronous. It may be
                  called from the worker thread.
            </summary>
            <param name="actionIndex">Index of the action</param>
            <param name="description">Description of progress</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IProgress.AddActionException(System.Int32,System.Exception)">
            <summary>
            Add an exception to an action
            
            Exceptions are displayed in the action grid only for actions 
            with "Error" or "Warning" status.
            
            NOTE: This method is thread safe and asynchronous. It may be
                  called from the worker thread.
            </summary>
            <param name="actionIndex">Index of the action</param>
            <param name="e">Exception to be added</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IProgress.AddActionInfoString(System.Int32,System.String)">
             <summary>
             Add an info string to an action in the progress report control
            
             Information strings are displayed in the action grid only for 
             actions with "SuccessWithInfo" status. The info string must 
             be a non-empty string. It should not be formatted or contain
             newline characters.
            
             NOTE: This method is thread safe and asynchronous. It may be
                   called from the worker thread.
             </summary>
             <param name="actionIndex">Index of the action</param>
             <param name="infoString">Information string to be added</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.IProgress.WorkerThreadExiting(Microsoft.SqlTools.ServiceLayer.Management.OperationStatus)">
            <summary>
            Call this method when the worker thread performing the operation
            is about to exit. The final result of the operation is supplied in
            the form of a OperationStatus value.
            
            NOTE: This method is thread safe and asynchronous. It may be
                  called from the worker thread.
            </summary>
            <param name="result">Result of the operation</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.ProgressCtrlStatus">
            <summary>
            Enumeration for status of the progress report control w.r.t the operation
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.ProgressCtrlStatusChangedEventHandler">
            <summary>
            Delegate used with ProgressCtrlStatusChanged event.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.ProgressCtrlStatusChangedEventArgs">
            <summary>
            EventArgs class for use with ProgressCtrlStatusChanged event
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.RunType">
            <summary>
            what type of actions does the worker know to execute
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.ServerSwitchingAttribute">
            <summary>
            Custom attribute that can be applied on particular DB commander to
            indicate whether the base class should switch SMO servers before 
            execution or not.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.SharedConnectionUtil.GetConnectionKeyName(Microsoft.SqlServer.Management.Common.SqlOlapConnectionInfoBase)">
            <summary>
            
            </summary>
            <param name="ci"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.STParameters">
            <summary>
            SqlTools Parameters, used to define what goes into starting up a Workbench Form
             AKA a dbCommander, AKA a "dialog"
             These parameters are xml snippets
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.STParameters.STType">
            <summary>
            The data type we are interested in
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.STParameters.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.STParameters.#ctor(System.Xml.XmlDocument)">
            <summary>
            Constructor
            </summary>
            <param name="xmlDoc">The xml snippet used to control the dbCommander</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.STParameters.SetDocument(System.Xml.XmlDocument)">
            <summary>
            Changing the xml snippet we are using
            </summary>
            <param name="xmlDoc">the new xml snippet</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.STParameters.GetDocument">
            <summary>
            Access to the xml we are using for dbCommander parameters
            </summary>
            <returns>our current parameters</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.STParameters.GetBaseParam(System.String,System.Object@)">
            <summary>
            Search for an xml tag, and return its value
            </summary>
            <param name="parameterName">the xml tag name</param>
            <param name="value">the value of that tag</param>
            <returns>flag that is true if the data was found, false if not</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.STParameters.SetBaseParam(System.String,System.Object)">
            <summary>
            Finds an existing xml tag, and sets it to a new value, or if the tag is not found
            create it and set it's value
            </summary>
            <param name="parameterName">tag name</param>
            <param name="value">new value</param>
            <returns>flag that is true if the tag was set, false if not</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.STParameters.GetParam(System.String,System.Int32@)">
            <summary>
            Get back an interger parameter.
            NOTE: if the tag exists, but it contains non-numeric data, this will throw
            An exception of type 'System.FormatException' 
            with Additional information: Could not find any parsible digits.
            </summary>
            <param name="parameterName">xml tag name for the parameter of interest</param>
            <param name="iValue">out value of parameter</param>
            <returns>flag that is true if the data was found, false if not</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.STParameters.GetParam(System.String,System.Boolean@)">
            <summary>
            Accessor for a boolean parameter
            NOTE: if the tag exists, but it contains non-numeric data, this will throw
            An exception of type 'System.FormatException' 
            with Additional information: Could not find any parsible digits.
            </summary>
            <param name="parameterName">xml tag name for the parameter of interest</param>
            <param name="value">out value of parameter</param>
            <returns>flag that is true if the data was found, false if not</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.STParameters.GetParam(System.String,System.String@)">
            <summary>
            Accessor to a string parameter
            </summary>
            <param name="parameterName">xml tag name for the parameter of interest</param>
            <param name="value">out value of parameter</param>
            <returns>flag that is true if the data was found, false if not</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.STParameters.GetParam(System.String,System.Int64@)">
            <summary>
            Accessor to long parameter (Int64)
            NOTE: if the tag exists, but it contains non-numeric data, this will throw
            An exception of type 'System.FormatException' 
            with Additional information: Could not find any parsible digits.
            </summary>
            <param name="parameterName">xml tag name for the parameter of interest</param>
            <param name="value">out value of parameter</param>
            <returns>flag that is true if the data was found, false if not</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.STParameters.SetParam(System.String,System.Int32)">
            <summary>
            Set an int (Int32) parameter
            </summary>
            <param name="parameterName">tag name for parameter</param>
            <param name="value">integer value</param>
            <returns>true if set was successful, false if not</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.STParameters.SetParam(System.String,System.String)">
            <summary>
            Set a string parameter
            </summary>
            <param name="parameterName">tag name for parameter</param>
            <param name="value">string value</param>
            <returns>true if set was successful, false if not</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.STParameters.SetParam(System.String,System.Int64)">
            <summary>
            Set a long (Int64) parameter
            </summary>
            <param name="parameterName">tag name for parameter</param>
            <param name="value">long value</param>
            <returns>true if set was successful, false if not</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.STParameters.GetParam(System.String,System.Collections.Specialized.StringCollection,System.Boolean)">
            <summary>
            Get a string collection parameter
            </summary>
            <param name="parameterName">name of collection</param>
            <param name="list">collection that gets filled up with parameters</param>
            <param name="getInnerXml">true if we want to get at inner nodes, false if not</param>
            <returns>true if parameter(s) exist</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.STParameters.GetParam(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            Access to a collection of parameters
            </summary>
            <param name="parameterName">name of collection</param>
            <param name="list">list to fill with parameters</param>
            <returns>parameter(s) exist</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.STParameters.GetParamType(System.String,Microsoft.SqlTools.ServiceLayer.Management.STParameters.STType)">
            <summary>
            This function does nothing but return false
            </summary>
            <param name="parameterName">ignored</param>
            <param name="type">ignored</param>
            <returns>always false</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.STParameters.SetParamType(System.String,Microsoft.SqlTools.ServiceLayer.Management.STParameters.STType)">
            <summary>
            This function does nothing but return false
            </summary>
            <param name="parameterName">ignored</param>
            <param name="type">ignored</param>
            <returns>always false</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.Utils">
            <summary>
            Internal reusable helpers
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.Utils.#ctor">
            <summary>
            only static methods
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.Utils.GetCustomAttribute(System.Object,System.Type)">
            <summary>
            returns all instances of the given custom attribute on a given object
            </summary>
            <param name="objectToGetAttributeFrom"></param>
            <param name="customAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.Utils.GetSqlConnectionInfoFromDataContainer(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer)">
            <summary>
            called to create SqlConnectionInfo out of the given CDataContainer object
            </summary>
            <param name="dc"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.Utils.TrySetThreadName(System.String)">
            <summary>
            Try to set the CLR thread name. 
            Will not throw if the name is already set.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.Utils.IsSql13SP1OrLater(System.Version)">
            <summary>
            Check if the version is SQL 2016 SP1 or later.
            </summary>
            <param name="version"></param>
            <returns>true if the version is SQL 2016 SP1 or later, false otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.Utils.HasMemoryOptimizedFileGroup(Microsoft.SqlServer.Management.Smo.Server,System.String)">
            <summary>
            Returns true if given database has memory optimized filegroup on given server.
            </summary>
            <param name="server"></param>
            <param name="dbName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.Utils.HasPermissionOnServer(Microsoft.SqlServer.Management.Smo.Server,System.String)">
            <summary>
            Returns true if current user has given permission on given server.
            </summary>
            <param name="server"></param>
            <param name="permissionName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.Utils.GetMaxCultureDateTime">
            <summary>
            Some calendars, such as the UmAlQuraCalendar, support an upper date range that is earlier than MaxValue. 
            In these cases, trying to access MaxValue in variable assignments or formatting and parsing operations can throw 
            an ArgumentOutOfRangeException. Rather than retrieving the value of DateTime.MaxValue, you can retrieve the value 
            of the specified culture's latest valid date value from the 
            System.Globalization.CultureInfo.DateTimeFormat.Calendar.MaxSupportedDateTime property. 
            http://msdn.microsoft.com/en-us/library/system.datetime.maxvalue(v=VS.90).aspx
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.SqlMgmtUtils">
            <summary>
            Public reusable helpers
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.SqlMgmtUtils.#ctor">
            <summary>
            only static methods
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.SqlMgmtUtils.IsASAzure(System.String)">
            <summary>
            Returns whether the server is in AS Azure
            </summary>
            <param name="serverName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.CUtils">
            <summary>
            Summary description for CUtils.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CUtils.GetSmoServer(Microsoft.SqlTools.ServiceLayer.Management.IManagedConnection)">
            <summary>
            Get a SMO Server object that is connected to the connection
            </summary>
            <param name="ci">Conenction info</param>
            <returns>Smo Server object for the connection</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CUtils.GetOldestDate(System.Int32,Microsoft.SqlTools.ServiceLayer.Management.TimeUnitType)">
            <summary>
            Determines the oldest date based on the type of time units and the number of time units
            </summary>
            <param name="numUnits"></param>
            <param name="typeUnits"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CUtils.GetSqlException(System.Exception)">
            <summary>
            Tries to get the SqlException out of an Enumerator exception
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CUtils.GetMachineName(System.String)">
            <summary>
            computes the name of the machine based on server's name (as returned by smoServer.Name)
            </summary>
            <param name="sqlServerName">name of server ("",".","Server","Server\Instance",etc)</param>
            <returns>name of the machine hosting sql server instance</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CUtils.IsPermissionDeniedException(Microsoft.Data.SqlClient.SqlException)">
            <summary>
            Determines if a SqlException is Permission denied exception
            </summary>
            <param name="sqlException"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CUtils.GetSqlErrorNumber(Microsoft.Data.SqlClient.SqlError)">
            <summary>
            Returns the error number of a sql exeception
            </summary>
            <param name="sqlerror"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CUtils.EscapeString(System.String,System.Char)">
            <summary>
            Function doubles up specified character in a string
            </summary>
            <param name="s"></param>
            <param name="cEsc"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CUtils.EscapeStringCBracket(System.String)">
            <summary>
            Function doubles up ']' character in a string
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CUtils.EscapeStringSQuote(System.String)">
            <summary>
            Function doubles up '\'' character in a string
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CUtils.UnEscapeString(System.String,System.Char)">
            <summary>
            Function removes doubled up specified character from a string
            </summary>
            <param name="s"></param>
            <param name="cEsc"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CUtils.UnEscapeStringCBracket(System.String)">
            <summary>
            Function removes doubled up ']' character from a string
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CUtils.UnEscapeStringSQuote(System.String)">
            <summary>
            Function removes doubled up '\'' character from a string
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Management.CUtils.CanonicalizeWindowsLoginName(System.String)">
            <summary>
            Get the windows login name with the domain portion in all-caps
            </summary>
            <param name="windowsLoginName">The windows login name</param>
            <returns>The windows login name with the domain portion in all-caps</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.TimeUnitType">
            <summary>
            Enum of time units types ( used in cleaning up history based on age )
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Management.LanguageDisplay">
            <summary>
            Object used to populate default language in 
            database and user dialogs.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Metadata.ColumnMetadata">
            <summary>
            ColumnMetadata class
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Metadata.ColumnMetadata.#ctor">
            <summary>
            Constructs a simple edit column metadata provider
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Metadata.ColumnMetadata.DefaultValue">
            <summary>
            If set, this is a string representation of the default value. If set to null, then the
            column does not have a default value.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Metadata.ColumnMetadata.EscapedName">
            <summary>
            Escaped identifier for the name of the column
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Metadata.ColumnMetadata.IsComputed">
            <summary>
            Whether or not the column is computed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Metadata.ColumnMetadata.IsDeterministic">
            <summary>
            Whether or not the column is deterministically computed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Metadata.ColumnMetadata.IsIdentity">
            <summary>
            Whether or not the column is an identity column
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Metadata.ColumnMetadata.Ordinal">
            <summary>
            The ordinal ID of the column
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Metadata.ColumnMetadata.HasExtendedProperties">
            <summary>
            Whether or not the column has extended properties
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Metadata.ColumnMetadata.IsCalculated">
            <summary>
            Whether or not the column is calculated on the server side. This could be a computed
            column or a identity column.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Metadata.ColumnMetadata.IsKey">
            <summary>
            Whether or not the column is used in a key to uniquely identify a row
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Metadata.ColumnMetadata.IsTrustworthyForUniqueness">
            <summary>
            Whether or not the column can be trusted for uniqueness
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Metadata.ColumnMetadata.Extend(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper)">
            <summary>
            Extracts extended column properties from the database columns from SQL Client
            </summary>
            <param name="dbColumn">The column information provided by SQL Client</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Metadata.Contracts.MetadataType">
            <summary>
            Metadata type enumeration
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Metadata.Contracts.ObjectMetadata">
            <summary>
            Object metadata information
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Metadata.Contracts.TableMetadataRequest">
            <summary>
            Retreive metadata for the table described in the TableMetadataParams value
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Metadata.Contracts.ViewMetadataRequest">
            <summary>
            Retreive metadata for the view described in the TableMetadataParams value.
            This message reuses the table metadata params and result since the exchanged
            data is the same.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Metadata.TableMetadata">
            <summary>
            Provides metadata about the table or view being edited
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Metadata.TableMetadata.#ctor">
            <summary>
            Constructs a simple edit table metadata provider
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Metadata.TableMetadata.Columns">
            <summary>
            List of columns in the object being edited
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Metadata.TableMetadata.EscapedMultipartName">
            <summary>
            Full escaped multipart identifier for the object being edited
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Metadata.TableMetadata.IsMemoryOptimized">
            <summary>
            Whether or not the object being edited is memory optimized
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Metadata.TableMetadata.HasExtendedProperties">
            <summary>
            Whether or not the table has had extended properties added to it
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Metadata.TableMetadata.KeyColumns">
            <summary>
            List of columns that are used to uniquely identify a row
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Metadata.TableMetadata.Extend(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper[])">
            <summary>
            Extracts extended column properties from the database columns from SQL Client
            </summary>
            <param name="dbColumnWrappers">The column information provided by SQL Client</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Metadata.MetadataService">
            <summary>
            Main class for Metadata Service functionality
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Metadata.MetadataService.ConnectionServiceInstance">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Metadata.MetadataService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the Metadata Service instance
            </summary>
            <param name="serviceHost"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Metadata.MetadataService.HandleMetadataListRequest(Microsoft.SqlTools.ServiceLayer.Metadata.Contracts.MetadataQueryParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Metadata.Contracts.MetadataQueryResult})">
            <summary>
            Handle a metadata query request
            </summary>        
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Metadata.MetadataService.HandleGetTableRequest(Microsoft.SqlTools.ServiceLayer.Metadata.Contracts.TableMetadataParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Metadata.Contracts.TableMetadataResult})">
            <summary>
            Handle a table metadata query request
            </summary>        
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Metadata.MetadataService.HandleGetViewRequest(Microsoft.SqlTools.ServiceLayer.Metadata.Contracts.TableMetadataParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Metadata.Contracts.TableMetadataResult})">
            <summary>
            Handle a view metadata query request
            </summary>        
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Metadata.MetadataService.HandleGetTableOrViewRequest(Microsoft.SqlTools.ServiceLayer.Metadata.Contracts.TableMetadataParams,System.String,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Metadata.Contracts.TableMetadataResult})">
            <summary>
            Handle a table pr view metadata query request
            </summary>        
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Metadata.MetadataService.ReadMetadata(Microsoft.Data.SqlClient.SqlConnection,System.Collections.Generic.List{Microsoft.SqlTools.ServiceLayer.Metadata.Contracts.ObjectMetadata})">
            <summary>
            Read metadata for the current connection
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Metadata.IMetadataFactory">
            <summary>
            Interface for a factory that generates metadata for an object to edit
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Metadata.IMetadataFactory.GetObjectMetadata(System.Data.Common.DbConnection,System.String,System.String,System.String)">
            <summary>
            Generates a edit-ready metadata object
            </summary>
            <param name="connection">Connection to use for getting metadata</param>
            <param name="objectName">Name of the object to return metadata for</param>
            <param name="objectType">Type of the object to return metadata for</param>
            <returns>Metadata about the object requested</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Metadata.SmoMetadataFactory">
            <summary>
            Factory that generates metadata using a combination of SMO and SqlClient metadata
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Metadata.SmoMetadataFactory.GetObjectMetadata(System.Data.Common.DbConnection,System.String,System.String,System.String)">
            <summary>
            Generates a edit-ready metadata object using SMO
            </summary>
            <param name="connection">Connection to use for getting metadata</param>
            <param name="objectName">Name of the object to return metadata for</param>
            <param name="objectType">Type of the object to return metadata for</param>
            <returns>Metadata about the object requested</returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsParams.DataFolder">
            <summary>
            Folder from which collected performance data will be read from
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsParams.PerfQueryIntervalInSec">
            <summary>
            Interval at which collected performance data was originally queried at, in seconds
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsParams.TargetPlatforms">
            <summary>
            List of target platforms to consider when generating recommendations
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsParams.TargetSqlInstance">
            <summary>
            Name of the SQL instance to generate recommendations for
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsParams.TargetPercentile">
            <summary>
            Target percentile to use when performing perf data aggregation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsParams.ScalingFactor">
            <summary>
            Scaling ("comfort") factor when evalulating performance requirements
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsParams.StartTime">
            <summary>
            Start time of collected data points to consider 
            
            TO-DO: do we really need this? it's pretty safe to assume that most users would want us to evaluate all the collected data and not just part of it
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsParams.EndTime">
            <summary>
            End time of collected data points to consider
            
            TO-DO: do we really need this? it's pretty safe to assume that most users would want us to evaluate all the collected data and not just part of it
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsParams.IncludePreviewSkus">
            <summary>
            Whether or not to consider preview SKUs when generating SKU recommendations
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsParams.DatabaseAllowList">
            <summary>
            List of databases to consider when generating recommendations
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsResult.SqlDbRecommendationResults">
            <summary>
            List of SQL DB recommendation results, if applicable
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsResult.SqlDbRecommendationDurationInMs">
            <summary>
            How long the SQL DB recommendations took to generate, in milliseconds. Equal to -1 if SQL DB recommendations are not applicable.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsResult.SqlMiRecommendationResults">
            <summary>
            List of SQL MI recommendation results, if applicable
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsResult.SqlMiRecommendationDurationInMs">
            <summary>
            How long the SQL MI recommendations took to generate, in milliseconds. Equal to -1 if SQL MI recommendations are not applicable.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsResult.SqlVmRecommendationResults">
            <summary>
            List of SQL VM recommendation results, if applicable
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsResult.SqlVmRecommendationDurationInMs">
            <summary>
            How long the SQL VM recommendations took to generate, in milliseconds. Equal to -1 if SQL VM recommendations are not applicable.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsResult.ElasticSqlDbRecommendationResults">
            <summary>
            List of SQL DB recommendation results generated by the elastic model, if applicable
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsResult.ElasticSqlDbRecommendationDurationInMs">
            <summary>
            How long the SQL DB recommendations took to generate using the elastic model, in milliseconds. Equal to -1 if SQL DB elastic recommendations are not applicable.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsResult.ElasticSqlMiRecommendationResults">
            <summary>
            List of SQL MI recommendation results generated by the elastic model, if applicable
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsResult.ElasticSqlMiRecommendationDurationInMs">
            <summary>
            How long the SQL MI recommendations took to generate using the elastic model, in milliseconds. Equal to -1 if SQL MI elastic recommendations are not applicable.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsResult.ElasticSqlVmRecommendationResults">
            <summary>
            List of SQL VM recommendation results generated by the elastic model, if applicable
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsResult.ElasticSqlVmRecommendationDurationInMs">
            <summary>
            How long the SQL VM recommendations took to generate using the elastic model, in milliseconds. Equal to -1 if SQL VM elastic recommendations are not applicable.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsResult.InstanceRequirements">
            <summary>
            SQL instance requirements, representing an aggregated view of the performance requirements of the source instance
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsResult.SkuRecommendationReportPaths">
            <summary>
            File paths where the recommendation reports were saved
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsResult.ElasticSkuRecommendationReportPaths">
            <summary>
            File paths where the recommendation reports generated by the elastic model were saved
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ImpactedObjectInfo">
            <summary>
            Describes an item returned by SQL Assessment RPC methods
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentInfo">
            <summary>
            Describes an item returned by SQL Assessment RPC methods
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentInfo.RulesetVersion">
            <summary>
            Gets or sets assessment ruleset version.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentInfo.RulesetName">
            <summary>
            Gets or sets assessment ruleset name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentInfo.RuleId">
            <summary>
            Gets or sets assessment ruleset name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentInfo.TargetType">
            <summary>
            Gets or sets the assessed object's name. 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentInfo.DatabaseName">
            <summary>
            Gets or sets the database name.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentInfo.ServerName">
            <summary>
            Gets or sets the server name.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentInfo.CheckId">
            <summary>
            Gets or sets check's ID.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentInfo.Tags">
            <summary>
            Gets or sets tags assigned to this item.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentInfo.DisplayName">
            <summary>
            Gets or sets a display name for this item.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentInfo.Description">
            <summary>
            Gets or sets a brief description of the item's purpose.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentInfo.HelpLink">
            <summary>
            Gets or sets a <see cref="T:System.String"/> containing
            an link to a page providing detailed explanation
            of the best practice.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentInfo.Level">
            <summary>
            Gets or sets a <see cref="T:System.String"/> indicating
            severity level assigned to this items.
            Values are: "Information", "Warning", "Critical".
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentInfo.DatabaseRestoreFails">
            <summary>
            This flag is set if the assessment result is a blocker for migration to Target Platform.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentResult.Errors">
            <summary>
            Errors that happen while running the assessment
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentResult.AssessmentResult">
            <summary>
            Result of the assessment
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentResult.StartTime">
            <summary>
            Start time of the assessment
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentResult.EndedTime">
            <summary>
            End time of the assessment
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentResult.RawAssessmentResult">
            <summary>
            Contains the raw assessment response 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentResult.AssessmentReportPath">
            <summary>
            File path where the assessment report was saved
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentsRequest">
            <summary>
            Retreive metadata for the table described in the TableMetadataParams value
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ServerAssessmentProperties.Name">
            <summary>
            Name of the server
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ServerAssessmentProperties.CpuCoreCount">
            <summary>
            Cpu cores for the server host
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ServerAssessmentProperties.PhysicalServerMemory">
            <summary>
            Server host physical memory size
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ServerAssessmentProperties.ServerHostPlatform">
            <summary>
            Host operating system of the SQL server
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ServerAssessmentProperties.ServerVersion">
            <summary>
            Version of the SQL server
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ServerAssessmentProperties.ServerEngineEdition">
            <summary>
            SQL server engine edition
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ServerAssessmentProperties.ServerEdition">
            <summary>
            SQL server edition
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ServerAssessmentProperties.IsClustered">
            <summary>
            We use this flag to indicate if the SQL server is part of the failover cluster
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ServerAssessmentProperties.NumberOfUserDatabases">
            <summary>
            Returns the total number of dbs assessed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ServerAssessmentProperties.SqlAssessmentStatus">
            <summary>
            Returns the assessment status
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ServerAssessmentProperties.AssessedDatabaseCount">
            <summary>
            Count of Dbs assessed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ServerAssessmentProperties.SQLManagedInstanceTargetReadiness">
            <summary>
            Give assessed server stats for SQL MI compatibility
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ServerAssessmentProperties.Items">
            <summary>
            Server assessment results
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ServerAssessmentProperties.Errors">
            <summary>
            Server assessment errors
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ServerAssessmentProperties.Databases">
            <summary>
            List of databases that are assessed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.DatabaseAssessmentProperties.Name">
            <summary>
            Name of the database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.DatabaseAssessmentProperties.CompatibilityLevel">
            <summary>
            Compatibility level of the database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.DatabaseAssessmentProperties.DatabaseSize">
            <summary>
            Size of the database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.DatabaseAssessmentProperties.IsReplicationEnabled">
            <summary>
            Flag that indicates if the database is replicated
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.DatabaseAssessmentProperties.AssessmentTimeInMilliseconds">
            <summary>
            Time taken for assessing the database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.DatabaseAssessmentProperties.Items">
            <summary>
            Database Assessment Results
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.DatabaseAssessmentProperties.Errors">
            <summary>
            Database assessment errors
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.DatabaseAssessmentProperties.SQLManagedInstanceTargetReadiness">
            <summary>
            Flags that indicate if the database is ready for migration
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ErrorModel.ErrorId">
            <summary>
            Id of the assessment error
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ErrorModel.Message">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ErrorModel.ErrorSummary">
            <summary>
            Summary of the Error
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ErrorModel.PossibleCauses">
            <summary>
            Possible causes for the error
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.ErrorModel.Guidance">
            <summary>
            Possible mitigation for the error
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.StartPerfDataCollectionParams.OwnerUri">
            <summary>
            Uri identifier for the connection
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.StartPerfDataCollectionParams.DataFolder">
            <summary>
            Folder from which collected performance data will be written to
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.StartPerfDataCollectionParams.PerfQueryIntervalInSec">
            <summary>
            Interval at which performance data will be collected, in seconds
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.StartPerfDataCollectionParams.StaticQueryIntervalInSec">
            <summary>
            Interval at which static (common) data will be collected, in seconds
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.StartPerfDataCollectionParams.NumberOfIterations">
            <summary>
            Number of iterations of performance data collection to run before aggregating and saving to disk
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.RefreshPerfDataCollectionParams.LastRefreshedTime">
            <summary>
            The last time data collection status was refreshed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.StartPerfDataCollectionResult.DateTimeStarted">
            <summary>
            The time data collection started
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.StopPerfDataCollectionResult.DateTimeStopped">
            <summary>
            The time data collection stopped
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.RefreshPerfDataCollectionResult.Messages">
            <summary>
            List of status messages captured during data collection
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.RefreshPerfDataCollectionResult.Errors">
            <summary>
            List of error messages captured during data collection
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.RefreshPerfDataCollectionResult.RefreshTime">
            <summary>
            The last time data collecton status was refreshed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.Contracts.RefreshPerfDataCollectionResult.IsCollecting">
            <summary>
            Whether or not data collection is currently running
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Migration.MigrationService">
            <summary>
            Main class for Migration Service functionality
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.MigrationService.#ctor">
            <summary>
            Construct a new MigrationService instance with default parameters
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.MigrationService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.MigrationService.ConnectionService">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.MigrationService.Engine">
            <summary>
            Gets the <see cref="P:Microsoft.SqlTools.ServiceLayer.Migration.MigrationService.Engine"/> used to run assessment operations.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.MigrationService.ServiceHost">
            <summary>
            Service host object for sending/receiving requests/events.
            Internal for testing purposes.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Migration.MigrationService.DataCollectionController">
            <summary>
            Controller for collecting performance data for SKU recommendation
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.MigrationService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the Migration Service instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.MigrationService.HandleMigrationAssessmentsRequest(Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentsParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Migration.Contracts.MigrationAssessmentResult})">
            <summary>
            Handle request to start a migration session
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.MigrationService.HandleStartPerfDataCollectionRequest(Microsoft.SqlTools.ServiceLayer.Migration.Contracts.StartPerfDataCollectionParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Migration.Contracts.StartPerfDataCollectionResult})">
            <summary>
            Handle request to start performance data collection process
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.MigrationService.HandleStopPerfDataCollectionRequest(Microsoft.SqlTools.ServiceLayer.Migration.Contracts.StopPerfDataCollectionParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Migration.Contracts.StopPerfDataCollectionResult})">
            <summary>
            Handle request to stop performance data collection process
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.MigrationService.HandleRefreshPerfDataCollectionRequest(Microsoft.SqlTools.ServiceLayer.Migration.Contracts.RefreshPerfDataCollectionParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Migration.Contracts.RefreshPerfDataCollectionResult})">
            <summary>
            Handle request to refresh performance data collection status
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.MigrationService.HandleGetSkuRecommendationsRequest(Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Migration.Contracts.GetSkuRecommendationsResult})">
            <summary>
            Handle request to generate SKU recommendations
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.MigrationService.Dispose">
            <summary>
            Disposes the Migration Service
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Migration.SqlDataQueryController">
            <summary>
            Controller to manage the collection, aggregation, and persistence of SQL performance and static data for SKU recommendation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.SqlDataQueryController.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,Microsoft.SqlServer.DataCollection.Common.Contracts.ErrorHandling.ISqlAssessmentLogger)">
            <summary>
            Create a new SqlDataQueryController.
            </summary>
            <param name="connectionString">SQL connection string</param>
            <param name="outputFolder">Output folder to save results to</param>
            <param name="perfQueryIntervalInSec">Interval, in seconds, at which perf counters are collected</param>
            <param name="numberOfIterations">Number of iterations of perf counter collection before aggreagtion</param>
            <param name="staticQueryIntervalInSec">Interval, in seconds, at which static/common counters are colltected</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.SqlDataQueryController.Start">
            <summary>
            Start this SqlDataQueryController.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.SqlDataQueryController.IsRunning">
            <summary>
            Returns whether or not this SqlDataQueryController is currently running.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.SqlDataQueryController.PerfDataQueryEvent">
            <summary>
            Collect performance data, adding the collected points to the cache.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.SqlDataQueryController.PerfDataAggregateAndPersistEvent">
            <summary>
            Aggregate and persist the cached points, saving the aggregated points to disk.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.SqlDataQueryController.StaticDataQueryAndPersistEvent">
            <summary>
            Collect and persist static data, saving the collected points to disk.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.SqlDataQueryController.Logging(System.Exception)">
            <summary>
            Log exceptions to file.
            </summary>
            <param name="ex">Exception to log</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.SqlDataQueryController.Logging(Microsoft.SqlServer.DataCollection.Common.Contracts.ErrorHandling.IErrorModel)">
            <summary>
            Log errors to file.
            </summary>
            <param name="error">Error to log</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.SqlDataQueryController.FetchLatestMessages(System.DateTime)">
            <summary>
            Fetches the latest messages, and then clears the message list.
            </summary>
            <param name="startTime">Only return messages from after this time</param>
            <returns>List of queued messages</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.SqlDataQueryController.FetchLatestErrors(System.DateTime)">
            <summary>
            Fetches the latest messages, and then clears the message list.
            </summary>
            <param name="startTime">Only return messages from after this time</param>
            <returns>List of queued errors</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.SqlDataQueryController.Dispose">
            <summary>
            Dispose of this SqlDataQueryController.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Migration.SqlPerfDataPointsCache">
            <summary>
            Cache to store intermediate SQL performance data before it is aggregated and persisted for SKU recommendation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.SqlPerfDataPointsCache.#ctor(System.String,Microsoft.SqlServer.DataCollection.Common.Contracts.ErrorHandling.ISqlAssessmentLogger)">
            <summary>
            Create a new SqlPerfDataPointsCache.
            </summary>
            <param name="outputFolder">Output folder to save results to</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.SqlPerfDataPointsCache.AddingPerfData(System.Collections.Generic.IList{Microsoft.SqlServer.DataCollection.Common.Contracts.SqlQueries.ISqlPerfDataPoints})">
            <summary>
            Add the collected data points to the cache.
            </summary>
            <param name="result">Collected data points</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.SqlPerfDataPointsCache.GetRawDataPointsCount">
            <summary>
            Return the number of raw data points.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.SqlPerfDataPointsCache.GetAggregatedDataPointsCount">
            <summary>
            Return the number of aggregated data points.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.SqlPerfDataPointsCache.AggregatingPerfData">
            <summary>
            Aggregate the cached data points.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Migration.SqlPerfDataPointsCache.PersistingCacheAsCsv">
            <summary>
            Save the cached and aggregated data points to disk.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.ConfigureModelTableResponseParams">
            <summary>
            Response class for get model
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.ConfigureModelTableRequest">
            <summary>
            Request class to get models
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.DeleteModelRequestParams.ModelId">
            <summary>
            Model id
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.DeleteModelResponseParams">
            <summary>
            Response class for delete model
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.DeleteModelRequest">
            <summary>
            Request class to delete a model
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.DownloadModelRequestParams.ModelId">
            <summary>
            Model id
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.DownloadModelResponseParams">
            <summary>
            Response class for import model
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.DownloadModelResponseParams.FilePath">
            <summary>
            Downloaded file path
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.DownloadModelRequest">
            <summary>
            Request class to delete a model
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.GetModelsResponseParams">
            <summary>
            Response class for get model
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.GetModelsRequest">
            <summary>
            Request class to get models
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.ImportModelRequestParams.Model">
            <summary>
            Model metadata
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.ImportModelResponseParams">
            <summary>
            Response class for import model
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.ImportModelRequest">
            <summary>
            Request class to import a model
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.ModelRequestBase.DatabaseName">
            <summary>
            Models database name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.ModelRequestBase.SchemaName">
            <summary>
            The schema for model table
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.ModelRequestBase.TableName">
            <summary>
            Models table name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.ModelRequestBase.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.UpdateModelResponseParams">
            <summary>
            Response class for import model
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.UpdateModelRequest">
            <summary>
            Request class to import a model
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.VerifyModelTableResponseParams">
            <summary>
            Response class for verify model table
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.VerifyModelTableResponseParams.Verified">
            <summary>
            Specified is model table is verified
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.VerifyModelTableRequest">
            <summary>
            Request class to verify model table
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelMetadata">
            <summary>
            Model metadata
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelMetadata.Id">
            <summary>
            Model id
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelMetadata.ContentLength">
            <summary>
            Model content length
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelMetadata.ModelName">
            <summary>
            Model name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelMetadata.Created">
            <summary>
            Model created date
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelMetadata.DeploymentTime">
            <summary>
            Model deployment time
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelMetadata.Version">
            <summary>
            Model version
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelMetadata.Description">
            <summary>
            Model description
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelMetadata.FilePath">
            <summary>
            Model file path
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelMetadata.Framework">
            <summary>
            Model framework
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelMetadata.FrameworkVersion">
            <summary>
            Model framework version
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelMetadata.RunId">
            <summary>
            Model run id
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelMetadata.DeployedBy">
            <summary>
            Model deploy by
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelManagementService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelManagementService.ConnectionServiceInstance">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelManagementService.HandleModelImportRequest(Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.ImportModelRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.ImportModelResponseParams})">
            <summary>
            Handles import model request
            </summary>
            <param name="parameters">Request parameters</param>
            <param name="requestContext">Request Context</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelManagementService.HandleGetModelsRequest(Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.GetModelsRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.GetModelsResponseParams})">
            <summary>
            Handles get models request
            </summary>
            <param name="parameters">Request parameters</param>
            <param name="requestContext">Request Context</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelManagementService.HandleUpdateModelRequest(Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.UpdateModelRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.UpdateModelResponseParams})">
            <summary>
            Handles update model request
            </summary>
            <param name="parameters">Request parameters</param>
            <param name="requestContext">Request Context</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelManagementService.HandleDeleteModelRequest(Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.DeleteModelRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.DeleteModelResponseParams})">
            <summary>
            Handles delete model request
            </summary>
            <param name="parameters">Request parameters</param>
            <param name="requestContext">Request Context</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelManagementService.HandleDownloadModelRequest(Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.DownloadModelRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.DownloadModelResponseParams})">
            <summary>
            Handles download model request
            </summary>
            <param name="parameters">Request parameters</param>
            <param name="requestContext">Request Context</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelManagementService.HandleVerifyModelTableRequest(Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.VerifyModelTableRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.VerifyModelTableResponseParams})">
            <summary>
            Handles verify model table request
            </summary>
            <param name="parameters">Request parameters</param>
            <param name="requestContext">Request Context</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelManagementService.HandleConfigureModelTableRequest(Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.ConfigureModelTableRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.ConfigureModelTableResponseParams})">
            <summary>
            Handles configure model table request
            </summary>
            <param name="parameters">Request parameters</param>
            <param name="requestContext">Request Context</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelOperations.GetModels(System.Data.IDbConnection,Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.ModelRequestBase)">
            <summary>
            Returns models from given table 
            </summary>
            <param name="connection">Db connection</param>
            <param name="request">model request</param>
            <returns>Models</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelOperations.DownloadModel(System.Data.IDbConnection,Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.DownloadModelRequestParams)">
            <summary>
            Downlaods model content into a temp file and returns the file path
            </summary>
            <param name="connection">Db connection</param>
            <param name="request">model request</param>
            <returns>Model file path</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelOperations.ImportModel(System.Data.IDbConnection,Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.ImportModelRequestParams)">
            <summary>
            Import model to given table 
            </summary>
            <param name="connection">Db connection</param>
            <param name="request">model request</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelOperations.UpdateModel(System.Data.IDbConnection,Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.UpdateModelRequestParams)">
            <summary>
            Updates model 
            </summary>
            <param name="connection">Db connection</param>
            <param name="request">model request</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelOperations.DeleteModel(System.Data.IDbConnection,Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.DeleteModelRequestParams)">
            <summary>
            Deletes a model from the given table 
            </summary>
            <param name="connection">Db connection</param>
            <param name="request">model request</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelOperations.ConfigureImportTable(System.Data.IDbConnection,Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.ModelRequestBase)">
            <summary>
            Configures model table
            </summary>
            <param name="connection">Db connection</param>
            <param name="request">model request</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ModelManagement.ModelOperations.VerifyImportTable(System.Data.IDbConnection,Microsoft.SqlTools.ServiceLayer.ModelManagement.Contracts.ModelRequestBase)">
            <summary>
            Verifies model table 
            </summary>
            <param name="connection">Db connection</param>
            <param name="request">model request</param>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.NotebookConvert.Contracts.ConvertNotebookToSqlParams.Content">
            <summary>
            The raw Notebook JSON content to convert
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.NotebookConvert.Contracts.ConvertNotebookToSqlResult.Content">
            <summary>
            The raw SQL query content to display
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.NotebookConvert.Contracts.ConvertSqlToNotebookParams.ClientUri">
            <summary>
            The ClientUri of the SQL Query file we're converting
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.NotebookConvert.Contracts.ConvertSqlToNotebookResult">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.NotebookConvert.Contracts.ConvertSqlToNotebookResult.Content">
            <summary>
            The raw Notebook JSON content to display
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.NotebookConvert.NotebookDocument">
            <summary>
            Basic schema wrapper for parsing a Notebook document
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.NotebookConvert.NotebookCell">
            <summary>
            Cell of a Notebook document
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.NotebookConvert.NotebookConvertService">
            <summary>
            Main class for Notebook Convert Service
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.NotebookConvert.NotebookConvertService.ServiceHost">
            <summary>
            Service host object for sending/receiving requests/events.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.NotebookConvert.NotebookConvertService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the service by doing tasks such as setting up request handlers.
            </summary>
            <param name="serviceHost"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.NotebookConvert.NotebookConvertService.ConvertNotebookDocToSql(Microsoft.SqlTools.ServiceLayer.NotebookConvert.NotebookDocument)">
            <summary>
            Converts a Notebook document into a single string that can be inserted into a SQL
            query.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CloseSessionResponse">
            <summary>
            Information returned from a <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CloseSessionRequest"/>.
            Contains success information, a <see cref="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CloseSessionResponse.SessionId"/> to be used when
            requesting closing an existing session.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CloseSessionResponse.Success">
            <summary>
            Boolean indicating if the session was closed successfully 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CloseSessionResponse.SessionId">
            <summary>
            Unique ID to use when sending any requests for objects in the
            tree under the node
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CloseSessionParams">
            <summary>
            Parameters to the <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CloseSessionRequest"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CloseSessionParams.SessionId">
            <summary>
            The Id returned from a <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CreateSessionRequest"/>. This
            is used to disambiguate between different trees. 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.SessionDisconnectedParameters">
            <summary>
            Information returned when a session is disconnected.
            Contains success information and a <see cref="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.SessionDisconnectedParameters.SessionId"/>
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.SessionDisconnectedParameters.Success">
            <summary>
            Boolean indicating if the connection was successful
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.SessionDisconnectedParameters.SessionId">
            <summary>
            Unique ID to use when sending any requests for objects in the
            tree under the node
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.SessionDisconnectedParameters.ErrorMessage">
            <summary>
            Error message returned from the engine for a object explorer session failure reason, if any.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CloseSessionRequest">
            <summary>
            Establishes an Object Explorer tree session for a specific connection.
            This will create a connection to a specific server or database, register
            it for use in the 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.SessionDisconnectedNotification">
            <summary>
            Session disconnected notification
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CreateSessionResponse">
            <summary>
            Information returned from a <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CreateSessionRequest"/>.
            Contains success information, a <see cref="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CreateSessionResponse.SessionId"/> to be used when
            requesting expansion of nodes, and a root node to display for this area.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CreateSessionResponse.SessionId">
            <summary>
            Unique ID to use when sending any requests for objects in the
            tree under the node
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.SessionCreatedParameters">
            <summary>
            Information returned from a <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CreateSessionRequest"/>.
            Contains success information, a <see cref="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.SessionCreatedParameters.SessionId"/> to be used when
            requesting expansion of nodes, and a root node to display for this area.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.SessionCreatedParameters.Success">
            <summary>
            Boolean indicating if the connection was successful
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.SessionCreatedParameters.SessionId">
            <summary>
            Unique ID to use when sending any requests for objects in the
            tree under the node
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.SessionCreatedParameters.RootNode">
            <summary>
            Information describing the base node in the tree
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.SessionCreatedParameters.ErrorMessage">
            <summary>
            Error message returned from the engine for a object explorer session failure reason, if any.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CreateSessionRequest">
            <summary>
            Establishes an Object Explorer tree session for a specific connection.
            This will create a connection to a specific server or database, register
            it for use in the 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CreateSessionCompleteNotification">
            <summary>
            Session notification mapping entry 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.ExpandResponse">
            <summary>
            Information returned from a <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.ExpandRequest"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.ExpandResponse.SessionId">
            <summary>
            Unique ID to use when sending any requests for objects in the
            tree under the node
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.ExpandResponse.Nodes">
            <summary>
            Information describing the expanded nodes in the tree
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.ExpandResponse.NodePath">
            <summary>
            Path identifying the node to expand. See <see cref="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.NodeInfo.NodePath"/> for details
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.ExpandResponse.ErrorMessage">
            <summary>
            Error message returned from the engine for a object explorer expand failure reason, if any.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.ExpandParams">
            <summary>
            Parameters to the <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.ExpandRequest"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.ExpandParams.SessionId">
            <summary>
            The Id returned from a <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CreateSessionRequest"/>. This
            is used to disambiguate between different trees. 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.ExpandParams.NodePath">
            <summary>
            Path identifying the node to expand. See <see cref="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.NodeInfo.NodePath"/> for details
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.ExpandRequest">
            <summary>
            A request to expand a 
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.ExpandRequest.Type">
            <summary>
            Returns children of a given node as a <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.NodeInfo"/> array.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.ExpandCompleteNotification">
            <summary>
            Expand notification mapping entry 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.FindNodesResponse">
            <summary>
            Information returned from a <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.FindNodesRequest"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.FindNodesResponse.Nodes">
            <summary>
            Information describing the matching nodes in the tree
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.FindNodesParams">
            <summary>
            Parameters to the <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.FindNodesRequest"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.FindNodesParams.SessionId">
            <summary>
            The Id returned from a <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.CreateSessionRequest"/>. This
            is used to disambiguate between different trees. 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.FindNodesRequest">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.NodeInfo">
            <summary>
            Information describing a Node in the Object Explorer tree. 
            Contains information required to display the Node to the user and
            to know whether actions such as expanding children is possible
            the node 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.NodeInfo.NodePath">
            <summary>
            Path identifying this node: for example a table will be at ["server", "database", "tables", "tableName"].
            This enables rapid navigation of the tree without the need for a global registry of elements.
            The path functions as a unique ID and is used to disambiguate the node when sending requests for expansion.
            A common ID is needed since processes do not share address space and need a unique identifier
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.NodeInfo.NodeType">
            <summary>
            The type of the node - for example Server, Database, Folder, Table
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.NodeInfo.Label">
            <summary>
            Label to display to the user, describing this node.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.NodeInfo.NodeSubType">
            <summary>
            Node Sub type - for example a key can have type as "Key" and sub type as "PrimaryKey"
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.NodeInfo.NodeStatus">
            <summary>
            Node status - for example login can be disabled/enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.NodeInfo.IsLeaf">
            <summary>
            Is this a leaf node (in which case no children can be generated) or
            is it expandable?
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.NodeInfo.Metadata">
            <summary>
            Object Metadata for smo objects to be used for scripting
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.NodeInfo.ErrorMessage">
            <summary>
            Error message returned from the engine for a object explorer node failure reason, if any.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.NodeInfo.ObjectType">
            <summary>
            The object type of the node. e.g. Database, Server, Tables...
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.RefreshParams">
            <summary>
            Parameters to the <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.ExpandRequest"/>.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.RefreshRequest">
            <summary>
            A request to expand a 
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.RefreshRequest.Type">
            <summary>
            Returns children of a given node as a <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.NodeInfo"/> array.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.ChildFactory">
            <summary>
            A <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.ChildFactory"/> supports creation of <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode"/> children
            for a class of objects in the tree. The 
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.ChildFactory.ApplicableParents">
            <summary>
            The set of applicable parents for which the factory can create children.
            </summary>
            <returns>
            the string names for each <see cref="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.NodeType"/> that 
            this factory can create children for
            </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.ChildFactory.Expand(Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode,System.Boolean,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Expands an element in the 
            </summary>
            <param name="parent">Parent Node</param>
            <param name="refresh">force to refresh</param>
            <param name="refresh">name of the sql object to filter</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.ChildFactory.Filters">
            <summary>
            The list of filters that should be applied on the smo object list
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.ChildFactory.SmoProperties">
            <summary>
            The list of properties to be loaded with the object
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.ChildFactory.GetNodeSubType(System.Object,Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext)">
            <summary>
            Returns the node sub type if the object can have sub types otehr wise returns empty string
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.ChildFactory.GetNodeStatus(System.Object,Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext)">
            <summary>
            Returns the status of the object assigned to node. If the object doesn't spport status returns empty string
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.ChildFactory.GetNodeCustomName(System.Object,Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext)">
            <summary>
            Returns the custom name of the object assigned to the node. If the object doesn't have custom name, returns empty string
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.ChildFactory.GetNodePathName(System.Object)">
            <summary>
            Returns the name of the object as shown in its Object Explorer node path
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.INodeFilter">
            <summary>
            Has information for filtering a SMO object by properties 
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.INodeFilter.CanApplyFilter(System.Type,Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ValidForFlag)">
            <summary>
            Returns true if the filter can be apply to the given type and Server type
            </summary>
            <param name="type">Type of the querier</param>
            <param name="validForFlag">Server Type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.INodeFilter.ToPropertyFilterString(System.Type,Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ValidForFlag)">
            <summary>
            Creates a string from the filter property and values to be used in the Urn to query the SQL objects
            Example of the output:[@ IsSystemObject = 0]
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.INodeFilter.GetPropertyFilter(System.Collections.Generic.IEnumerable{Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.INodeFilter},System.Type,Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ValidForFlag)">
            <summary>
            Creates a fully paramaterized property filter string for the URN query for SQL objects.
            Example of the output:[@ IsSystemObject = 0]
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodeObservableCollection">
            <summary>
            A collection class for <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode"/>
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodeObservableCollection.ReSortChild(Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode)">
            <summary>
            Repositions this child in the list
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodeOrFilter">
            <summary>
            Has information for filtering a SMO object by properties 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodeOrFilter.FilterList">
            <summary>
            Filter values
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodeOrFilter.CanApplyFilter(System.Type,Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ValidForFlag)">
            <summary>
            Returns true if any of the filters within the FilterList apply to the type and server type.
            </summary>
            <param name="type">Type of the querier</param>
            <param name="validForFlag">Server Type</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodeOrFilter.ToPropertyFilterString(System.Type,Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ValidForFlag)">
            <summary>
            Creates a string representation of a node "or" filter, which is combined in the INodeFilter interface to construct the filter used in the URN to query the SQL objects.
            Example of the output: ((@TableTemporalType = 1) or (@LedgerTableType = 1))
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodePropertyFilter">
            <summary>
            Has information for filtering a SMO object by properties 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodePropertyFilter.Property">
            <summary>
            Property name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodePropertyFilter.Values">
            <summary>
            Filter values
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodePropertyFilter.Type">
            <summary>
            Type of the filter values
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodePropertyFilter.ValidFor">
            <summary>
            Indicates which platforms a filter is valid for
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodePropertyFilter.TypeToReverse">
            <summary>
            The type of the Querier the filter can be applied to
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodePropertyFilter.CanApplyFilter(System.Type,Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ValidForFlag)">
            <summary>
            Returns true if the filter can be apply to the given type and Server type
            </summary>
            <param name="type">Type of the querier</param>
            <param name="validForFlag">Server Type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodePropertyFilter.ToPropertyFilterString(System.Type,Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ValidForFlag)">
            <summary>
            Creates a string representation of a given node filter, which is combined in the INodeFilter interface to construct the filter used in the URN to query the SQL objects.
            Example of the output: (@ IsSystemObject = 0)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodeSmoProperty">
            <summary>
            Has information for SMO object properties to be loaded with the SMO object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodeSmoProperty.Name">
            <summary>
            Property name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodeSmoProperty.ValidFor">
            <summary>
            Indicates which platforms a filter is valid for
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.NodeTypes">
            <summary>
            Enum listing possible node types in the object explorer tree
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode">
            <summary>
            Base class for elements in the object explorer tree. Provides common methods for tree navigation
            and other core functionality
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.#ctor">
            <summary>
            Constructor with no required inputs
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.#ctor(System.String)">
            <summary>
            Constructor that accepts a label to identify the node
            </summary>
            <param name="value">Label identifying the node</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.BuildingMetadataLock">
            <summary>
            Event which tells if MetadataProvider is built fully or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.NodeValue">
            <summary>
            Value describing this node
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.NodePathName">
            <summary>
            The name of this object as included in its node path
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.ObjectMetadata">
            <summary>
            Object metadata for smo objects
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.NodeType">
            <summary>
            The type of the node - for example Server, Database, Folder, Table
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.IsSystemObject" -->
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.NodeTypeId">
            <summary>
            Enum defining the type of the node - for example Server, Database, Folder, Table
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.NodeSubType">
            <summary>
            Node Sub type - for example a key can have type as "Key" and sub type as "PrimaryKey"
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.ErrorMessage">
            <summary>
            Error message returned from the engine for a object explorer node failure reason, if any.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.NodeStatus">
            <summary>
            Node status - for example login can be disabled/enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.Label">
            <summary>
            Label to display to the user, describing this node.
            If not explicitly set this will fall back to the <see cref="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.NodeValue"/> but
            for many nodes such as the server, the display label will be different
            to the value.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.IsAlwaysLeaf">
            <summary>
            Is this a leaf node (in which case no children can be generated) or
            is it expandable?
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.ErrorStateMessage">
            <summary>
            Message to show if this Node is in an error state. This indicates
            that children could be retrieved
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.Parent">
            <summary>
            Parent of this node
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.GetNodePath">
            <summary>
            Path identifying this node: for example a table will be at ["server", "database", "tables", "tableName"].
            This enables rapid navigation of the tree without the need for a global registry of elements.
            The path functions as a unique ID and is used to disambiguate the node when sending requests for expansion.
            A common ID is needed since processes do not share address space and need a unique identifier
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.ToNodeInfo">
            <summary>
            Converts to a <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Contracts.NodeInfo"/> object for serialization with just the relevant properties 
            needed to identify the node
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.Expand(System.String,System.Threading.CancellationToken)">
            <summary>
            Expands this node and returns its children
            </summary>
            <returns>Children as an IList. This is the raw children collection, not a copy</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.Expand(System.Threading.CancellationToken)">
            <summary>
            Expands this node and returns its children
            </summary>
            <returns>Children as an IList. This is the raw children collection, not a copy</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.Refresh(System.Threading.CancellationToken)">
            <summary>
            Refresh this node and returns its children
            </summary>
            <returns>Children as an IList. This is the raw children collection, not a copy</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.GetChildren">
            <summary>
            Gets a readonly view of the currently defined children for this node. 
            This does not expand the node at all
            Since the tree needs to keep track of parent relationships, directly 
            adding to the list is not supported. 
            </summary>
            <returns><see cref="T:System.Collections.Generic.IList`1"/> containing all children for this node</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.AddChild(Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode)">
            <summary>
            Adds a child to the list of children under this node
            </summary>
            <param name="newChild"><see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode"/></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.GetContext">
            <summary>
            Optional context to help with lookup of children
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.GetContextAs``1">
            <summary>
            Helper method to convert context to expected format
            </summary>
            <typeparam name="T">Type to convert to</typeparam>
            <returns>context as expected type of null if it doesn't match</returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode.SortPriority">
            <summary>
            Sort Priority to help when ordering elements in the tree
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerService">
            <summary>
            A Service to support querying server and database information as an Object Explorer tree.
            The APIs used for this are modeled closely on the VSCode TreeExplorerNodeProvider API.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerService.settings">
            <summary>
            This timeout limits the amount of time that object explorer tasks can take to complete
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerService.#ctor">
            <summary>
            Singleton constructor
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerService.SessionIds">
            <summary>
            Returns the session ids
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerService.SetServiceProvider(Microsoft.SqlTools.Extensibility.IMultiServiceProvider)">
            <summary>
            As an <see cref="T:Microsoft.SqlTools.Extensibility.IComposableService"/>, this will be set whenever the service is initialized
            via an <see cref="T:Microsoft.SqlTools.Extensibility.IMultiServiceProvider"/>
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerService.InitializeService(Microsoft.SqlTools.Hosting.Protocol.IProtocolEndpoint)">
            <summary>
            Initializes the service with the service host and registers request handlers.
            </summary>
            <param name="serviceHost">The service host instance to register with</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerService.WorkspaceService">
            <summary>
            Gets the workspace service. Note: should handle case where this is null in cases where unit tests do not set this up
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerService.HandleDidChangeConfigurationNotification(Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings,Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings,Microsoft.SqlTools.Hosting.Protocol.EventContext)">
            <summary>
            Ensure formatter settings are always up to date
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerService.CreateSessionTask">
            <summary>
            For tests only
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerService.DoCreateSession(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails,System.String)">
            <summary>
            Establishes a new session and stores its information
            </summary>
            <returns><see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerService.ObjectExplorerSession"/> object if successful, null if unsuccessful</returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerService.ExpandTask">
            <summary>
            For tests only
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerService.GenerateUri(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectionDetails)">
            <summary>
            Generates a URI for object explorer using a similar pattern to Mongo DB (which has URI-based database definition)
            as this should ensure uniqueness
            </summary>
            <param name="details"></param>
            <returns>string representing a URI</returns>
            <remarks>Internal for testing purposes only</remarks>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerService.FindNodes(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Find all tree nodes matching the given node information
            </summary>
            <param name="sessionId">The ID of the object explorer session to find nodes for</param>
            <param name="typeName">The requested node type</param>
            <param name="schema">The schema for the requested object, or null if not applicable</param>
            <param name="name">The name of the requested object</param>
            <param name="databaseName">The name of the database containing the requested object, or null if not applicable</param>
            <param name="parentNames">The name of any other parent objects in the object explorer tree, from highest in the tree to lowest</param>
            <returns>A list of nodes matching the given information, or an empty list if no nodes match</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerUtils">
            <summary>
            Utility class for Object Explorer related operations
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerUtils.VisitChildAndParents(Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode,System.Predicate{Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode})">
            <summary>
            Visitor that walks all nodes from the child to the root node, unless the 
            <paramref name="visitor"/> function indicates that this should stop traversing
            </summary>
            <param name="child">node to start traversing at</param>
            <param name="visitor">Predicate function that accesses the tree and
            determines whether to stop going further up the tree</param>
            <returns>
            boolean - true to continue navigating up the tree, false to end the loop
            and return early
            </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerUtils.FindNode(Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode,System.Predicate{Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode},System.Predicate{Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode},System.Boolean)">
            <summary>
            Finds a node by traversing the tree starting from the given node through all the children
            </summary>
            <param name="node">node to start traversing at</param>
            <param name="condition">Predicate function that accesses the tree and
            determines whether to stop going further up the tree</param>
            <param name="filter">Predicate function to filter the children when traversing</param>
            <returns>A Tree Node that matches the condition</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.DatabaseTreeNode.EnsureContextInitialized">
            <summary>
            Initializes the context and sets its ValidFor property 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.FolderNode">
            <summary>
            Represents a folder node in the tree
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.FolderNode.GetContext">
            <summary>
            For folders, this copies the context of its parent if available
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.FolderNode.GetParentSmoObject">
            <summary>
            For folders, searches for its parent's SMO object rather than copying for itself
            </summary>
            <returns><see cref="T:Microsoft.SqlServer.Management.Smo.NamedSmoObject"/> from this parent's parent, or null if not found</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.ServerNode">
            <summary>
            Server node implementation 
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.ServerNode.GetConnectionLabel">
            <summary>
            Returns the label to display to the user.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoChildFactoryBase.OnExpandPopulateFolders(System.Collections.Generic.IList{Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode},Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode)">
            <summary>
            Populates any folders for a given parent node 
            </summary>
            <param name="allChildren">List to which nodes should be added</param>
            <param name="parent">Parent the nodes are being added to</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoChildFactoryBase.OnExpandPopulateNonFolders(System.Collections.Generic.IList{Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode},Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Populates any non-folder nodes such as specific items in the tree.
            </summary>
            <param name="allChildren">List to which nodes should be added</param>
            <param name="parent">Parent the nodes are being added to</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoChildFactoryBase.RemoveFoldersFromInvalidSqlServerVersions(System.Collections.Generic.IList{Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode},Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode)">
            <summary>
            Filters out invalid folders if they cannot be displayed for the current server version
            </summary>
            <param name="allChildren">List to which nodes should be added</param>
            <param name="parent">Parent the nodes are being added to</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoChildFactoryBase.PassesFinalFilters(Microsoft.SqlTools.ServiceLayer.ObjectExplorer.Nodes.TreeNode,System.Object)">
            <summary>
            Returns true if any final validation of the object to be added passes, and false
            if validation fails. This provides a chance to filter specific items out of a list 
            </summary>
            <param name="parent"></param>
            <param name="contextObject"></param>
            <returns>boolean</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoCollectionWrapper`1">
            <summary>
            Wrapper to convert non-generic Smo enumerables to generic enumerable types for easier use in 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoCollectionWrapper`1.#ctor(Microsoft.SqlServer.Management.Smo.SmoCollectionBase)">
            <summary>
            Constructor which accepts a <see cref="T:Microsoft.SqlServer.Management.Smo.SmoCollectionBase"/> containing the objects
            to wrap 
            </summary>
            <param name="collection"><see cref="T:Microsoft.SqlServer.Management.Smo.SmoCollectionBase"/> or null if none were set</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoCollectionWrapper`1.GetEnumerator">
            <summary>
            <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoCollectionWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.ColumnsChildFactory">
            <summary>
            Custom name for Columns
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.UserDefinedTableTypeColumnsChildFactory">
            <summary>
            Custom name for UserDefinedTableTypeColumn
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.DatabasesChildFactory">
            <summary>
            Status for databases
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.KeysChildFactory">
            <summary>
            Subtye for keys
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.IndexesChildFactory">
            <summary>
            Sub types and custom name for indexes
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.UserDefinedTableTypeKeysChildFactory">
            <summary>
            sub type for UserDefinedTableTypeKeys
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.ServerLevelLoginsChildFactory">
            <summary>
            Status for logins
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.TableValuedFunctionParametersChildFactory">
            <summary>
            Custom name for parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.ScalarValuedFunctionParametersChildFactory">
            <summary>
            Custom name for parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.AggregateFunctionParametersChildFactory">
            <summary>
            Custom name for parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.StoredProcedureParametersChildFactory">
            <summary>
            Custom name for parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQuerier">
            <summary>
            A <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQuerier"/> handles SMO queries for one or more SMO object types.
            The <see cref="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQuerier.SupportedObjectTypes"/> property defines which types can be queried.
            
            To query multiple 
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQuerier.Query(Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Queries SMO for a collection of objects using the <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext"/> 
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQuerier.GetDataReader(System.Object)">
            <summary>
            Convert the data to data reader is possible
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQuerier.PassesFinalFilters(Microsoft.SqlServer.Management.Smo.SqlSmoObject,Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Mthod used to do custom filtering on smo objects if cannot be implemented using the filters
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQuerier.IsValidFor(Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ValidForFlag)">
            <summary>
            Returns true if the querier is valid for the given server version
            </summary>
            <param name="serverValidFor"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQuerier.ValidFor">
            <summary>
            Indicates which platforms the querier is valid for
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext">
            <summary>
            Context object containing key properties needed to query for SMO objects
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext.#ctor(Microsoft.SqlServer.Management.Smo.Server,Microsoft.SqlTools.Extensibility.IMultiServiceProvider)">
            <summary>
            Creates a context object with a server to use as the basis for any queries
            </summary>
            <param name="server"></param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext.SqlServerType">
            <summary>
            The server type 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext.Server">
            <summary>
            The server SMO will query against
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext.Database">
            <summary>
            Optional Database context object to query against
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext.Parent">
            <summary>
            Parent of a give node to use for queries
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext.ServiceProvider">
            <summary>
            A query loader that can be used to find <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQuerier"/> objects
            for specific SMO types
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext.ParentAs``1">
            <summary>
            Helper method to cast a parent to a specific type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext.GetObjectExplorerService">
            <summary>
            Gets the <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerService"/> if available, by looking it up
            from the <see cref="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext.ServiceProvider"/>
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the <see cref="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext.ServiceProvider"/> is not set or the <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ObjectExplorerService"/>
            isn't available from that provider
            </exception>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext.CopyWithParent(Microsoft.SqlServer.Management.Smo.SmoObjectBase)">
            <summary>
            Copies the context for use by another node
            </summary>
            <param name="parent">New Parent to set</param>
            <returns>new <see cref="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext"/> with all fields except <see cref="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext.Parent"/> the same</returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext.ValidFor">
            <summary>
            Indicates which platforms the server and database is valid for
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoQueryContext.EnsureConnectionOpen(Microsoft.SqlServer.Management.Smo.SmoObjectBase)">
            <summary>
            Ensures the server objects connection context is open. This is used by all child objects, and 
            the only way to easily access is via the server object. This should be called during access of
            any of the object properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SqlHistoryTableQuerier">
            <summary>
            Filters the history tables to only return ones related to the parent table
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.TablesChildFactory">
            <summary>
            Custom name for table
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.TableChildFactory">
            <summary>
            Custom name and icon for history table
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.DroppedLedgerTablesChildFactory">
            <summary>
            Custom name and icon for dropped ledger tables
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoTreeNode">
            <summary>
            A Node in the tree representing a SMO-based object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoTreeNode.IsMsShippedOwned">
            <summary>
            Is this a system (MSShipped) object?
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoTreeNode.ValidFor">
            <summary>
            Indicates which platforms a node is valid for
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoTreeNode.NextSortPriority">
            <summary>
            Gets an incrementing sort priority value to assist in automatically sorting
            elements in a tree
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.ViewsChildFactory">
            <summary>
            Custom name for view
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.TriggersChildFactory">
            <summary>
            Status for triggers
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.DroppedLedgerViewsChildFactory">
            <summary>
            Custom name for dropped ledger views
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.UsersChildFactory">
            <summary>
            Status for logins
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoWrapper">
            <summary>
            Internal for testing purposes only. This class provides wrapper functionality
            over SMO objects in order to facilitate unit testing
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SqlServerType">
            <summary>
            Server Types
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ServerVersionHelper">
            <summary>
            Includes helper functions for server version and type
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ServerVersionHelper.GetValidForFlag(Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SqlServerType,Microsoft.SqlServer.Management.Smo.Database)">
            <summary>
            Converts a server type to ValidForFlag
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ServerVersionHelper.IsValidFor(Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ValidForFlag,Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ValidForFlag)">
            <summary>
            Returns true if the given valid for flag is not set or it includes the server version
            </summary>
            <param name="serverVersion">Server version</param>
            <param name="validFor">Valid for flag</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ServerVersionHelper.GetValidForFlag(Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SqlServerType,System.Boolean)">
            <summary>
            Converts a server type to ValidForFlag
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ServerVersionHelper.CalculateServerType(Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ServerInfo)">
            <summary>
            Creates a server type from the server version
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.ValidForFlag">
            <summary>
            Indicates which type of server a given node type is valid for
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.CreateXEventSessionParams">
            <summary>
            Start Profiling request parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.CreateXEventSessionRequest">
            <summary>
            Start Profile request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.CreateXEventSessionRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.DisconnectSessionParams">
            <summary>
            Disconnect Session request parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.DisconnectSessionRequest">
            <summary>
            Disconnect session request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.DisconnectSessionRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.GetXEventSessionsParams">
            <summary>
            Start Profiling request parameters
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.GetXEventSessionsResult.Sessions">
            <summary>
            Session ID that was started
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.GetXEventSessionsRequest">
            <summary>
            Start Profile request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.GetXEventSessionsRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.PauseProfilingParams">
            <summary>
            Pause Profiling request parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.PauseProfilingRequest">
            <summary>
            Pause Profile request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.PauseProfilingRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerEvent">
            <summary>
            Class that contains data for a single profile event
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerEvent.#ctor(System.String,System.String)">
            <summary>
            Initialize a new ProfilerEvent with required parameters
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerEvent.Name">
            <summary>
            Profiler event name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerEvent.Timestamp">
            <summary>
            Profiler event timestamp
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerEvent.Values">
            <summary>
            Profiler event values collection
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerEvent.Equals(Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerEvent)">
            <summary>
            Equals method
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerEvent.GetHashCode">
            <summary>
            GetHashCode method
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerSessionTemplate">
            <summary>
            Class that contains data for a single profile event
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerSessionTemplate.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialize a new ProfilerEvent with required parameters
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerSessionTemplate.Name">
            <summary>
            Profiler event name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerSessionTemplate.DefaultView">
            <summary>
            Profiler event timestamp
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerSessionTemplate.CreateStatement">
            <summary>
            Profiler event timestamp
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerSessionTemplate.Equals(Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerSessionTemplate)">
            <summary>
            Equals method
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.StartProfilingParams">
            <summary>
            Start Profiling request parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.StartProfilingRequest">
            <summary>
            Start Profile request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.StartProfilingRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.StopProfilingParams">
            <summary>
            Stop Profiling request parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.StopProfilingRequest">
            <summary>
            Start Profile request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.StopProfilingRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.IProfilerSessionMonitor">
            <summary>
            Profiler session monitor interface
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.IProfilerSessionMonitor.StartMonitoringSession(System.String,Microsoft.SqlTools.ServiceLayer.Profiler.IXEventSession)">
            <summary>
            Starts monitoring a profiler session
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.IProfilerSessionMonitor.StopMonitoringSession(System.String,Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSession@)">
            <summary>
            Stops monitoring a profiler session
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.IProfilerSessionMonitor.PauseViewer(System.String)">
            <summary>
            Pauses or Unpauses the stream of events to the viewer
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.IXEventSession">
            <summary>
            Main class for Profiler Service functionality
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.IXEventSession.Id">
            <summary>
            Gets unique XEvent session Id
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.IXEventSession.Start">
            <summary>
            Starts XEvent session
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.IXEventSession.Stop">
            <summary>
            Stops XEvent session
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.IXEventSession.GetTargetXml">
            <summary>
            Reads XEvent XML from the default session target
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.IXEventSessionFactory">
            <summary>
            Main class for Profiler Service functionality
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.IXEventSessionFactory.GetXEventSession(System.String,Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo)">
            <summary>
            Gets an XEvent session with the given name
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.IXEventSessionFactory.CreateXEventSession(System.String,System.String,Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo)">
            <summary>
            Creates an XEvent session with the given create statement and name
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService">
            <summary>
            Main class for Profiler Service functionality
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.#ctor">
            <summary>
            Construct a new ProfilerService instance with default parameters
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.ConnectionServiceInstance">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.XEventSessionFactory">
            <summary>
            XEvent session factory.  Internal to allow mocking in unit tests.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.SessionMonitor">
            <summary>
            Session monitor instance
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.ServiceHost">
            <summary>
            Service host object for sending/receiving requests/events.
            Internal for testing purposes.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the Profiler Service instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.HandleCreateXEventSessionRequest(Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.CreateXEventSessionParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.CreateXEventSessionResult})">
            <summary>
            Handle request to start a profiling session
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.HandleStartProfilingRequest(Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.StartProfilingParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.StartProfilingResult})">
            <summary>
            Handle request to start a profiling session
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.HandleStopProfilingRequest(Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.StopProfilingParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.StopProfilingResult})">
            <summary>
            Handle request to stop a profiling session
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.HandlePauseProfilingRequest(Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.PauseProfilingParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.PauseProfilingResult})">
            <summary>
            Handle request to pause a profiling session
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.HandleGetXEventSessionsRequest(Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.GetXEventSessionsParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.GetXEventSessionsResult})">
            <summary>
            Handle request to pause a profiling session
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.HandleDisconnectSessionRequest(Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.DisconnectSessionParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.DisconnectSessionResult})">
            <summary>
            Handle request to disconnect a session
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.GetXEventSessionList(System.String,Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo)">
            <summary>
            Gets a list of all running XEvent Sessions
            </summary>
            <returns>
            A list of the names of all running XEvent sessions
            </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.GetXEventSession(System.String,Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo)">
            <summary>
            Gets an XEvent session with the given name per the IXEventSessionFactory contract
            Also starts the session if it isn't currently running
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.CreateXEventSession(System.String,System.String,Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo)">
            <summary>
            Creates and starts an XEvent session with the given name and create statement per the IXEventSessionFactory contract
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.EventsAvailable(System.String,System.Collections.Generic.List{Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerEvent},System.Boolean)">
            <summary>
            Callback when profiler events are available
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.SessionStopped(System.String,System.Int32)">
            <summary>
            Callback when the XEvent session is closed unexpectedly
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.SessionCreatedNotification(System.String,System.String,System.String)">
            <summary>
            Callback when a new session is created
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerService.Dispose">
            <summary>
            Disposes the Profiler Service
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSession">
            <summary>
            Profiler session class
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSession.ConnectionInfo">
            <summary>
            Connection to use for the session
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSession.XEventSession">
            <summary>
            Underlying XEvent session wrapper
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSession.TryEnterPolling">
            <summary>
            Try to set the session into polling mode if criteria is meet
            </summary>
            <returns>True if session set to polling mode, False otherwise</returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSession.IsPolling">
            <summary>
            Is the session currently being polled
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSession.PollingDelay">
            <summary>
            The delay between session polls
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSession.EventsLost">
            <summary>
            Could events have been lost in the last poll
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSession.IsProfilerEvent(Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerEvent)">
            <summary>
            Determine if an event was caused by the XEvent polling queries
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSession.FilterProfilerEvents(System.Collections.Generic.List{Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerEvent})">
            <summary>
            Removed profiler polling events from event list
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSession.FilterOldEvents(System.Collections.Generic.List{Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerEvent})">
            <summary>
            Filter the event list to not include previously seen events,
            and to exclude events that happened before the profiling session began.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSessionMonitor">
            <summary>
            Class to monitor active profiler sessions
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSessionMonitor.AddSessionListener(Microsoft.SqlTools.ServiceLayer.Profiler.IProfilerSessionListener)">
            <summary>
            Registers a session event Listener to receive a callback when events arrive
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSessionMonitor.StartMonitoringSession(System.String,Microsoft.SqlTools.ServiceLayer.Profiler.IXEventSession)">
            <summary>
            Start monitoring the provided session
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSessionMonitor.StopMonitoringSession(System.String,Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSession@)">
            <summary>
            Stop monitoring the session watched by viewerId
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSessionMonitor.PauseViewer(System.String)">
            <summary>
            Toggle the pause state for the viewer
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSessionMonitor.ProcessSessions">
            <summary>
            The core queue processing method
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSessionMonitor.ProcessSession(Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSession)">
            <summary>
            Process a session for new XEvents if it meets the polling criteria
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSessionMonitor.SendStoppedSessionInfoToListeners(System.Int32)">
            <summary>
            Notify listeners about closed sessions
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSessionMonitor.SendEventsToListeners(System.String,System.Collections.Generic.List{Microsoft.SqlTools.ServiceLayer.Profiler.Contracts.ProfilerEvent},System.Boolean)">
            <summary>
            Notify listeners when new profiler events are available
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Profiler.ProfilerSessionMonitor.ParseProfilerEvent(System.Xml.XmlNode)">
            <summary>
            Parse a single event node from XEvent XML
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Profiler.XEventSession">
            <summary>
            Class to access underlying XEvent session.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Program">
            <summary>
            Main application class for SQL Tools API Service Host executable
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Program.Main(System.String[])">
            <summary>
            Main entry point into the SQL Tools API Service Layer
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch">
            <summary>
            This class represents a batch within a query
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.disposed">
            <summary>
            For IDisposable implementation, whether or not this has been disposed
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.executionEndTime">
            <summary>
            Local time when the execution and retrieval of files is finished
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.executionStartTime">
            <summary>
            Local time when the execution starts, specifically when the object is created
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.messagesSent">
            <summary>
            Whether or not any messages have been sent
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.outputFileFactory">
            <summary>
            Factory for creating readers/writers for the output of the batch
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.resultSets">
            <summary>
            Internal representation of the result sets so we can modify internally
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.specialAction">
            <summary>
            Special action which this batch performed 
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.getFullColumnSchema">
            <summary>
            Flag indicating whether a separate KeyInfo query should be run
            to get the full ColumnSchema metadata.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchAsyncEventHandler">
            <summary>
            Asynchronous handler for when batches are completed
            </summary>
            <param name="batch">The batch that completed</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchAsyncMessageHandler">
            <summary>
            Asynchronous handler for when a message is emitted by the sql connection
            </summary>
            <param name="message">The message that was emitted</param>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchCompletion">
            <summary>
            Event that will be called when the batch has completed execution
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchMessageSent">
            <summary>
            Event that will be called when a message has been emitted
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchStart">
            <summary>
            Event to call when the batch has started execution
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSetCompletion">
            <summary>
            Event that will be called when the resultset has completed execution. It will not be
            called from the Batch but from the ResultSet instance.
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSetAvailable">
            <summary>
            Event that will be called when the resultSet first becomes available. This is as soon as we start reading the results. It will not be
            called from the Batch but from the ResultSet instance.
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSetUpdated">
            <summary>
            Event that will be called when additional rows in the result set are available (rowCount available has increased). It will not be
            called from the Batch but from the ResultSet instance.
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HandleOnErrorAction">
            <summary>
            Event that will be called when additional rows in the result set are available (rowCount available has increased). It will not be
            called from the Batch but from the ResultSet instance.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.BatchText">
            <summary>
            The text of batch that will be executed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionEndTimeStamp">
            <summary>
            Localized timestamp for when the execution completed.
            Stored in UTC ISO 8601 format; should be localized before displaying to any user
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionElapsedTime">
            <summary>
            Localized timestamp for how long it took for the execution to complete
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ExecutionStartTimeStamp">
            <summary>
            Localized timestamp for when the execution began.
            Stored in UTC ISO 8601 format; should be localized before displaying to any user
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasError">
            <summary>
            Whether or not this batch encountered an error that halted execution
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HasExecuted">
            <summary>
            Whether or not this batch has been executed, regardless of success or failure 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Id">
            <summary>
            Ordinal of the batch in the query
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSets">
            <summary>
            The result sets of the batch execution
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ResultSummaries">
            <summary>
            Property for generating a set result set summaries from the result sets
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Summary">
            <summary>
            Creates a <see cref="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.BatchSummary"/> based on the batch instance
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Selection">
            <summary>
            The range from the file that is this batch
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Execute(System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Executes this batch and captures any server messages that are returned.
            </summary>
            <param name="conn">The connection to use to execute the batch</param>
            <param name="cancellationToken">Token for cancelling the execution</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.Execute(System.Data.Common.DbConnection,System.Threading.CancellationToken,Microsoft.SqlTools.ServiceLayer.BatchParser.OnErrorAction)">
            <summary>
            Executes this batch and captures any server messages that are returned.
            </summary>
            <param name="conn">The connection to use to execute the batch</param>
            <param name="cancellationToken">Token for cancelling the execution</param>
            <param name="onErrorAction">Continue (Ignore) or Exit on Error. This comes only in SQLCMD mode</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.GetSubset(System.Int32,System.Int64,System.Int32)">
            <summary>
            Generates a subset of the rows from a result set of the batch
            </summary>
            <param name="resultSetIndex">The index for selecting the result set</param>
            <param name="startRow">The starting row of the results</param>
            <param name="rowCount">How many rows to retrieve</param>
            <returns>A subset of results</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.GetExecutionPlan(System.Int32)">
            <summary>
            Generates an execution plan
            </summary>
            <param name="resultSetIndex">The index for selecting the result set</param>
            <returns>An execution plan object</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.SaveAs(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsRequestParams,Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.IFileStreamFactory,Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.SaveAsAsyncEventHandler,Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.SaveAsFailureAsyncEventHandler)">
            <summary>
            Saves a result to a file format selected by the user
            </summary>
            <param name="saveParams">Parameters for the save as request</param>
            <param name="fileFactory">
            Factory for creating the reader/writer pair for outputing to the selected format
            </param>
            <param name="successHandler">Delegate to call when request successfully completes</param>
            <param name="failureHandler">Delegate to call if the request fails</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.StatementCompletedHandler(System.Object,System.Data.StatementCompletedEventArgs)">
            <summary>
            Handler for when the StatementCompleted event is fired for this batch's command. This
            will be executed ONLY when there is a rowcount to report. If this event is not fired
            either NOCOUNT has been set or the command doesn't affect records.
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="args">Arguments for the event</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ServerMessageHandler(System.Object,Microsoft.Data.SqlClient.SqlInfoMessageEventArgs)">
            <summary>
            Delegate handler for storing messages that are returned from the server
            </summary>
            <param name="sender">Object that fired the event</param>
            <param name="args">Arguments from the event</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.HandleSqlErrorMessage(System.Int32,System.Byte,System.Byte,System.Int32,System.String,System.String)">
            <summary>
            Handle a single SqlError's error message by processing and displaying it. The arguments come from the error being handled
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.UnwrapDbException(System.Exception)">
            <summary>
            Attempts to convert an <see cref="T:System.Exception"/> to a <see cref="T:Microsoft.Data.SqlClient.SqlException"/> that
            contains much more info about Sql Server errors. The exception is then unwrapped and
            messages are formatted and sent to the extension. If the exception cannot be 
            converted to SqlException, the message is written to the messages list.
            </summary>
            <param name="dbe">The exception to unwrap</param>
            <returns>true is exception can be ignored when in a loop, false otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch.ProcessResultSetSpecialActions">
            <summary>
            Aggregates all result sets in the batch into a single special action 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.BatchSummary">
            <summary>
            Summary of a batch within a query
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.BatchSummary.ExecutionElapsed">
            <summary>
            Localized timestamp for how long it took for the execution to complete
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.BatchSummary.ExecutionEnd">
            <summary>
            Localized timestamp for when the execution completed.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.BatchSummary.ExecutionStart">
            <summary>
            Localized timestamp for when the execution started.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.BatchSummary.HasError">
            <summary>
            Whether or not the batch encountered an error that halted execution
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.BatchSummary.Id">
            <summary>
            The ID of the result set within the query results
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.BatchSummary.Selection">
            <summary>
            The selection from the file for this batch
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.BatchSummary.ResultSetSummaries">
            <summary>
            The summaries of the result sets inside the batch
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.BatchSummary.SpecialAction">
            <summary>
            The special action of the batch 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ConnectionUriChangedParams">
            <summary>
            Parameters for the connection uri changed notification.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue">
            <summary>
            Class used for internally passing results from a cell around.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue.DisplayValue">
            <summary>
            Display value for the cell, suitable to be passed back to the client
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue.IsNull">
            <summary>
            Whether or not the cell is NULL
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue.InvariantCultureDisplayValue">
            <summary>
            Culture invariant display value for the cell, this value can later be used by the client to convert back to the original value.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue.RawObject">
            <summary>
            The raw object for the cell, for use internally
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue.RowId">
            <summary>
            The internal ID for the row. Should be used when directly referencing the row for edit
            or other purposes.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue.CopyTo(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue)">
            <summary>
            Copies the values of this DbCellValue into another DbCellValue (or child object)
            </summary>
            <param name="other">The DbCellValue (or child) that will receive the values</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper">
            <summary>
            Wrapper around a DbColumn, which provides extra functionality, but can be used as a
            regular DbColumn
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper.AllServerDataTypes">
            <summary>
            All types supported by the server, stored as a hash set to provide O(1) lookup
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper.#ctor(System.Data.Common.DbColumn)">
            <summary>
            Constructor for a DbColumnWrapper
            </summary>
            <remarks>Most of this logic is taken from SSMS ColumnInfo class</remarks>
            <param name="column">The column we're wrapping around</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper.#ctor">
            <summary>
            Default constructor, used for deserializing JSON RPC only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper.IsBytes">
            <summary>
            Whether or not the column is bytes
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper.IsChars">
            <summary>
            Whether or not the column is a character type
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper.IsSqlVariant">
            <summary>
            Whether or not the column is a SqlVariant type
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper.IsUdt">
            <summary>
            Whether or not the column is a user-defined type
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper.IsXml">
            <summary>
            Whether or not the column is XML
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper.IsJson">
            <summary>
            Whether or not the column is JSON
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper.SqlDbType">
            <summary>
            The SqlDbType of the column, for use in a SqlParameter
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper.IsHierarchyId">
            <summary>
            Whther this is a HierarchyId column
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper.IsSqlXmlType">
            <summary>
            Whether or not the column is an XML Reader type.
            </summary>
            <remarks>
            Logic taken from SSDT determination of whether a column is a SQL XML type. It may not
            be possible to have XML readers from .NET Core SqlClient.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper.IsUnknownType">
            <summary>
            Whether or not the column is an unknown type
            </summary>
            <remarks>
            Logic taken from SSDT determination of unknown columns. It may not even be possible to
            have "unknown" column types with the .NET Core SqlClient.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper.IsUpdatable">
            <summary>
            Whether or not the column can be updated, based on whether it's an auto increment
            column, is an XML reader column, and if it's read only.
            </summary>
            <remarks>
            Logic taken from SSDT determination of updatable columns
            Special treatment for HierarchyId since we are using an Expression for HierarchyId column and expression column is readonly.
            </remarks>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.TypeConvertor">
            <summary>
            Convert a base data type to another base data type
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.TypeConvertor.ToNetType(System.Data.SqlDbType)">
            <summary>
            Convert TSQL type to .Net data type
            </summary>
            <param name="sqlDbType"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.BatchEventParams">
            <summary>
            Parameters to be sent back as part of a batch start or complete event to indicate that a
            batch of a query started or completed.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.BatchEventParams.BatchSummary">
            <summary>
            Summary of the batch that just completed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.BatchEventParams.OwnerUri">
            <summary>
            URI for the editor that owns the query
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ExecuteDocumentSelectionParams">
            <summary>
            Parameters for executing a query from a document open in the workspace
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ExecuteDocumentSelectionParams.QuerySelection">
            <summary>
            The selection from the document
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ExecuteDocumentStatementParams">
            <summary>
            Parameters for executing a query from a document open in the workspace
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ExecuteDocumentStatementParams.Line">
            <summary>
            Line in the document for the location of the SQL statement
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ExecuteDocumentStatementParams.Column">
            <summary>
            Column in the document for the location of the SQL statement
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ExecuteRequestParamsBase">
            <summary>
            Basic parameters that are required for executing a query
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ExecuteRequestParamsBase.OwnerUri">
            <summary>
            URI for the editor that is asking for the query execute
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ExecuteRequestParamsBase.ExecutionPlanOptions">
            <summary>
            Execution plan options
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ExecuteRequestParamsBase.GetFullColumnSchema">
            <summary>
            Flag to get full column schema via additional queries.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ExecuteRequestResult">
            <summary>
            Parameters for the query execute result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ExecuteStringParams">
            <summary>
            Parameters for executing a query directly
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ExecuteStringParams.Query">
            <summary>
            The query to execute
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.MessageParams">
            <summary>
            Parameters to be sent back with a message notification
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.MessageParams.OwnerUri">
            <summary>
            URI for the editor that owns the query
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.MessageParams.Message">
            <summary>
            The message that is being returned
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.QueryCompleteParams">
            <summary>
            Parameters to be sent back with a query execution complete event
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.QueryCompleteParams.OwnerUri">
            <summary>
            URI for the editor that owns the query
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.QueryCompleteParams.BatchSummaries">
            <summary>
            Summaries of the result sets that were returned with the query
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ResultSetEventParams">
            <summary>
            Base class of parameters to return when a result set is available, updated or completed
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ResultSetCompleteEventParams">
            <summary>
            Parameters to return when a result set is completed.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ResultSetAvailableEventParams">
            <summary>
            Parameters to return when a result set is available.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ResultSetUpdatedEventParams">
            <summary>
            Parameters to return when a result set is updated
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ResultSetUpdatedEventParams.ExecutionPlans">
            <summary>
            Execution plans for statements in the current batch.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ResultSetUpdatedEventParams.ExecutionPlanErrorMessage">
            <summary>
            Error message for exception raised while generating execution plan.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.SimpleExecuteParams">
            <summary>
            Parameters for executing a query from a provided string
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.SimpleExecuteParams.QueryString">
            <summary>
            The string to execute
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.SimpleExecuteParams.OwnerUri">
            <summary>
            The owneruri to get connection from
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.SimpleExecuteResult">
            <summary>
            Result
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.SimpleExecuteResult.RowCount">
            <summary>
            The number of rows that was returned with the resultset
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.SimpleExecuteResult.ColumnInfo">
            <summary>
            Details about the columns that are provided as solutions
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.SimpleExecuteResult.Rows">
            <summary>
            2D array of the cell values requested from result set
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecutionPlan">
            <summary>
            Class used to represent an execution plan from a query for transmission across JSON RPC
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecutionPlan.Format">
            <summary>
            The format of the execution plan 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecutionPlan.Content">
            <summary>
            The execution plan content
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecutionPlanOptions">
            <summary> 
            Incoming execution plan options from the extension
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecutionPlanOptions.IncludeActualExecutionPlanXml">
            <summary>
            Setting to return the actual execution plan as XML
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecutionPlanOptions.IncludeEstimatedExecutionPlanXml">
            <summary>
            Setting to return the estimated execution plan as XML
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryCancelParams">
            <summary>
            Parameters for the query cancellation request
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryCancelResult">
            <summary>
            Parameters to return as the result of a query dispose request
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryCancelResult.Messages">
            <summary>
            Any error messages that occurred during disposing the result set. Optional, can be set
            to null if there were no errors.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryDisposeParams">
            <summary>
            Parameters for the query dispose request
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryDisposeResult">
            <summary>
            Parameters to return as the result of a query dispose request
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryExecutionPlanParams">
            <summary>
            Parameters for query execution plan request
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryExecutionPlanParams.OwnerUri">
            <summary>
            URI for the file that owns the query to look up the results for
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryExecutionPlanParams.BatchIndex">
            <summary>
            Index of the batch to get the results from
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryExecutionPlanParams.ResultSetIndex">
            <summary>
            Index of the result set to get the results from
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryExecutionPlanResult">
            <summary>
            Parameters for the query execution plan request
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryExecutionPlanResult.ExecutionPlan">
            <summary>
            The requested execution plan. Optional, can be set to null to indicate an error
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultMessage">
            <summary>
            Result message object with timestamp and actual message
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultMessage.BatchId">
            <summary>
            ID of the batch that generated this message. If null, this message
            was not generated as part of a batch
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultMessage.IsError">
            <summary>
            Whether or not this message is an error
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultMessage.Time">
            <summary>
            Timestamp of the message
            Stored in UTC ISO 8601 format; should be localized before displaying to any user
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultMessage.Message">
            <summary>
            Message contents
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultMessage.#ctor(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Constructor with default "Now" time
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultMessage.#ctor">
            <summary>
            Default constructor, used for deserializing JSON RPC only
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSubset">
            <summary>
            Class used to represent a subset of results from a query for transmission across JSON RPC
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSubset.RowCount">
            <summary>
            The number of rows returned from result set, useful for determining if less rows were
            returned than requested.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSubset.Rows">
            <summary>
            2D array of the cell values requested from result set
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSummary">
            <summary>
            Represents a summary of information about a result without returning any cells of the results
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSummary.Id">
            <summary>
            The ID of the result set within the batch results
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSummary.BatchId">
            <summary>
            The ID of the batch set within the query
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSummary.RowCount">
            <summary>
            The number of rows that are available for the resultset thus far
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSummary.Complete">
            <summary>
            If true it indicates that all rows have been fetched and the RowCount being sent across is final for this ResultSet
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSummary.ColumnInfo">
            <summary>
            Details about the columns that are provided as solutions
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSummary.SpecialAction">
            <summary>
            The special action definition of the result set 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSummary.Visualization">
            <summary>
            The visualization options for the client to render charts.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ResultSetSummary.ToString">
            <summary>
            Returns a string represents the current object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.VisualizationOptions">
            <summary>
            Represents the configuration options for data visualization
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.VisualizationOptions.Type">
            <summary>
            Gets or sets the type of the visualization
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.VisualizationType">
            <summary>
            The supported visualization types
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsRequestParams">
            <summary>
            Parameters for the save results request
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsRequestParams.FilePath">
            <summary>
            The path of the file to save results in
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsRequestParams.BatchIndex">
            <summary>
            Index of the batch to get the results from
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsRequestParams.ResultSetIndex">
            <summary>
            Index of the result set to get the results from
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsRequestParams.OwnerUri">
            <summary>
            URI for the editor that called save results
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsRequestParams.RowStartIndex">
            <summary>
            Start index of the selected rows (inclusive)
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsRequestParams.RowEndIndex">
            <summary>
            End index of the selected rows (inclusive)
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsRequestParams.ColumnStartIndex">
            <summary>
            Start index of the selected columns (inclusive)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsRequestParams.ColumnEndIndex">
            <summary>
            End index of the selected columns (inclusive)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsRequestParams.IsSaveSelection">
            <summary>
            Check if request is a subset of result set or whole result set
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsCsvRequestParams">
            <summary>
            Parameters to save results as CSV
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsCsvRequestParams.IncludeHeaders">
            <summary>
            Include headers of columns in CSV
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsCsvRequestParams.Delimiter">
            <summary>
            Delimiter for separating data items in CSV
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsCsvRequestParams.LineSeperator">
            <summary>
            either CR, CRLF or LF to seperate rows in CSV
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsCsvRequestParams.TextIdentifier">
            <summary>
            Text identifier for alphanumeric columns in CSV
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsCsvRequestParams.Encoding">
            <summary>
            Encoding of the CSV file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsCsvRequestParams.MaxCharsToStore">
            <summary>
            Maximum number of characters to store 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsExcelRequestParams">
            <summary>
            Parameters to save results as Excel
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsExcelRequestParams.IncludeHeaders">
            <summary>
            Include headers of columns in Excel 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsJsonRequestParams">
            <summary>
            Parameters to save results as JSON
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsXmlRequestParams">
            <summary>
            Parameters to save results as XML
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsXmlRequestParams.Formatted">
            <summary>
            Formatting of the XML file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsXmlRequestParams.Encoding">
            <summary>
            Encoding of the XML file
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultRequestResult">
            <summary>
            Parameters for the save results result
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultRequestResult.Messages">
            <summary>
            Error messages for saving to file. 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsCsvRequest">
            <summary>
            Request type to save results as CSV
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsExcelRequest">
            <summary>
            Request type to save results as Excel
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsJsonRequest">
            <summary>
            Request type to save results as JSON
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsXmlRequest">
            <summary>
            Request type to save results as XML
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SelectionData">
            <summary> 
            Container class for a selection range from file 
            </summary>
            TODO: Remove this in favor of buffer range end-to-end
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ColumnInfo.Name">
            <summary>
            Name of this column
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ISerializationParams.FilePath">
            <summary>
            Path to file that the serialized results will be stored in
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ISerializationParams.Rows">
            <summary>
            Results that are to be serialized into 'SaveFormat' format
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ISerializationParams.IsLastBatch" -->
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SerializeDataContinueRequestParams">
            <summary>
            Class used for storing results and how the results are to be serialized
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SerializeDataContinueRequestParams.FilePath">
            <summary>
            Path to file that the serialized results will be stored in
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SerializeDataContinueRequestParams.Rows">
            <summary>
            Results that are to be serialized into 'SaveFormat' format
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SerializeDataContinueRequestParams.IsLastBatch" -->
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SerializeDataStartRequestParams">
            <summary>
            Class used for storing results and how the results are to be serialized
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SerializeDataStartRequestParams.SaveFormat">
            <summary>
            String representation of the type that service is supposed to serialize to
             E.g. "json" or "csv"
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SerializeDataStartRequestParams.FilePath">
            <summary>
            Path to file that the serialized results will be stored in
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SerializeDataStartRequestParams.Rows">
            <summary>
            Results that are to be serialized into 'SaveFormat' format
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SerializeDataStartRequestParams.IsLastBatch" -->
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SerializeDataStartRequestParams.#ctor(System.String,System.String,Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue[][],System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SubsetParams">
            <summary>
            Parameters for a query result subset retrieval request
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SubsetParams.OwnerUri">
            <summary>
            URI for the file that owns the query to look up the results for
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SubsetParams.BatchIndex">
            <summary>
            Index of the batch to get the results from
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SubsetParams.ResultSetIndex">
            <summary>
            Index of the result set to get the results from
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SubsetParams.RowsStartIndex">
            <summary>
            Beginning index of the rows to return from the selected resultset. This index will be
            included in the results.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SubsetParams.RowsCount">
            <summary>
            Number of rows to include in the result of this request. If the number of the rows 
            exceeds the number of rows available after the start index, all available rows after
            the start index will be returned.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SubsetResult">
            <summary>
            Parameters for the result of a subset retrieval request
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SubsetResult.ResultSubset">
            <summary>
            The requested subset of results. Optional, can be set to null to indicate an error
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryExecutionOptionsParams">
            <summary>
            Parameters for the query execution options request
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.FileStreamReadResult">
            <summary>
            Represents a value returned from a read from a file stream. This is used to eliminate ref
            parameters used in the read methods.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.FileStreamReadResult.TotalLength">
            <summary>
            The total length in bytes of the value, (including the bytes used to store the length
            of the value)
            </summary>
            <remarks>
            Cell values are stored such that the length of the value is stored first, then the
            value itself is stored. Eg, a string may be stored as 0x03 0x6C 0x6F 0x6C. Under this
            system, the value would be "lol", the length would be 3, and the total length would be
            4 bytes.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.FileStreamReadResult.Value">
            <summary>
            Value of the cell
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.FileStreamReadResult.#ctor(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue,System.Int32)">
            <summary>
            Constructs a new FileStreamReadResult
            </summary>
            <param name="value">The value of the result, ready for consumption by a client</param>
            <param name="totalLength">The number of bytes for the used to store the value's length and value</param>s
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.IFileStreamFactory">
            <summary>
            Interface for a factory that creates filesystem readers/writers
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.IFileStreamReader">
            <summary>
            Interface for a object that reads from the filesystem
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.IFileStreamWriter">
            <summary>
            Interface for a object that writes to a filesystem wrapper
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsCsvFileStreamFactory">
            <summary>
            Factory for creating a reader/writer pair that will read from the temporary buffer file
            and output to a CSV file.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsCsvFileStreamFactory.QueryExecutionSettings">
            <summary>
            Settings for query execution
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsCsvFileStreamFactory.SaveRequestParams">
            <summary>
            Parameters for the save as CSV request
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsCsvFileStreamFactory.CreateFile">
            <summary>
            File names are not meant to be created with this factory.
            </summary>
            <exception cref="T:System.NotImplementedException">Thrown all times</exception>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsCsvFileStreamFactory.GetReader(System.String)">
            <summary>
            Returns a new service buffer reader for reading results back in from the temporary buffer files, file share is ReadWrite to allow concurrent reads/writes to the file.
            </summary>
            <param name="fileName">Path to the temp buffer file</param>
            <returns>Stream reader</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsCsvFileStreamFactory.GetWriter(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper})">
            <summary>
            Returns a new CSV writer for writing results to a CSV file, file share is ReadWrite to allow concurrent reads/writes to the file.
            </summary>
            <param name="fileName">Path to the CSV output file</param>
            <param name="columns">
            The entire list of columns for the result set. They will be filtered down as per the
            request params.
            </param>
            <returns>Stream writer</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsCsvFileStreamFactory.DisposeFile(System.String)">
            <summary>
            Safely deletes the file
            </summary>
            <param name="fileName">Path to the file to delete</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsCsvFileStreamWriter">
            <summary>
            Writer for writing rows of results to a CSV file
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsCsvFileStreamWriter.#ctor(System.IO.Stream,Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsCsvRequestParams,System.Collections.Generic.IReadOnlyList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper})">
            <summary>
            Constructor, stores the CSV specific request params locally, chains into the base
            constructor
            </summary>
            <param name="stream">FileStream to access the CSV file output</param>
            <param name="requestParams">CSV save as request parameters</param>
            <param name="columns">
            The entire list of columns for the result set. They will be filtered down as per the
            request params.
            </param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsCsvFileStreamWriter.WriteRow(System.Collections.Generic.IList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue},System.Collections.Generic.IReadOnlyList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper})">
            <summary>
            Writes a row of data as a CSV row. If this is the first row and the user has requested
            it, the headers for the column will be emitted as well.
            </summary>
            <param name="row">The data of the row to output to the file</param>
            <param name="columns">The columns for the row to output</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsCsvFileStreamWriter.EncodeCsvField(System.String)">
            <summary>
            Encodes a single field for inserting into a CSV record. The following rules are applied:
            <list type="bullet">
            <item><description>All double quotes (") are replaced with a pair of consecutive double quotes</description></item>
            </list>
            The entire field is also surrounded by a pair of double quotes if any of the following conditions are met:
            <list type="bullet">
            <item><description>The field begins or ends with a space</description></item>
            <item><description>The field begins or ends with a tab</description></item>
            <item><description>The field contains the delimiter string</description></item>
            <item><description>The field contains the '\n' character</description></item>
            <item><description>The field contains the '\r' character</description></item>
            <item><description>The field contains the '"' character</description></item>
            </list>
            </summary>
            <param name="field">The field to encode</param>
            <returns>The CSV encoded version of the original field</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamFactory">
            <summary>
            Factory for creating a reader/writer pair that will read from the temporary buffer file
            and output to a Excel file.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamFactory.QueryExecutionSettings">
            <summary>
            Settings for query execution
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamFactory.SaveRequestParams">
            <summary>
            Parameters for the save as Excel request
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamFactory.CreateFile">
            <summary>
            File names are not meant to be created with this factory.
            </summary>
            <exception cref="T:System.NotImplementedException">Thrown all times</exception>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamFactory.GetReader(System.String)">
            <summary>
            Returns a new service buffer reader for reading results back in from the temporary buffer files, file share is ReadWrite to allow concurrent reads/writes to the file.
            </summary>
            <param name="fileName">Path to the temp buffer file</param>
            <returns>Stream reader</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamFactory.GetWriter(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper})">
            <summary>
            Returns a new Excel writer for writing results to a Excel file, file share is ReadWrite to allow concurrent reads/writes to the file.
            </summary>
            <param name="fileName">Path to the Excel output file</param>
            <param name="columns">
            The entire list of columns for the result set. They will be filtered down as per the
            request params.
            </param>
            <returns>Stream writer</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamFactory.DisposeFile(System.String)">
            <summary>
            Safely deletes the file
            </summary>
            <param name="fileName">Path to the file to delete</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriter">
            <summary>
            Writer for writing rows of results to a Excel file
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriter.#ctor(System.IO.Stream,Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsExcelRequestParams,System.Collections.Generic.IReadOnlyList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper})">
            <summary>
            Constructor, stores the Excel specific request params locally, chains into the base
            constructor
            </summary>
            <param name="stream">FileStream to access the Excel file output</param>
            <param name="requestParams">Excel save as request parameters</param>
            <param name="columns">
            The entire list of columns for the result set. They will be filtered down as per the
            request params.
            </param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriter.WriteRow(System.Collections.Generic.IList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue},System.Collections.Generic.IReadOnlyList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper})">
            <summary>
            Writes a row of data as a Excel row. If this is the first row and the user has requested
            it, the headers for the column will be emitted as well.
            </summary>
            <param name="row">The data of the row to output to the file</param>
            <param name="columns">
            The entire list of columns for the result set. They will be filtered down as per the
            request params.
            </param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper">
            <summary>
            A helper class for write xlsx file base on ECMA-376. It tries to be minimal,
            both in implementation and runtime allocation. 
            </summary>
            <example> 
            This sample shows how to use the class 
            <code>
            public class TestClass
            {
                public static int Main() 
                {
                    using (Stream stream = File.Create("test.xlsx"))
                    using (var helper = new SaveAsExcelFileStreamWriterHelper(stream, false))
                    using (var sheet = helper.AddSheet())
                    {
                        sheet.AddRow();
                        sheet.AddCell("string");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.ExcelSheet">
            <summary>
            Present a Excel sheet
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.ExcelSheet.#ctor(System.Xml.XmlWriter)">
            <summary>
            Initializes a new instance of the ExcelSheet class.
            </summary>
            <param name="writer">XmlWriter to write the sheet data</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.ExcelSheet.AddRow">
            <summary>
            Start a new row
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.ExcelSheet.AddCell(System.String)">
            <summary>
            Write a string cell
            </summary>
            <param name="value">string value to write</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.ExcelSheet.AddCell(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue)">
            <summary>
            Write a object cell
            </summary>
            The program will try to output number/datetime, otherwise, call the ToString 
            <param name="o"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.ExcelSheet.Dispose" -->
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.ExcelSheet.AddCellEmpty">
            <summary>
            Write a empty cell
            </summary>
            This only increases the internal bookmark and doesn't arcturally write out anything.
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.ExcelSheet.AddCell(System.Boolean)">
            <summary>
            Write a bool cell. 
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.ExcelSheet.AddCell(System.TimeSpan)">
            <summary>
            Write a TimeSpan cell. 
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.ExcelSheet.AddCell(System.DateTime)">
            <summary>
            Write a DateTime cell.
            </summary>
            <param name="dateTime">Datetime</param>
            <remark>
            If the DateTime does not have date part, it will be written as datetime and show as time only
            If the DateTime is before 1900-03-01, save as string because excel doesn't support them.
            Otherwise, save as datetime, and if the time is 00:00:00, show as yyyy-MM-dd.
            Show the datetime as yyyy-MM-dd HH:mm:ss if none of the previous situations
            </remark>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.ReferenceManager">
            <summary>
            Helper class to track the current cell reference.
            </summary>
            <remarks>
            SpreadsheetML cell needs a reference attribute. (e.g. r="A1"). This class is used
            to track the current cell reference.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.ReferenceManager.#ctor(System.Xml.XmlWriter)">
            <summary>
            Initializes a new instance of the ReferenceManager class.   
            </summary>
            <param name="writer">XmlWriter to write the reference attribute to.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.ReferenceManager.AssureColumnReference">
            <summary>
            Check that we have not write too many columns. (xlsx has a limit of 16384 columns)
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.ReferenceManager.WriteAndIncreaseColumnReference">
            <summary>
            Write out the r="A1" attribute and increase the column number of internal bookmark
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.ReferenceManager.IncreaseColumnReference">
            <summary>
            Increase the column of internal bookmark. 
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.ReferenceManager.AssureRowReference">
            <summary>
            Check that we have not write too many rows. (xlsx has a limit of 1048576 rows) 
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.ReferenceManager.WriteAndIncreaseRowReference">
            <summary>
            Write out the r="1" attribute and increase the row number of internal bookmark
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the SaveAsExcelFileStreamWriterHelper class.  
            </summary>
            <param name="stream">The input or output stream.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the SaveAsExcelFileStreamWriterHelper class. 
            </summary>
            <param name="stream">The input or output stream.</param>
            <param name="leaveOpen">true to leave the stream open after the 
            SaveAsExcelFileStreamWriterHelper object is disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.AddSheet(System.String)">
            <summary>
            Add sheet inside the Xlsx file.
            </summary>
            <param name="sheetName">Sheet name</param>
            <returns>ExcelSheet for writing the sheet content</returns>
            <remarks>
            When the sheetName is null, sheet1,shhet2,..., will be used.
            The following charactors are not allowed in the sheetName
            '\', '/','*','[',']',':','?'
            </remarks>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.Dispose">
            <summary>
            Write out the rest of the xlsx files and release the resources used by the current instance 
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.WriteContentType">
            <summary>
            write [Content_Types].xml
            </summary>
            <remarks>
            This file need to describe all the files in the zip.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.WriteTopRel">
            <summary>
            Write _rels/.rels. This file only need to reference main workbook
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.WriteWorkbook">
            <summary>
            Write xl/workbook.xml. This file will references the sheets through ids in xl/_rels/workbook.xml.rels
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsExcelFileStreamWriterHelper.WriteWorkbookRel">
            <summary>
            Write xl/_rels/workbook.xml.rels. This file will have the paths of the style and sheets.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsJsonFileStreamFactory.QueryExecutionSettings">
            <summary>
            Settings for query execution
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsJsonFileStreamFactory.SaveRequestParams">
            <summary>
            Parameters for the save as JSON request
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsJsonFileStreamFactory.CreateFile">
            <summary>
            File names are not meant to be created with this factory.
            </summary>
            <exception cref="T:System.NotImplementedException">Thrown all times</exception>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsJsonFileStreamFactory.GetReader(System.String)">
            <summary>
            Returns a new service buffer reader for reading results back in from the temporary buffer files, file share is ReadWrite to allow concurrent reads/writes to the file.
            </summary>
            <param name="fileName">Path to the temp buffer file</param>
            <returns>Stream reader</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsJsonFileStreamFactory.GetWriter(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper})">
            <summary>
            Returns a new JSON writer for writing results to a JSON file, file share is ReadWrite to allow concurrent reads/writes to the file.
            </summary>
            <param name="fileName">Path to the JSON output file</param>
            <param name="columns">
            The entire list of columns for the result set. They will be filtered down as per the
            request params.
            </param>
            <returns>Stream writer</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsJsonFileStreamFactory.DisposeFile(System.String)">
            <summary>
            Safely deletes the file
            </summary>
            <param name="fileName">Path to the file to delete</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsJsonFileStreamWriter">
            <summary>
            Writer for writing rows of results to a JSON file.
            </summary>
            <remarks>
            This implements its own IDisposable because the cleanup logic closes the array that was
            created when the writer was created. Since this behavior is different than the standard
            file stream cleanup, the extra Dispose method was added.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsJsonFileStreamWriter.#ctor(System.IO.Stream,Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsRequestParams,System.Collections.Generic.IReadOnlyList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper})">
            <summary>
            Constructor, writes the header to the file, chains into the base constructor
            </summary>
            <param name="stream">FileStream to access the JSON file output</param>
            <param name="requestParams">JSON save as request parameters</param>
            <param name="columns">
            The entire list of columns for the result set. They will be filtered down as per the
            request params.
            </param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsJsonFileStreamWriter.WriteRow(System.Collections.Generic.IList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue},System.Collections.Generic.IReadOnlyList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper})">
            <summary>
            Writes a row of data as a JSON object
            </summary>
            <param name="row">The data of the row to output to the file</param>
            <param name="columns">
            The entire list of columns for the result set. They will be filtered down as per the
            request params.
            </param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsJsonFileStreamWriter.Dispose(System.Boolean)">
            <summary>
            Disposes the writer by closing up the array that contains the row objects
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsStreamWriter">
            <summary>
            Abstract class for implementing writers that save results to file. Stores some basic info
            that all save as writer would need.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsStreamWriter.#ctor(System.IO.Stream,Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsRequestParams,System.Collections.Generic.IReadOnlyList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper})">
            <summary>
            Stores the internal state for the writer that will be necessary for any writer.
            </summary>
            <param name="stream">The stream that will be written to</param>
            <param name="requestParams">The SaveAs request parameters</param>
            <param name="columns">
            The entire list of columns for the result set. Used to determine which columns to
            output.
            </param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsStreamWriter.ColumnStartIndex">
            <summary>
            Index of the first column to write to the output file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsStreamWriter.ColumnCount">
            <summary>
            Number of columns to write to the output file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsStreamWriter.ColumnEndIndex">
            <summary>
            Index of the last column to write to the output file (inclusive).
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsStreamWriter.FileStream">
            <summary>
            The file stream to use to write the output file
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsStreamWriter.WriteRow(Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader)">
            <summary>
            Not implemented, do not use.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsStreamWriter.WriteRow(System.Collections.Generic.IList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue},System.Collections.Generic.IReadOnlyList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper})">
            <summary>
            Writes a row of data to the output file using the format provided by the implementing class.
            </summary>
            <param name="row">The row of data to output</param>
            <param name="columns">The list of columns to output</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsStreamWriter.Seek(System.Int64)">
            <summary>
            Not implemented, do not use.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsStreamWriter.FlushBuffer">
            <summary>
            Flushes the file stream buffer
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsStreamWriter.Dispose(System.Boolean)">
            <summary>
            Disposes the instance by flushing and closing the file stream
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsXmlFileStreamFactory.QueryExecutionSettings">
            <summary>
            Settings for query execution
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsXmlFileStreamFactory.SaveRequestParams">
            <summary>
            Parameters for the save as XML request
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsXmlFileStreamFactory.CreateFile">
            <summary>
            File names are not meant to be created with this factory.
            </summary>
            <exception cref="T:System.NotImplementedException">Thrown all times</exception>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsXmlFileStreamFactory.GetReader(System.String)">
            <summary>
            Returns a new service buffer reader for reading results back in from the temporary buffer files, file share is ReadWrite to allow concurrent reads/writes to the file.
            </summary>
            <param name="fileName">Path to the temp buffer file</param>
            <returns>Stream reader</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsXmlFileStreamFactory.GetWriter(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper})">
            <summary>
            Returns a new XML writer for writing results to a XML file, file share is ReadWrite to allow concurrent reads/writes to the file.
            </summary>
            <param name="fileName">Path to the XML output file</param>
            <param name="columns">
            The entire list of columns for the result set. They will be filtered down as per the
            request params.
            </param>
            <returns>Stream writer</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsXmlFileStreamFactory.DisposeFile(System.String)">
            <summary>
            Safely deletes the file
            </summary>
            <param name="fileName">Path to the file to delete</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsXmlFileStreamWriter">
            <summary>
            Writer for writing rows of results to a XML file.
            </summary>
            <remarks>
            This implements its own IDisposable because the cleanup logic closes the element that was
            created when the writer was created. Since this behavior is different than the standard
            file stream cleanup, the extra Dispose method was added.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsXmlFileStreamWriter.#ctor(System.IO.Stream,Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsXmlRequestParams,System.Collections.Generic.IReadOnlyList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper})">
            <summary>
            Constructor, writes the header to the file, chains into the base constructor
            </summary>
            <param name="stream">FileStream to access the JSON file output</param>
            <param name="requestParams">XML save as request parameters</param>
            <param name="columns">
            The entire list of columns for the result set. They will be filtered down as per the
            request params.
            </param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsXmlFileStreamWriter.WriteRow(System.Collections.Generic.IList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue},System.Collections.Generic.IReadOnlyList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper})">
            <summary>
            Writes a row of data as a XML object
            </summary>
            <param name="row">The data of the row to output to the file</param>
            <param name="columns">
            The entire list of columns for the result set. They will be filtered down as per the
            request params.
            </param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsXmlFileStreamWriter.GetEncoding(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsXmlRequestParams)">
            <summary>
            Get the encoding for the XML file according to <param name="requestParams"></param>
            </summary>
            <param name="requestParams">XML save as request parameters</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.SaveAsXmlFileStreamWriter.Dispose(System.Boolean)">
            <summary>
            Disposes the writer by closing up the element that contains the row objects
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamFactory">
            <summary>
            Factory that creates file reader/writers that process rows in an internal, non-human readable file format
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamFactory.QueryExecutionSettings">
            <summary>
            The settings for query execution
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamFactory.CreateFile">
            <summary>
             Creates a new temporary file
            </summary>
            <returns>The name of the temporary file</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamFactory.GetReader(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader"/> for reading values back from
            an SSMS formatted buffer file, file share is ReadWrite to allow concurrent reads/writes to the file.
            </summary>
            <param name="fileName">The file to read values from</param>
            <returns>A <see cref="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader"/></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamFactory.GetWriter(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper})">
            <summary>
            Creates a new <see cref="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter"/> for writing values out to an
            SSMS formatted buffer file, file share is ReadWrite to allow concurrent reads/writes to the file.
            </summary>
            <param name="fileName">The file to write values to</param>
            <param name="columns">
            Ignored in order to fulfil the <see cref="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.IFileStreamFactory"/> contract.
            @TODO: Refactor this out so that save-as writers do not use the same contract as service buffer writers.
            </param>
            <returns>A <see cref="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter"/></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamFactory.DisposeFile(System.String)">
            <summary>
            Disposes of a file created via this factory
            </summary>
            <param name="fileName">The file to dispose of</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader">
            <summary>
            Reader for service buffer formatted file streams
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.#ctor(System.IO.Stream,Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings)">
            <summary>
            Constructs a new ServiceBufferFileStreamReader and initializes its state
            </summary>
            <param name="stream">The filestream to read from</param>
            <param name="settings">The query execution settings</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadRow(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper})">
            <summary>
            Reads a row from the file, based on the columns provided
            </summary>
            <param name="fileOffset">Offset into the file where the row starts</param>
            <param name="rowId">Internal ID of the row to set for all cells in this row</param>
            <param name="columns">The columns that were encoded</param>
            <returns>The objects from the row, ready for output to the client</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.AssureBufferLength(System.Int32)">
            <summary>
            Creates a new buffer that is of the specified length if the buffer is not already
            at least as long as specified.
            </summary>
            <param name="newBufferLength">The minimum buffer size</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadCellHelper``1(System.Int64,System.Int64,System.Func{System.Int32,``0},System.Func{System.Int32,System.Boolean},System.Func{``0,System.String},System.Boolean)">
            <summary>
            Reads the value of a cell from the file wrapper, checks to see if it null using
            <paramref name="isNullFunc"/>, and converts it to the proper output type using
            <paramref name="convertFunc"/>.
            </summary>
            <param name="offset">Offset into the file to read from</param>
            <param name="rowId">Internal ID of the row to set on all cells in this row</param>
            <param name="convertFunc">Function to use to convert the buffer to the target type</param>
            <param name="isNullFunc">
            If provided, this function will be used to determine if the value is null
            </param>
            <param name="toStringFunc">Optional function to use to convert the object to a string.</param>
            <param name="setInvariantCultureDisplayValue">Optional parameter indicates whether the culture invariant display value should be provided.</param>
            <typeparam name="T">The expected type of the cell. Used to keep the code honest</typeparam>
            <returns>The object, a display value, and the length of the value + its length</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadInt16(System.Int64,System.Int64)">
            <summary>
            Reads a short from the file at the offset provided
            </summary>
            <param name="fileOffset">Offset into the file to read the short from</param>
            <param name="rowId">Internal ID of the row that will be stored in the cell</param>
            <returns>A short</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadInt32(System.Int64,System.Int64)">
            <summary>
            Reads a int from the file at the offset provided
            </summary>
            <param name="fileOffset">Offset into the file to read the int from</param>
            <param name="rowId">Internal ID of the row that will be stored in the cell</param>
            <returns>An int</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadInt64(System.Int64,System.Int64)">
            <summary>
            Reads a long from the file at the offset provided
            </summary>
            <param name="fileOffset">Offset into the file to read the long from</param>
            <param name="rowId">Internal ID of the row that will be stored in the cell</param>
            <returns>A long</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadByte(System.Int64,System.Int64)">
            <summary>
            Reads a byte from the file at the offset provided
            </summary>
            <param name="fileOffset">Offset into the file to read the byte from</param>
            <param name="rowId">Internal ID of the row that will be stored in the cell</param>
            <returns>A byte</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadChar(System.Int64,System.Int64)">
            <summary>
            Reads a char from the file at the offset provided
            </summary>
            <param name="fileOffset">Offset into the file to read the char from</param>
            <param name="rowId">Internal ID of the row that will be stored in the cell</param>
            <returns>A char</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadBoolean(System.Int64,System.Int64)">
            <summary>
            Reads a bool from the file at the offset provided
            </summary>
            <param name="fileOffset">Offset into the file to read the bool from</param>
            <param name="rowId">Internal ID of the row that will be stored in the cell</param>
            <returns>A bool</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadSingle(System.Int64,System.Int64)">
            <summary>
            Reads a single from the file at the offset provided
            </summary>
            <param name="fileOffset">Offset into the file to read the single from</param>
            <param name="rowId">Internal ID of the row that will be stored in the cell</param>
            <returns>A single</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadDouble(System.Int64,System.Int64)">
            <summary>
            Reads a double from the file at the offset provided
            </summary>
            <param name="fileOffset">Offset into the file to read the double from</param>
            <param name="rowId">Internal ID of the row that will be stored in the cell</param>
            <returns>A double</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadSqlDecimal(System.Int64,System.Int64)">
            <summary>
            Reads a SqlDecimal from the file at the offset provided
            </summary>
            <param name="offset">Offset into the file to read the SqlDecimal from</param>
            <returns>A SqlDecimal</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadDecimal(System.Int64,System.Int64)">
            <summary>
            Reads a decimal from the file at the offset provided
            </summary>
            <param name="offset">Offset into the file to read the decimal from</param>
            <returns>A decimal</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadDateTime(System.Int64,System.Int64,Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbColumnWrapper)">
            <summary>
            Reads a DateTime from the file at the offset provided
            </summary>
            <param name="offset">Offset into the file to read the DateTime from</param>
            <param name="rowId">Internal ID of the row that will be stored in the cell</param>
            <param name="col">Column metadata, used for determining what precision to output</param>
            <returns>A DateTime</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadDateTimeOffset(System.Int64,System.Int64)">
            <summary>
            Reads a DateTimeOffset from the file at the offset provided
            </summary>
            <param name="offset">Offset into the file to read the DateTimeOffset from</param>
            <param name="rowId">Internal ID of the row that will be stored in the cell</param>
            <returns>A DateTimeOffset</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadTimeSpan(System.Int64,System.Int64)">
            <summary>
            Reads a TimeSpan from the file at the offset provided
            </summary>
            <param name="offset">Offset into the file to read the TimeSpan from</param>
            <param name="rowId">Internal ID of the row that will be stored in the cell</param>
            <returns>A TimeSpan</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadString(System.Int64,System.Int64)">
            <summary>
            Reads a string from the file at the offset provided
            </summary>
            <param name="offset">Offset into the file to read the string from</param>
            <param name="rowId">Internal ID of the row that will be stored in the cell</param>
            <returns>A string</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadBytes(System.Int64,System.Int64)">
            <summary>
            Reads bytes from the file at the offset provided
            </summary>
            <param name="offset">Offset into the file to read the bytes from</param>
            <param name="rowId">Internal ID of the row that will be stored in the cell</param>
            <returns>A byte array</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadGuid(System.Int64,System.Int64)">
            <summary>
            Reads the bytes that make up a GUID at the offset provided
            </summary>
            <param name="offset">Offset into the file to read the bytes from</param>
            <param name="rowId">Internal ID of the row that will be stored in the cell</param>
            <returns>A system guid type object</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadMoney(System.Int64,System.Int64)">
            <summary>
            Reads a SqlMoney type from the offset provided
            into a 
            </summary>
            <param name="offset">Offset into the file to read the value</param>
            <param name="rowId">Internal ID of the row that will be stored in the cell</param>
            <returns>A sql money type object</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.ReadLength(System.Int64)">
            <summary>
            Reads the length of a field at the specified offset in the file
            </summary>
            <param name="offset">Offset into the file to read the field length from</param>
            <returns>A LengthResult</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.LengthResult">
            <summary>
            Internal struct used for representing the length of a field from the file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.LengthResult.LengthLength">
            <summary>
            How many bytes the length takes up
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.LengthResult.ValueLength">
            <summary>
            How many bytes the value takes up
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.LengthResult.TotalLength">
            <summary>
            <see cref="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.LengthResult.LengthLength"/> + <see cref="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamReader.LengthResult.ValueLength"/>
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter">
            <summary>
            Writer for service buffer formatted file streams
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.writeMethods">
            <summary>
            Functions to use for writing various types to a file
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.#ctor(System.IO.Stream,Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings)">
            <summary>
            Constructs a new writer
            </summary>
            <param name="stream">The file wrapper to use as the underlying file stream</param>
            <param name="settings">The query execution settings</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteRow(Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader)">
            <summary>
            Writes an entire row to the file stream
            </summary>
            <param name="reader">A primed reader</param>
            <returns>Number of bytes used to write the row</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.Seek(System.Int64)">
            <summary>
            Seeks to a given offset in the file, relative to the beginning of the file
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.FlushBuffer">
            <summary>
            Flushes the internal buffer to the file stream
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteNull">
            <summary>
            Writes null to the file as one 0x00 byte
            </summary>
            <returns>Number of bytes used to store the null</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteInt16(System.Int16)">
            <summary>
            Writes a short to the file
            </summary>
            <returns>Number of bytes used to store the short</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteInt32(System.Int32)">
            <summary>
            Writes a int to the file
            </summary>
            <returns>Number of bytes used to store the int</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteInt64(System.Int64)">
            <summary>
            Writes a long to the file
            </summary>
            <returns>Number of bytes used to store the long</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteChar(System.Char)">
            <summary>
            Writes a char to the file
            </summary>
            <returns>Number of bytes used to store the char</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteBoolean(System.Boolean)">
            <summary>
            Writes a bool to the file
            </summary>
            <returns>Number of bytes used to store the bool</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the file
            </summary>
            <returns>Number of bytes used to store the byte</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteSingle(System.Single)">
            <summary>
            Writes a float to the file
            </summary>
            <returns>Number of bytes used to store the float</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteDouble(System.Double)">
            <summary>
            Writes a double to the file
            </summary>
            <returns>Number of bytes used to store the double</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteSqlDecimal(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Writes a SqlDecimal to the file
            </summary>
            <returns>Number of bytes used to store the SqlDecimal</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteDecimal(System.Decimal)">
            <summary>
            Writes a decimal to the file
            </summary>
            <returns>Number of bytes used to store the decimal</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteDateTime(System.DateTime)">
            <summary>
            Writes a DateTime to the file
            </summary>
            <returns>Number of bytes used to store the DateTime</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteDateTimeOffset(System.DateTimeOffset)">
            <summary>
            Writes a DateTimeOffset to the file
            </summary>
            <returns>Number of bytes used to store the DateTimeOffset</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteTimeSpan(System.TimeSpan)">
            <summary>
            Writes a TimeSpan to the file
            </summary>
            <returns>Number of bytes used to store the TimeSpan</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteString(System.String)">
            <summary>
            Writes a string to the file
            </summary>
            <returns>Number of bytes used to store the string</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteBytes(System.Byte[])">
            <summary>
            Writes a byte[] to the file
            </summary>
            <returns>Number of bytes used to store the byte[]</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteGuid(System.Guid)">
            <summary>
            Stores a GUID value to the file by treating it as a byte array
            </summary>
            <param name="val">The GUID to write to the file</param>
            <returns>Number of bytes written to the file</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteMoney(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Stores a SqlMoney value to the file by treating it as a decimal
            </summary>
            <param name="val">The SqlMoney value to write to the file</param>
            <returns>Number of bytes written to the file</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.AssureBufferLength(System.Int32)">
            <summary>
            Creates a new buffer that is of the specified length if the buffer is not already
            at least as long as specified.
            </summary>
            <param name="newBufferLength">The minimum buffer size</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteLength(System.Int32)">
            <summary>
            Writes the length of the field using the appropriate number of bytes (ie, 1 if the
            length is &lt;255, 5 if the length is &gt;=255)
            </summary>
            <returns>Number of bytes used to store the length</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteNullable(System.Data.SqlTypes.INullable,System.Func{System.Object,System.Int32})">
            <summary>
            Writes a Nullable type (generally a Sql* type) to the file. The function provided by
            <paramref name="valueWriteFunc"/> is used to write to the file if <paramref name="val"/>
            is not null. <see cref="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.ServiceBufferFileStreamWriter.WriteNull"/> is used if <paramref name="val"/> is null.
            </summary>
            <param name="val">The value to write to the file</param>
            <param name="valueWriteFunc">The function to use if val is not null</param>
            <returns>Number of bytes used to write value to the file</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader">
            <summary>
            Wrapper around a DbData reader to perform some special operations more simply
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader.sqlDataReader">
            <summary>
            If the DbDataReader is a SqlDataReader, it will be set here
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader.supportSqlXml">
            <summary>
            Whether or not the data reader supports SqlXml types
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader.#ctor(System.Data.Common.DbDataReader)">
            <summary>
            Constructs a new wrapper around the provided reader
            </summary>
            <param name="reader">The reader to wrap around</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader.Columns">
            <summary>
            All the columns that this reader currently contains
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader.DbDataReader">
            <summary>
            The <see cref="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader.DbDataReader"/> that will be read from
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader.HasLongColumns">
            <summary>
            Whether or not any of the columns of this reader are 'long', such as nvarchar(max)
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Pass-through to DbDataReader.ReadAsync()
            </summary>
            <param name="cancellationToken">The cancellation token to use for cancelling a query</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader.GetValue(System.Int32)">
            <summary>
            Retrieves a value
            </summary>
            <param name="i">Column ordinal</param>
            <returns>The value of the given column</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader.GetValues(System.Object[])">
            <summary>
            Stores all values of the current row into the provided object array
            </summary>
            <param name="values">Where to store the values from this row</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader.IsDBNull(System.Int32)">
            <summary>
            Whether or not the cell of the given column at the current row is a DBNull
            </summary>
            <param name="i">Column ordinal</param>
            <returns>True if the cell is DBNull, false otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader.GetBytesWithMaxCapacity(System.Int32,System.Int32)">
            <summary>
            Retrieves bytes with a maximum number of bytes to return
            </summary>
            <param name="iCol">Column ordinal</param>
            <param name="maxNumBytesToReturn">Number of bytes to return at maximum</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader.GetCharsWithMaxCapacity(System.Int32,System.Int32)">
            <summary>
            Retrieves characters with a maximum number of charss to return
            </summary>
            <param name="iCol">Column ordinal</param>
            <param name="maxCharsToReturn">Number of chars to return at maximum</param>
            <returns>String</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader.GetXmlWithMaxCapacity(System.Int32,System.Int32)">
            <summary>
            Retrieves xml with a maximum number of bytes to return
            </summary>
            <param name="iCol">Column ordinal</param>
            <param name="maxCharsToReturn">Number of chars to return at maximum</param>
            <returns>String</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.StorageDataReader.StringWriterWithMaxCapacity">
            <summary>
            Internal class for writing strings with a maximum capacity
            </summary>
            <remarks>
            This code is take almost verbatim from Microsoft.SqlServer.Management.UI.Grid, SSMS 
            DataStorage, StorageDataReader class.
            </remarks>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query">
            <summary>
            Internal representation of an active query
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.DatabaseContextChangeErrorNumber">
            <summary>
            "Error" code produced by SQL Server when the database context (name) for a connection changes.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.On">
            <summary>
            ON keyword
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.Off">
            <summary>
            OFF keyword
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.SetShowPlanXml">
            <summary>
            showplan_xml statement
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.SetStatisticsXml">
            <summary>
            statistics xml statement
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.cancellationSource">
            <summary>
            Cancellation token source, used for cancelling async db actions
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.disposed">
            <summary>
            For IDisposable implementation, whether or not this object has been disposed
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.editorConnection">
            <summary>
            The connection info associated with the file editor owner URI, used to create a new
            connection upon execution of the query
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.hasExecuteBeenCalled">
            <summary>
            Whether or not the execute method has been called for this query
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.newDatabaseName">
            <summary>
            Name of the new database if the database name was changed in the query
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.onErrorAction">
            <summary>
            On Error Action for the query in SQLCMD Mode- Ignore or Exit
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.queryConnection">
            <summary>
            Connection that is used for query to run 
            This is always initialized from editor connection but might be different in case of SQLCMD mode
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.CancelledBySqlCmd">
            <summary>
            Cancelled but not user but by SQLCMD settings
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.#ctor(System.String,Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings,Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.IFileStreamFactory,System.Boolean,System.Boolean)">
            <summary>
            Constructor for a query
            </summary>
            <param name="queryText">The text of the query to execute</param>
            <param name="connection">The information of the connection to use to execute the query</param>
            <param name="settings">Settings for how to execute the query, from the user</param>
            <param name="outputFactory">Factory for creating output files</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.QueryAsyncEventHandler">
            <summary>
            Delegate type for callback when a query completes or fails
            </summary>
            <param name="query">The query that completed</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.QueryAsyncErrorEventHandler">
            <summary>
            Delegate type for callback when a query fails
            </summary>
            <param name="query">Query that raised the event</param>
            <param name="exception">Exception that caused the query to fail</param>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.BatchCompleted">
            <summary>
            Event to be called when a batch is completed.
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.BatchMessageSent">
            <summary>
            Event that will be called when a message has been emitted
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.BatchStarted">
            <summary>
            Event to be called when a batch starts execution.
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.QueryCompleted">
            <summary>
            Callback for when the query has completed successfully
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.QueryFailed">
            <summary>
            Callback for when the query has failed
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.ResultSetCompleted">
            <summary>
            Event to be called when a resultset has completed.
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.ResultSetAvailable">
            <summary>
            Event that will be called when the resultSet first becomes available. This is as soon as we start reading the results.
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.ResultSetUpdated">
            <summary>
            Event that will be called when additional rows in the result set are available (rowCount available has increased)
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.BeforeBatches">
            <summary>
            The batches which should run before the user batches 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.Batches">
            <summary>
            The batches underneath this query
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.AfterBatches">
            <summary>
            The batches which should run after the user batches 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.BatchSummaries">
            <summary>
            The summaries of the batches underneath this query
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.ExecutionTask">
            <summary>
            Storage for the async task for execution. Set as internal in order to await completion
            in unit tests.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.HasExecuted">
            <summary>
            Whether or not the query has completed executed, regardless of success or failure
            </summary>
            <remarks>
            Don't touch the setter unless you're doing unit tests!
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.HasCancelled">
            <summary>
            if the query has been cancelled (before execution started)
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.HasErrored">
            <summary>
            if the query has errored out (before batch execution started)
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.QueryText">
            <summary>
            The text of the query to execute
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.Cancel">
            <summary>
            Cancels the query by issuing the cancellation token
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.Execute">
            <summary>
            Launches the asynchronous process for executing the query
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.GetSubset(System.Int32,System.Int32,System.Int64,System.Int32)">
            <summary>
            Retrieves a subset of the result sets
            </summary>
            <param name="batchIndex">The index for selecting the batch item</param>
            <param name="resultSetIndex">The index for selecting the result set</param>
            <param name="startRow">The starting row of the results</param>
            <param name="rowCount">How many rows to retrieve</param>
            <returns>A subset of results</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.GetExecutionPlan(System.Int32,System.Int32)">
            <summary>
            Retrieves a subset of the result sets
            </summary>
            <param name="batchIndex">The index for selecting the batch item</param>
            <param name="resultSetIndex">The index for selecting the result set</param>
            <returns>The Execution Plan, if the result set has one</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.SaveAs(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsRequestParams,Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.IFileStreamFactory,Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.SaveAsAsyncEventHandler,Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.SaveAsFailureAsyncEventHandler)">
            <summary>
            Saves the requested results to a file format of the user's choice
            </summary>
            <param name="saveParams">Parameters for the save as request</param>
            <param name="fileFactory">
            Factory for creating the reader/writer pair for the requested output format
            </param>
            <param name="successHandler">Delegate to call when the request completes successfully</param>
            <param name="failureHandler">Delegate to call if the request fails</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.ConnectionOwnerURI">
            <summary>
            Changes the OwnerURI for the editor connection.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.ExecuteInternal">
            <summary>
            Executes this query asynchronously and collects all result sets
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.OnInfoMessage(System.Object,Microsoft.Data.SqlClient.SqlInfoMessageEventArgs)">
            <summary>
            Handler for database messages during query execution
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.AddBatch(System.String,System.Collections.Generic.ICollection{Microsoft.SqlTools.ServiceLayer.QueryExecution.Batch},Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.IFileStreamFactory)">
            <summary>
            Function to add a new batch to a Batch set
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.DoesSupportExecutionPlan(Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo)">
            <summary>
            Does this connection support XML Execution plans
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService">
            <summary>
            Service for executing queries
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.Instance">
            <summary>
            Singleton instance of the query execution service
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.BufferFileStreamFactory">
            <summary>
            File factory to be used to create a buffer file for results.
            </summary>
            <remarks>
            Made internal here to allow for overriding in unit testing
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.BufferFileFactory">
            <summary>
            File factory to be used to create a buffer file for results
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.CsvFileFactory">
            <summary>
            File factory to be used to create CSV files from result sets. Set to internal in order
            to allow overriding in unit testing
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.ExcelFileFactory">
            <summary>
            File factory to be used to create Excel files from result sets. Set to internal in order
            to allow overriding in unit testing
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.JsonFileFactory">
            <summary>
            File factory to be used to create JSON files from result sets. Set to internal in order
            to allow overriding in unit testing
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.XmlFileFactory">
            <summary>
            File factory to be used to create XML files from result sets. Set to internal in order
            to allow overriding in unit testing
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.ActiveQueries">
            <summary>
            The collection of active queries
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.ActiveQueryExecutionSettings">
            <summary>
            The collection of query execution options
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.WorkTask">
            <summary>
            Internal task for testability
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.ConnectionService">
            <summary>
            Instance of the connection service, used to get the connection info for a given owner URI
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.queries">
            <summary>
            Internal storage of active queries, lazily constructed as a threadsafe dictionary
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.queryExecutionSettings">
            <summary>
            Internal storage of active query settings
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.Settings">
            <summary>
            Settings that will be used to execute queries. Internal for unit testing
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.simpleExecuteRequests">
            <summary>
            Holds a map from the simple execute unique GUID and the underlying task that is being ran
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.ActiveSimpleExecuteRequests">
            <summary>
            Holds a map from the simple execute unique GUID and the underlying task that is being ran
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the service with the service host, registers request handlers and shutdown
            event handler.
            </summary>
            <param name="serviceHost">The service host instance to register with</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.HandleExecuteRequest(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ExecuteRequestParamsBase,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ExecuteRequestResult})">
            <summary>
            Handles request to execute a selection of a document in the workspace service
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.HandleSimpleExecuteRequest(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.SimpleExecuteParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.SimpleExecuteResult})">
            <summary>
            Handles a request to execute a string and return the result
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.HandleConnectionUriChangedNotification(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ConnectionUriChangedParams,Microsoft.SqlTools.Hosting.Protocol.EventContext)">
            <summary>
            Handles a request to change the uri associated with an active query and connection info.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.HandleResultSubsetRequest(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SubsetParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SubsetResult})">
            <summary>
            Handles a request to get a subset of the results of this query
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.HandleQueryExecutionOptionsRequest(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryExecutionOptionsParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{System.Boolean})">
            <summary>
            Handles a request to set query execution options
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.HandleExecutionPlanRequest(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryExecutionPlanParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryExecutionPlanResult})">
            <summary>
            Handles a request to get an execution plan
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.HandleDisposeRequest(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryDisposeParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryDisposeResult})">
            <summary>
            Handles a request to dispose of this query
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.HandleCancelRequest(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryCancelParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.QueryCancelResult})">
            <summary>
            Handles a request to cancel this query if it is in progress
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.HandleSaveResultsAsCsvRequest(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsCsvRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultRequestResult})">
            <summary>
            Process request to save a resultSet to a file in CSV format
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.HandleSaveResultsAsExcelRequest(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsExcelRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultRequestResult})">
            <summary>
            Process request to save a resultSet to a file in Excel format
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.HandleSaveResultsAsJsonRequest(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsJsonRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultRequestResult})">
            <summary>
            Process request to save a resultSet to a file in JSON format
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.HandleSaveResultsAsXmlRequest(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsAsXmlRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultRequestResult})">
            <summary>
            Process request to save a resultSet to a file in XML format
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.InterServiceExecuteQuery(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.ExecuteRequests.ExecuteRequestParamsBase,Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo,Microsoft.SqlTools.Hosting.Protocol.IEventSender,System.Func{Microsoft.SqlTools.ServiceLayer.QueryExecution.Query,System.Threading.Tasks.Task{System.Boolean}},System.Func{System.String,System.Threading.Tasks.Task},Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.QueryAsyncEventHandler,Microsoft.SqlTools.ServiceLayer.QueryExecution.Query.QueryAsyncErrorEventHandler,System.Boolean)">
            <summary>
            Query execution meant to be called from another service. Utilizes callbacks to allow
            custom actions to be taken upon creation of query and failure to create query.
            </summary>
            <param name="executeParams">Parameters for execution</param>
            <param name="connInfo">Connection Info to use; will try and get the connection from owneruri if not provided</param>
            <param name="queryEventSender">Event sender that will send progressive events during execution of the query</param>
            <param name="queryCreateSuccessFunc">
            Callback for when query has been created successfully. If result is <c>true</c>, query
            will be executed asynchronously. If result is <c>false</c>, query will be disposed. May
            be <c>null</c>
            </param>
            <param name="queryCreateFailFunc">
            Callback for when query failed to be created successfully. Error message is provided.
            May be <c>null</c>.
            </param>
            <param name="querySuccessFunc">
            Callback to call when query has completed execution successfully. May be <c>null</c>.
            </param>
            <param name="queryFailureFunc">
            Callback to call when query has completed execution with errors. May be <c>null</c>.
            </param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.InterServiceDisposeQuery(System.String,System.Func{System.Threading.Tasks.Task},System.Func{System.String,System.Threading.Tasks.Task})">
            <summary>
            Query disposal meant to be called from another service. Utilizes callbacks to allow
            custom actions to be performed on success or failure.
            </summary>
            <param name="ownerUri">The identifier of the query to be disposed</param>
            <param name="successAction">Action to perform on success</param>
            <param name="failureAction">Action to perform on failure</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.InterServiceResultSubset(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SubsetParams)">
            <summary>
            Retrieves the requested subset of rows from the requested result set. Intended to be
            called by another service.
            </summary>
            <param name="subsetParams">Parameters for the subset to retrieve</param>
            <returns>The requested subset</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The requested query does not exist</exception>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.HandleDidCloseTextDocumentNotification(System.String,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile,Microsoft.SqlTools.Hosting.Protocol.EventContext)">
            <summary>
            Handle the file open notification
            </summary>
            <param name="scriptFile"></param>
            <param name="eventContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.GetSqlTextFromSelectionData(System.String,Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SelectionData)">
            <summary>
            Return portion of document corresponding to the selection range
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.GetSqlStatementAtPosition(System.String,System.Int32,System.Int32)">
            <summary>
            Return portion of document corresponding to the statement at the line and column
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.UpdateSettings(Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings,Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings,Microsoft.SqlTools.Hosting.Protocol.EventContext)">
            Internal for testing purposes
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.QueryExecutionService.isQueryEditor(System.String)">
            <summary>
            Verify if the URI maps to a query editor document
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.QuerySettingsHelper">
            <summary>
            Service for executing queries
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultOnlyContext`1">
            <summary>
            Implementation of IEventSender that swallows events without doing anything with them.
            In the future this class could be used to roll up all the events and send
            them all at once
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet">
            <summary>
            Class that represents a resultset the was generated from a query. Contains logic for
            storing and retrieving results. Is contained by a Batch class.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.disposed">
            <summary>
            For IDisposable pattern, whether or not object has been disposed
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.fileOffsets">
            <summary>
            A list of offsets into the buffer file that correspond to where rows start
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.fileStreamFactory">
            <summary>
            The factory to use to get reading/writing handlers
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.hasStartedRead">
            <summary>
            Whether or not the result set has been read in from the database,
            set as internal in order to fake value in unit tests.
            This gets set as soon as we start reading.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.hasCompletedRead">
            <summary>
            Set when all results have been read for this resultSet from the server
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.isSingleColumnXmlJsonResultSet">
            <summary>
            Whether resultSet is a 'for xml' or 'for json' result
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.outputFileName">
            <summary>
            The name of the temporary file we're using to output these results in
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.rowCountOverride">
            <summary>
            Row count to use in special scenarios where we want to override the number of rows.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.specialAction">
            <summary>
            The special action which applied to this result set
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.totalBytesWritten">
            <summary>
            Total number of bytes written to the file. Used to jump to end of the file for append
            scenarios. Internal for unit test validation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.#ctor(System.Int32,System.Int32,Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.IFileStreamFactory)">
            <summary>
            Creates a new result set and initializes its state
            </summary>
            <param name="ordinal">The ID of the resultset, the ordinal of the result within the batch</param>
            <param name="batchOrdinal">The ID of the batch, the ordinal of the batch within the query</param>
            <param name="factory">Factory for creating a reader/writer</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.SaveAsAsyncEventHandler">
            <summary>
            Asynchronous handler for when saving query results succeeds
            </summary>
            <param name="parameters">Request parameters for identifying the request</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.SaveAsFailureAsyncEventHandler">
            <summary>
            Asynchronous handler for when saving query results fails
            </summary>
            <param name="parameters">Request parameters for identifying the request</param>
            <param name="message">Message to send back describing why the request failed</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.ResultSetAsyncEventHandler">
            <summary>
            Asynchronous handler for when a resultset is available/updated/completed
            </summary>
            <param name="resultSet">The result set that completed</param>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.ResultCompletion">
            <summary>
            Event that will be called when the result set has completed execution
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.ResultAvailable">
            <summary>
            Event that will be called when the resultSet first becomes available. This is as soon as we start reading the results.
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.ResultUpdated">
            <summary>
            Event that will be called when additional rows in the result set are available (rowCount available has increased)
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.Columns">
            <summary>
            The columns for this result set
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.Id">
            <summary>
            ID of the result set, relative to the batch
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.BatchId">
            <summary>
            ID of the batch set, relative to the query
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.RowCount">
            <summary>
            The number of rows for this result set
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.SaveTasks">
            <summary>
            All save tasks currently saving this ResultSet
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.Summary">
            <summary>
            Generates a summary of this result set
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.GetRow(System.Int64)">
            <summary>
            Returns a specific row from the result set.
            </summary>
            <remarks>
            Creates a new file reader for a single reader. This method should only be used for one
            off requests, not for requesting a large subset of the results.
            </remarks>
            <param name="rowId">The internal ID of the row to read</param>
            <returns>The requested row</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.GetSubset(System.Int64,System.Int32)">
            <summary>
            Generates a subset of the rows from the result set
            </summary>
            <param name="startRow">The starting row of the results</param>
            <param name="rowCount">How many rows to retrieve</param>
            <returns>A subset of results</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.GetExecutionPlan">
            <summary>
            Generates the execution plan from the table returned
            </summary>
            <returns>An execution plan object</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.ReadResultToEnd(System.Data.Common.DbDataReader,System.Threading.CancellationToken)">
            <summary>
            Reads from the reader until there are no more results to read
            </summary>
            <param name="dbDataReader">The data reader for getting results from the db</param>
            <param name="cancellationToken">Cancellation token for cancelling the query</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.RemoveRow(System.Int64)">
            <summary>
            Removes a row from the result set cache
            </summary>
            <param name="internalId">Internal ID of the row</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.AddRow(System.Data.Common.DbDataReader)">
            <summary>
            Adds a new row to the result set by reading the row from the provided db data reader
            </summary>
            <param name="dbDataReader">The result of a command to insert a new row should be UNREAD</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.UpdateRow(System.Int64,System.Data.Common.DbDataReader)">
            <summary>
            Updates the values in a row with the
            </summary>
            <param name="rowId"></param>
            <param name="dbDataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.SaveAs(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SaveResultsRequestParams,Microsoft.SqlTools.ServiceLayer.QueryExecution.DataStorage.IFileStreamFactory,Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.SaveAsAsyncEventHandler,Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.SaveAsFailureAsyncEventHandler)">
            <summary>
            Saves the contents of this result set to a file using the IFileStreamFactory provided
            </summary>
            <param name="saveParams">Parameters for saving the results to a file</param>
            <param name="fileFactory">
            Factory for creating a stream reader/writer combo for writing results to disk
            </param>
            <param name="successHandler">Handler for a successful write of all rows</param>
            <param name="failureHandler">Handler for unsuccessful write of all rows</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.SendResultAvailableOrUpdated(System.Object)">
            <summary>
            Sends the ResultsUpdated message if the number of rows has changed since last send.
            </summary>
            <param name="stateInfo"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.SingleColumnXmlJsonResultSet">
            <summary>
            If the result set represented by this class corresponds to a single XML
            column that contains results of "for xml" query, set isXml = true
            If the result set represented by this class corresponds to a single JSON
            column that contains results of "for json" query, set isJson = true
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.CheckForIsJson">
            <summary>
            Check columns for json type and set isJson if needed
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.ProcessSpecialAction">
            <summary>
            Determine the special action, if any, for this result set
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.ResultSet.AppendRowToBuffer(System.Data.Common.DbDataReader)">
            <summary>
            Adds a single row to the end of the buffer file. INTENDED FOR SINGLE ROW INSERTION ONLY.
            </summary>
            <param name="dbDataReader">An UNREAD db data reader</param>
            <returns>The offset into the file where the row was inserted</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.SerializationService.HandleSerializeStartRequest(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SerializeDataStartRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SerializeDataResult})">
            <summary>
            Begin to process request to save a resultSet to a file in CSV format
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.SerializationService.HandleSerializeContinueRequest(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SerializeDataContinueRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.SerializeDataResult})">
            <summary>
            Process request to save a resultSet to a file in CSV format
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.QueryExecution.SpecialAction">
            <summary>
            Class that represents a Special Action which occured by user request during the query 
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.SpecialAction.#ctor">
            <summary>
            The type of XML execution plan that is contained with in a result set  
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.SpecialAction.None">
            <summary>
            No Special action performed 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.QueryExecution.SpecialAction.ExpectYukonXMLShowPlan">
            <summary>
            Contains an XML execution plan result set  
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.QueryExecution.SpecialAction.CombineSpecialAction(Microsoft.SqlTools.ServiceLayer.QueryExecution.SpecialAction)">
            <summary>
            Aggregate this special action with the input
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareCancelParams">
            <summary>
            Parameters for a schema compare cancel request
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareCancelParams.OperationId">
            <summary>
            Operation id of the schema compare operation
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareCancellationRequest">
            <summary>
            Defines the Schema Compare cancel comparison request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareGenerateScriptParams">
            <summary>
            Parameters for a schema compare generate script request.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareGenerateScriptRequest">
            <summary>
            Defines the Schema Compare generate script request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareNodeParams">
            <summary>
            Parameters for a schema compare include specific node request
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareNodeParams.OperationId">
            <summary>
            Operation id of the schema compare operation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareNodeParams.DiffEntry">
            <summary>
            Difference to Include or exclude
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareNodeParams.IncludeRequest">
            <summary>
            Indicator for include or exclude request
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareNodeParams.TaskExecutionMode">
            <summary>
            Execution mode for the operation. Default is execution
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareIncludeExcludeResult">
            <summary>
            Parameters returned from a schema compare include/exclude request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareIncludeExcludeResult.AffectedDependencies">
            <summary>
            Dependencies that may have been affected by the include/exclude request
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareIncludeExcludeResult.BlockingDependencies">
            <summary>
            Dependencies that caused the include/exclude to fail
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareObjectId.NameParts">
            <summary>
            Name to create object identifier
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareObjectId.SqlObjectType">
            <summary>
            sql object type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareOpenScmpParams">
            <summary>
            Parameters for a schema compare open scmp file request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareOpenScmpParams.FilePath">
            <summary>
            filepath of scmp
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareOpenScmpResult">
            <summary>
            Parameters returned from a schema compare open scmp request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareOpenScmpResult.SourceEndpointInfo">
            <summary>
            Gets or sets the current source endpoint info
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareOpenScmpResult.TargetEndpointInfo">
            <summary>
            Gets or sets the current target endpoint info
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareOpenScmpResult.OriginalTargetName">
            <summary>
            Gets or sets the original target name. This is the initial target name, not necessarily the same as TargetEndpointInfo if they were swapped
            The original target name is used to determine whether to use ExcludedSourceElements or ExcludedTargetElements if source and target were swapped
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareOpenScmpResult.OriginalTargetConnectionString">
            <summary>
            Gets or sets the original target connection string. This is the initial target connection string, not necessarily the same as TargetEndpointInfo if they were swapped
            The target connection string is necessary if the source and target are a dacpac and db with the same name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareOpenScmpResult.DeploymentOptions">
            <summary>
            Gets or sets the deployment options
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareOpenScmpResult.ExcludedSourceElements">
            <summary>
            Gets or sets the excluded source elements. This is based on the initial source, not necessarily the same as SourceEndpointInfo if they were swapped
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareOpenScmpResult.ExcludedTargetElements">
            <summary>
            Gets or sets the excluded target elements. This is based on the initial target, not necessarily the same as TargetEndpointInfo if they were swapped
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareOpenScmpRequest">
            <summary>
            Defines the Schema Compare open scmp request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareGetOptionsParams">
            <summary>
            Defines paramaters for Get default options call
            No parameters required so far
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareOptionsResult">
            <summary>
            Gets or sets the result of get default options call
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareGetDefaultOptionsRequest">
            <summary>
            Defines the Schema Compare request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaComparePublishDatabaseChangesParams">
            <summary>
            Parameters for a schema compare publish database changes request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaComparePublishDatabaseChangesParams.OperationId">
            <summary>
            Operation id of the schema compare operation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaComparePublishDatabaseChangesParams.TargetServerName">
            <summary>
            Name of target server
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaComparePublishDatabaseChangesParams.TargetDatabaseName">
            <summary>
            Name of target database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaComparePublishDatabaseChangesParams.TaskExecutionMode">
            <summary>
            Execution mode for the operation. Default is execution
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaComparePublishDatabaseChangesRequest">
            <summary>
            Defines the Schema Compare publish database changes request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaComparePublishProjectChangesParams">
            <summary>
            Parameters for a schema compare publish project changes request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaComparePublishProjectChangesParams.OperationId">
            <summary>
            Operation id of the schema compare operation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaComparePublishProjectChangesParams.TargetProjectPath">
            <summary>
            Path of project folder
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaComparePublishProjectChangesParams.TargetFolderStructure">
            <summary>
            folder structure of target folder
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaComparePublishProjectChangesParams.TaskExecutionMode">
            <summary>
            Execution mode for the operation. Default is execution
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaComparePublishProjectChangesRequest">
            <summary>
            Defines the Schema Compare publish project changes request type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareEndpointType">
            <summary>
            Types of schema compare endpoints
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareEndpointInfo">
            <summary>
            Info needed from endpoints for schema comparison
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareEndpointInfo.EndpointType">
            <summary>
            Gets or sets the type of the endpoint
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareEndpointInfo.ProjectFilePath">
            <summary>
            Gets or sets the project file path
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareEndpointInfo.TargetScripts">
            <summary>
            Gets or sets the scripts included in project
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareEndpointInfo.DataSchemaProvider">
            <summary>
            Gets or sets the project data schema provider
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareEndpointInfo.PackageFilePath">
            <summary>
            Gets or sets package filepath
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareEndpointInfo.DatabaseName">
            <summary>
            Gets or sets name for the database
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareEndpointInfo.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareEndpointInfo.ConnectionDetails">
            <summary>
            Connection details
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareParams">
            <summary>
            Parameters for a schema compare request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareParams.OperationId">
            <summary>
            Operation id of the schema compare operation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareParams.SourceEndpointInfo">
            <summary>
            Gets or sets the source endpoint info
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareParams.TargetEndpointInfo">
            <summary>
            Gets or sets the target endpoint info
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareParams.TaskExecutionMode">
            <summary>
            Executation mode for the operation. Default is execution
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareParams.DeploymentOptions">
            <summary>
            gets or sets the deployment options for schema compare
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareResult">
            <summary>
            Parameters returned from a schema compare request.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareRequest">
            <summary>
            Defines the Schema Compare request type
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareSaveScmpParams.ScmpFilePath">
            <summary>
            Gets or sets the File Path for scmp
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareSaveScmpParams.ExcludedSourceObjects">
            <summary>
            Excluded source objects
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareSaveScmpParams.ExcludedTargetObjects">
            <summary>
            Excluded Target objects
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareGenerateScriptOperation">
            <summary>
            Class to represent an in-progress schema compare generate script operation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareGenerateScriptOperation.OperationId">
            <summary>
            Gets the unique id associated with this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareGenerateScriptOperation.Dispose">
            <summary>
            Disposes the operation.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareIncludeExcludeNodeOperation">
            <summary>
            Class to represent an in-progress schema compare include/exclude Node operation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareIncludeExcludeNodeOperation.OperationId">
            <summary>
            Gets the unique id associated with this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareIncludeExcludeNodeOperation.Execute(Microsoft.SqlTools.ServiceLayer.TaskServices.TaskExecutionMode)">
            <summary>
            Exclude will return false if included dependencies are found. Include will also include dependencies that need to be included. 
            This is the same behavior as SSDT
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareIncludeExcludeNodeOperation.Dispose">
            <summary>
            Disposes the operation.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareOpenScmpOperation">
            <summary>
            Schema compare load scmp operation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareOpenScmpOperation.ErrorMessage">
            <summary>
            The error occurred during operation
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareOpenScmpOperation.Dispose">
            <summary>
            Disposes the operation.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareOperation">
            <summary>
            Schema compare operation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareOperation.OperationId">
            <summary>
            Gets the unique id associated with this instance.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareOperation.ErrorMessage">
            <summary>
            The error occurred during operation
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareOperation.Dispose">
            <summary>
            Disposes the operation.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaComparePublishDatabaseChangesOperation">
            <summary>
            Class to represent an in-progress schema compare publish database changes operation
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaComparePublishProjectChangesOperation">
            <summary>
            Class to represent an in-progress schema compare publish project changes operation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareSaveScmpOperation.OperationId">
            <summary>
            Gets the unique id associated with this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareSaveScmpOperation.Dispose">
            <summary>
            Disposes the operation.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareService">
            <summary>
            Main class for SchemaCompare service
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the service instance
            </summary>
            <param name="serviceHost"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareService.HandleSchemaCompareRequest(Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareResult})">
            <summary>
            Handles schema compare request
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareService.HandleSchemaCompareCancelRequest(Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareCancelParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Utility.ResultStatus})">
            <summary>
            Handles schema compare cancel request
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareService.HandleSchemaCompareGenerateScriptRequest(Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareGenerateScriptParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Utility.ResultStatus})">
            <summary>
            Handles request for schema compare generate deploy script
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareService.HandleSchemaComparePublishDatabaseChangesRequest(Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaComparePublishDatabaseChangesParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Utility.ResultStatus})">
            <summary>
            Handles request for schema compare publish database changes script
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareService.HandleSchemaComparePublishProjectChangesRequest(Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaComparePublishProjectChangesParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlServer.Dac.Compare.SchemaComparePublishProjectResult})">
            <summary>
            Handles request for schema compare publish database changes script
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareService.HandleSchemaCompareIncludeExcludeNodeRequest(Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareNodeParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Utility.ResultStatus})">
            <summary>
            Handles request for exclude incude node in Schema compare result
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareService.HandleSchemaCompareGetDefaultOptionsRequest(Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareGetOptionsParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareOptionsResult})">
            <summary>
            Handles request to create default deployment options as per DacFx
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareService.HandleSchemaCompareOpenScmpRequest(Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareOpenScmpParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareOpenScmpResult})">
            <summary>
            Handles schema compare open SCMP request
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareService.HandleSchemaCompareSaveScmpRequest(Microsoft.SqlTools.ServiceLayer.SchemaCompare.Contracts.SchemaCompareSaveScmpParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Utility.ResultStatus})">
            <summary>
            Handles schema compare save SCMP request
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareUtils">
            <summary>
            Internal class for utilities shared between multiple schema compare operations
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlTools.ServiceLayer.SchemaCompare.SchemaCompareUtils.CreateSchemaCompareOptions(Microsoft.SqlTools.ServiceLayer.DacFx.Contracts.DeploymentOptions)" -->
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingCancelParams">
            <summary>
            Parameters to cancel a scripting request.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingCancelResult">
            <summary>
            Parameters returned from a scripting request.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingCancelRequest">
            <summary>
            Defines the scripting cancel request type.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingCompleteParams">
            <summary>
            Parameters sent to when a scripting operation has completed.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingCompleteParams.ErrorDetails">
            <summary>
            Get or sets the error details for an error that occurred during the scripting operation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingCompleteParams.ErrorMessage">
            <summary>
            Get or sets the error message for an error that occurred during the scripting operation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingCompleteParams.HasError">
            <summary>
            Get or sets a value to indicate an error occurred during the scripting operation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingCompleteParams.Canceled">
            <summary>
            Get or sets a value to indicate the scripting operation was canceled.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingCompleteParams.Success">
            <summary>
            Get or sets a value to indicate the scripting operation successfully completed.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingCompleteEvent">
            <summary>
            Event sent to indicate a scripting operation has completed.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingEventParams">
            <summary>
            Base class for all scripting event parameters.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingEventParams.OperationId">
            <summary>
            Gets or sets the operation id of the scripting operation this event is associated with.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingEventParams.SequenceNumber">
            <summary>
            Gets or sets the sequence number.  The sequence number starts at 1, and is incremented each time a scripting event is 
            raised for the current scripting operation.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingListObjectsCompleteParams">
            <summary>
            Parameters sent when a list objects operation has completed.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingListObjectsCompleteParams.ScriptingObjects">
            <summary>
            Gets or sets the list of database objects returned from the list objects operation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingListObjectsCompleteParams.Count">
            <summary>
            Gets or sets the count of database object returned from the list objects operation.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingListObjectsCompleteEvent">
            <summary>
            Event sent to indicate a list objects operation has completed.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingListObjectsParams">
            <summary>
            Parameters for a list objects request.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingListObjectsResult">
            <summary>
            Parameters returned from a list objects request.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingListObjectsRequest">
            <summary>
            Defines the scripting list objects request type.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingObject">
            <summary>
            Class to represent a database object that can be scripted.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingObject.Type">
            <summary>
            Gets or sets the database object type.  
            </summary>
            <remarks>
            This underlying values are determined by the SqlScriptPublishModel.GetDatabaseObjectTypes() and
            can change depending on the version of SMO used by the tools service.  Values can be: 
                Table,
                View,
                StoredProcedure,
                UserDefinedFunction,
                UserDefinedDataType,
                User,
                Default,
                Rule,
                DatabaseRole,
                ApplicationRole,
                SqlAssembly,
                DdlTrigger,
                Synonym,
                XmlSchemaCollection,
                Schema,
                PlanGuide,
                UserDefinedType,
                UserDefinedAggregate,
                FullTextCatalog,
                UserDefinedTableType
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingObject.Schema">
            <summary>
            Gets or sets the schema of the database object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingObject.Name">
            <summary>
            Gets or sets the database object name.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingObject.ParentName">
            <summary>
            Gets or sets the parent object name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingObject.ParentTypeName">
            <summary>
            Gets or sets the parent object type name, such as Table, View, etc.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingOperationType">
            <summary>
            Scripting Operation type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions">
            <summary>
            Defines the scripting options.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptAnsiPadding">
            <summary>
            Generate ANSI padding statements
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.AppendToFile">
            <summary>
            Append the generated script to a file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ContinueScriptingOnError">
            <summary>
            Continue to script if an error occurs. Otherwise, stop.
            </summary>
            <remarks>
            The default is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ConvertUDDTToBaseType">
            <summary>
            Convert user-defined data types to base types.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.GenerateScriptForDependentObjects">
            <summary>
            Generate script for dependent objects for each object scripted.
            </summary>
            <remarks>
            The default is false.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.IncludeDescriptiveHeaders">
            <summary>
            Include descriptive headers for each object generated.
            </summary>
            <remarks>
            The default is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.IncludeIfNotExists">
            <summary>
            Check that an object with the given name exists before dropping or altering or that an object with the given name does not exist before creating.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.IncludeVarDecimal">
            <summary>
            Script options to set vardecimal storage format.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptDriIncludeSystemNames">
            <summary>
            Include system generated constraint names to enforce declarative referential integrity.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.IncludeUnsupportedStatements">
            <summary>
            Include statements in the script that are not supported on the specified SQL Server database engine type.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.SchemaQualify">
            <summary>
            Prefix object names with the object schema.
            </summary>
            <remarks>
            The default is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.Bindings">
            <summary>
            Script options to set bindings option.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.Collation">
            <summary>
            Script the objects that use collation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.Default">
            <summary>
            Script the default values.
            </summary>
            <remarks>
            The default is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptCreateDrop">
            <summary>
            Script Object CREATE/DROP statements.  
            Possible values: 
              ScriptCreate
              ScriptDrop
              ScriptCreateDrop
            </summary>
            <remarks>
            The default is ScriptCreate.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptExtendedProperties">
            <summary>
            Script the Extended Properties for each object scripted.
            </summary>
            <remarks>
            The default is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptCompatibilityOption">
            <summary>
            Script only features compatible with the specified version of SQL Server.  Possible values:
              Script90Compat
              Script100Compat
              Script105Compat
              Script110Compat
              Script120Compat
              Script130Compat
              Script140Compat
              Script150Compat
              Script160Compat
            </summary>
            <remarks>
            The default is Script140Compat.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.TargetDatabaseEngineType">
            <summary>
            Script only features compatible with the specified SQL Server database engine type.
            Possible Values:
              SingleInstance
              SqlAzure
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.TargetDatabaseEngineEdition">
            <summary>
            Script only features compatible with the specified SQL Server database engine edition.
            Possible Values:
              SqlServerPersonalEdition
              SqlServerStandardEdition 
              SqlServerEnterpriseEdition 
              SqlServerExpressEdition
              SqlAzureDatabaseEdition
              SqlDatawarehouseEdition
              SqlServerStretchEdition 
              SqlManagedInstanceEdition
              SqlServerOnDemandEdition
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptLogins">
            <summary>
            Script all logins available on the server. Passwords will not be scripted.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptObjectLevelPermissions">
            <summary>
            Generate object-level permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptOwner">
            <summary>
            Script owner for the objects.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptStatistics">
            <summary>
            Script statistics, and optionally include histograms, for each selected table or view.
            Possible values:
              ScriptStatsNone
              ScriptStatsDDL
              ScriptStatsAll
            </summary>
            <remarks>
            The default value is ScriptStatsNone.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptUseDatabase">
            <summary>
            Generate USE DATABASE statement.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.TypeOfDataToScript">
            <summary>
            Generate script that contains schema only or schema and data.
            Possible Values:
              SchemaAndData
              DataOnly
              SchemaOnly
            </summary>
            <remarks>
            The default value is SchemaOnly.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptChangeTracking">
            <summary>
            Scripts the change tracking information.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptCheckConstraints">
            <summary>
            Script the check constraints for each table or view scripted.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptDataCompressionOptions">
            <summary>
            Scripts the data compression information.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptForeignKeys">
            <summary>
            Script the foreign keys for each table scripted.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptFullTextIndexes">
            <summary>
            Script the full-text indexes for each table or indexed view scripted.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptIndexes">
            <summary>
            Script the indexes (including XML and clustered indexes) for each table or indexed view scripted.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptPrimaryKeys">
            <summary>
            Script the primary keys for each table or view scripted
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.ScriptTriggers">
            <summary>
            Script the triggers for each table or view scripted
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptOptions.UniqueKeys">
            <summary>
            Script the unique keys for each table or view scripted.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingPlanNotificationParams">
            <summary>
            Parameters to indicate the script operation has resolved the objects to be scripted.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingPlanNotificationParams.ScriptingObjects">
            <summary>
            Gets or sets the list of database objects whose progress has changed.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingPlanNotificationParams.Count">
            <summary>
            Gets or sets the count of database objects whose progress has changed.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingPlanNotificationEvent">
            <summary>
            Event sent to indicate a script operation has determined which objects will be scripted.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingProgressNotificationParams">
            <summary>
            Parameters sent when a scripting operation has made progress.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingProgressNotificationParams.ScriptingObject">
            <summary>
            Gets or sets the scripting object whose progress has changed.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingProgressNotificationParams.Status">
            <summary>
            Gets or sets the status of the scripting operation for the scripting object.
            </summary>
            <remarks>
            Values can be: 'Completed', 'Progress', and 'Error'.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingProgressNotificationParams.CompletedCount">
            <summary>
            Gets or count of completed scripting operations.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingProgressNotificationParams.TotalCount">
            <summary>
            Gets this total count of objects to script.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingProgressNotificationParams.ErrorDetails">
            <summary>
            Gets or sets the error details if an error occurred scripting a database object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingProgressNotificationParams.ErrorMessage">
            <summary>
            Get or sets the error message for an error that occurred scripting a database object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingProgressNotificationEvent">
            <summary>
            Event to indicate the scripting operation has made progress.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingParams">
            <summary>
            Parameters for a script request.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingParams.FilePath">
            <summary>
            Gets or sets the file path used when writing out the script.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingParams.ScriptDestination">
            <summary>
            Gets or sets whether scripting to a single file or file per object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingParams.ConnectionString">
            <summary>
            Gets or sets connection string of the target database the scripting operation will run against.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingParams.ScriptingObjects">
            <summary>
            Gets or sets a list of scripting objects to script.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingParams.IncludeObjectCriteria">
            <summary>
            Gets or sets a list of scripting object which specify the include criteria of objects to script.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingParams.ExcludeObjectCriteria">
            <summary>
            Gets or sets a list of scripting object which specify the exclude criteria of objects to not script.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingParams.IncludeSchemas">
            <summary>
            Gets or sets a list of schema name of objects to script.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingParams.ExcludeSchemas">
            <summary>
            Gets or sets a list of schema name of objects to not script.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingParams.IncludeTypes">
            <summary>
            Gets or sets a list of type name of objects to script.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingParams.ExcludeTypes">
            <summary>
            Gets or sets a list of type name of objects to not script
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingParams.ScriptOptions">
            <summary>
            Gets or sets the scripting options.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingParams.OwnerUri">
            <summary>
            Gets or sets the connection owner URI
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingParams.Operation">
            <summary>
            The script operation
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingResult">
            <summary>
            Parameters returned from a script request.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingRequest">
            <summary>
            Defines the scripting request type.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions">
            <summary>
            A wrpaper of ScriptOptions to map the option name with the oen in SMO.ScriptingOptions
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptAnsiPadding">
            <summary>
            Generate ANSI padding statements
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.AppendToFile">
            <summary>
            Append the generated script to a file
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ContinueScriptingOnError">
            <summary>
            Continue to script if an error occurs. Otherwise, stop.
            </summary>
            <remarks>
            The default is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ConvertUDDTToBaseType">
            <summary>
            Convert user-defined data types to base types.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.GenerateScriptForDependentObjects">
            <summary>
            Generate script for dependent objects for each object scripted.
            </summary>
            <remarks>
            The default is false.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.IncludeDescriptiveHeaders">
            <summary>
            Include descriptive headers for each object generated.
            </summary>
            <remarks>
            The default is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.IncludeIfNotExists">
            <summary>
            Check that an object with the given name exists before dropping or altering or that an object with the given name does not exist before creating.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.IncludeVarDecimal">
            <summary>
            Script options to set vardecimal storage format.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptDriIncludeSystemNames">
            <summary>
            Include system generated constraint names to enforce declarative referential integrity.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.IncludeUnsupportedStatements">
            <summary>
            Include statements in the script that are not supported on the specified SQL Server database engine type.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.SchemaQualify">
            <summary>
            Prefix object names with the object schema.
            </summary>
            <remarks>
            The default is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.Bindings">
            <summary>
            Script options to set bindings option.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.Collation">
            <summary>
            Script the objects that use collation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.Default">
            <summary>
            Script the default values.
            </summary>
            <remarks>
            The default is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptCreateDrop">
            <summary>
            Script Object CREATE/DROP statements.  
            Possible values: 
              ScriptCreate
              ScriptDrop
              ScriptCreateDrop
              ScriptSelect
            </summary>
            <remarks>
            The default is ScriptCreate.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptExtendedProperties">
            <summary>
            Script the Extended Properties for each object scripted.
            </summary>
            <remarks>
            The default is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptCompatibilityOption">
            <summary>
            Script only features compatible with the specified version of SQL Server.  Possible values:
              Script90Compat
              Script100Compat
              Script105Compat
              Script110Compat
              Script120Compat
              Script130Compat
              Script140Compat
              Script150Compat
              Script160Compat
            </summary>
            <remarks>
            The default is Script140Compat.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.TargetDatabaseEngineType">
            <summary>
            Script only features compatible with the specified SQL Server database engine type.
            Possible Values:
              SingleInstance
              SqlAzure
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.TargetDatabaseEngineEdition">
            <summary>
            Script only features compatible with the specified SQL Server database engine edition.
            Possible Values:
              SqlServerPersonalEdition
              SqlServerStandardEdition 
              SqlServerEnterpriseEdition 
              SqlServerExpressEdition
              SqlAzureDatabaseEdition
              SqlDatawarehouseEdition
              SqlServerStretchEdition 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptLogins">
            <summary>
            Script all logins available on the server. Passwords will not be scripted.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptObjectLevelPermissions">
            <summary>
            Generate object-level permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptOwner">
            <summary>
            Script owner for the objects.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptStatistics">
            <summary>
            Script statistics, and optionally include histograms, for each selected table or view.
            Possible values:
              ScriptStatsNone
              ScriptStatsDDL
              ScriptStatsAll
            </summary>
            <remarks>
            The default value is ScriptStatsNone.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptUseDatabase">
            <summary>
            Generate USE DATABASE statement.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.TypeOfDataToScript">
            <summary>
            Generate script that contains schema only or schema and data.
            Possible Values:
              SchemaAndData
              DataOnly
              SchemaOnly
            </summary>
            <remarks>
            The default value is SchemaOnly.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptChangeTracking">
            <summary>
            Scripts the change tracking information.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptCheckConstraints">
            <summary>
            Script the check constraints for each table or view scripted.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptDataCompressionOptions">
            <summary>
            Scripts the data compression information.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptForeignKeys">
            <summary>
            Script the foreign keys for each table scripted.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptFullTextIndexes">
            <summary>
            Script the full-text indexes for each table or indexed view scripted.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptIndexes">
            <summary>
            Script the indexes (including XML and clustered indexes) for each table or indexed view scripted.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptPrimaryKeys">
            <summary>
            Script the primary keys for each table or view scripted
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptTriggers">
            <summary>
            Script the triggers for each table or view scripted
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.UniqueKeys">
            <summary>
            Script the unique keys for each table or view scripted.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.AnsiPadding">
            <summary>
            Returns Generate ANSI padding statements
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ConvertUserDefinedDataTypesToBaseType">
            <summary>
            Returns ConvertUDDTToBaseType
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.IncludeHeaders">
            <summary>
            Returns IncludeDescriptiveHeaders
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.DriIncludeSystemNames">
            <summary>
            Returns ScriptDriIncludeSystemNames
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.SchemaQualifyForeignKeysReferences">
            <summary>
            Returns SchemaQualify
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.NoCollation">
            <summary>
            Returns false if Collation is true
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.DriDefaults">
            <summary>
            Returns the value of Default Property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ExtendedProperties">
            <summary>
            Returns the value of ScriptExtendedProperties Property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.Permissions">
            <summary>
            Returns the value of ScriptObjectLevelPermissions Property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.Statistics">
            <summary>
            Returns the value of ScriptStatistics Property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ChangeTracking">
            <summary>
            Returns the value of ScriptChangeTracking Property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.DriChecks">
            <summary>
            Returns the value of ScriptCheckConstraints Property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.ScriptDataCompression">
            <summary>
            Returns the value of ScriptDataCompressionOptions Property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.DriForeignKeys">
            <summary>
            Returns the value of ScriptForeignKeys Property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.FullTextIndexes">
            <summary>
            Returns the value of ScriptFullTextIndexes Property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.Indexes">
            <summary>
            Returns the value of ScriptIndexes Property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.DriPrimaryKey">
            <summary>
            Returns the value of ScriptPrimaryKeys Property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.Triggers">
            <summary>
            Returns the value of ScriptTriggers Property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsOptions.DriUniqueKeys">
            <summary>
            Returns the value of UniqueKeys Property
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsScriptingOperation">
            <summary>
            Class to generate script as for one smo object
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsScriptingOperation.LeftDelimiter">
            <summary>
            Left delimiter for an named object
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsScriptingOperation.RightDelimiter">
            <summary>
            right delimiter for a named object
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsScriptingOperation.GenerateSchemaQualifiedName(System.String,System.String,System.Boolean)">
            <summary>
            Generate a schema qualified name (e.g. [schema].[objectName]) for an object if the option for SchemaQualify is true
            </summary>
            <param name="schema">The schema name. May be null or empty in which case it will be ignored</param>
            <param name="objectName">The object name.</param>
            <param name="schemaQualify">Whether to schema qualify the object or not</param>
            <returns>The object name, quoted as appropriate and schema-qualified if the option is set</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsScriptingOperation.GetDelimitedString(System.String)">
            <summary>
            getting delimited string
            </summary>
            <param name="str">string</param>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsScriptingOperation.GetDatatype(Microsoft.SqlServer.Management.Smo.DataType,Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            turn a smo datatype object into a type that can be inserted into tsql, e.g. nvarchar(20)
            </summary>
            <param name="type"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptAsScriptingOperation.QuoteObjectName(System.String)">
            <summary>
            Double quotes certain characters in object name
            </summary>
            <param name="sqlObject"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.#ctor(Microsoft.SqlServer.Management.Common.ServerConnection,Microsoft.SqlTools.ServiceLayer.Connection.ConnectionInfo)">
            <summary>
            Initialize a Peek Definition helper object
            </summary>
            <param name="serverConnection">SMO Server connection</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.AddSupportedType(Microsoft.SqlServer.Management.SqlParser.Intellisense.DeclarationType,System.String,System.String,System.Type)">
            <summary>
            Add the given type, scriptgetter and the typeName string to the respective dictionaries
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.GetScript(Microsoft.SqlServer.Management.SqlParser.Parser.ParseResult,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.Position,Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IMetadataDisplayInfoProvider,System.String,System.String)">
            <summary>
            Get the script of the selected token based on the type of the token
            </summary>
            <param name="declarationItems"></param>
            <param name="tokenText"></param>
            <param name="schemaName"></param>
            <returns>Location object of the script file</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.GetDefinitionUsingQuickInfoText(System.String,System.String,System.String)">
            <summary>
            Script an object using the type extracted from quickInfo Text
            </summary>
            <param name="quickInfoText">the text from the quickInfo for the selected token</param>
            <param name="tokenText">The text of the selected token</param>
            <param name="schemaName">Schema name</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.GetDefinitionUsingDeclarationType(Microsoft.SqlServer.Management.SqlParser.Intellisense.DeclarationType,System.String,System.String,System.String)">
            <summary>
            Script a object using the type extracted from declarationItem
            </summary>
            <param name="declarationItem">The Declaration object that matched with the selected token</param>
            <param name="tokenText">The text of the selected token</param>
            <param name="schemaName">Schema name</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.GetSqlObjectDefinition(System.String,System.String,System.String)">
            <summary>
            Script a object using SMO and write to a file.
            </summary>
            <param name="sqlScriptGetter">Function that returns the SMO scripts for an object</param>
            <param name="objectName">SQL object name</param>
            <param name="schemaName">Schema name or null</param>
            <param name="objectType">Type of SQL object</param>
            <returns>Location object representing URI and range of the script file</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.GetSchemaFromDatabaseQualifiedName(System.String,System.String)">
            <summary>
            Return schema name from the full name of the database. If schema is missing return dbo as schema name.
            </summary>
            <param name="fullObjectName"> The full database qualified name(database.schema.object)</param>
            <param name="objectName"> Object name</param>
            <returns>Schema name</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.GetLocationFromFile(System.String,System.Int32)">
            <summary>
            Convert a file to a location array containing a location object as expected by the extension
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.GetDefinitionErrorResult(System.String)">
            <summary>
            Helper method to create definition error result object
            </summary>
            <param name="errorMessage">Error message</param>
            <returns> DefinitionResult</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.GetFullObjectNameFromQuickInfo(System.String,System.String,System.StringComparison)">
            <summary>
            Return full object name(database.schema.objectName) from the quickInfo text("type database.schema.objectName")
            </summary>
            <param name="quickInfoText">QuickInfo Text for this token</param>
            <param name="tokenText">Token Text</param>
            <param name="caseSensitivity">StringComparison enum</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.GetTokenTypeFromQuickInfo(System.String,System.String,System.StringComparison)" -->
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.GetQuickInfoForToken(Microsoft.SqlServer.Management.SqlParser.Parser.ParseResult,System.Int32,System.Int32,Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IMetadataDisplayInfoProvider)">
            <summary>
            Wrapper method that calls Resolver.GetQuickInfo
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.GetCompletionsForToken(Microsoft.SqlServer.Management.SqlParser.Parser.ParseResult,System.Int32,System.Int32,Microsoft.SqlServer.Management.SqlParser.MetadataProvider.IMetadataDisplayInfoProvider)">
            <summary>
            Wrapper method that calls Resolver.FindCompletions
            </summary>
            <param name="parseResult"></param>
            <param name="parserLine"></param>
            <param name="parserColumn"></param>
            <param name="metadataDisplayInfoProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.InitScriptOperation(System.String,System.String,System.String)">
            <summary>
            Wrapper method that calls Resolver.FindCompletions
            </summary>
            <param name="objectName"></param>
            <param name="schemaName"></param>
            <param name="objectType"></param>
            <param name="tempFileName"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.ScriptingGlobals.LeftDelimiter">
            <summary>
            Left delimiter for an named object
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.ScriptingGlobals.RightDelimiter">
            <summary>
            right delimiter for a named object
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.ScriptingUtils.QuoteObjectName(System.String)">
            <summary>
            Quote the name of a given sql object.
            </summary>
            <param name="sqlObject">object</param>
            <returns>quoted object name</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.ScriptingUtils.QuoteObjectName(System.String,System.Char)">
            <summary>
            Quotes the name of a given sql object
            </summary>
            <param name="sqlObject">object</param>
            <param name="quote">quote to use</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlTools.ServiceLayer.Scripting.Scripter.ScriptingUtils.IsXTPSupportedOnServer(Microsoft.SqlServer.Management.Smo.Server)" -->
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingExtensionMethods">
            <summary>
            Extension methods used by the scripting service.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingExtensionMethods.GetStatus(Microsoft.SqlServer.Management.SqlScriptPublish.ScriptEventArgs)">
            <summary>
            Gets the status of a scripting operation for the passed scripting event.
            </summary>
            <param name="e">The scripting event.</param>
            <returns>The status.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingExtensionMethods.GetDatabaseObjects(Microsoft.SqlServer.Management.SqlScriptPublish.SqlScriptPublishModel)">
            <summary>
            Returns a list of ScriptingObject instances for the passed SqlScriptPublishModel instance.
            </summary>
            <param name="publishModel">The sql script publish model instance.</param>
            <returns>The list of scripting objects.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingExtensionMethods.ToUrn(Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingObject,System.String,System.String)">
            <summary>
            Creates a SMO Urn instance based on the passed ScriptingObject instance.
            </summary>
            <param name="scriptingObject">The scripting object instance.</param>
            <param name="database">The name of the database referenced by the Urn.</param>
            <returns>The Urn instance.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingExtensionMethods.ToScriptingObject(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Creates a ScriptingObject instance based on the passed SMO Urn instance.
            </summary>
            <param name="urn">The urn instance.</param>
            <returns>The scripting object instance.</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingListObjectsOperation">
            <summary>
            Class to represent an in-progress list objects operation.
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingListObjectsOperation.CompleteNotification">
            <summary>
            Event raised when a the list object operation is complete.
            </summary>
            <remarks>
            An event can be completed by the following conditions: success, cancel, error.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingListObjectsOperation.Dispose">
            <summary>
            Disposes the scripting operation.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingObjectMatcher">
             <summary>
             Implements matching logic to filter scripting objects based on an 
             include/exclude criteria.
             </summary>
             <remarks>
             First, objects are included by the include filter.  Then, objects are removed by
             the exclude filter.  Matches are made by comparing case insensitive strings for the 
             ScriptingObject Type, Schema, and Name properties.  Wildcards '*' are supported for 
             the ScriptingObject Schema and Name properties.  Matching on ScriptingObject Type 
             property must be an exact match.
             
             Examples:
                 
             Include ScriptingObject { Type = null, Schema = "dbo", Name = null } 
             -> matches all objects in the dbo schema.
                 
             Include ScriptingObject { Type = "Table", Schema = "dbo", Name = null } 
             -> matches all tables in the dbo schema.
             
             Include ScriptingObject { Type = "Table", Schema = null, Name = "Emp*" } 
             -> matches all table names that start with "Emp"
            
             Include ScriptingObject { Type = "View", Schema = null, Name = "Emp*" } 
             Include ScriptingObject { Type = "Table", Schema = null, Name = "Emp*" } 
             -> matches all table and views with names that start with "Emp"
            
             Include ScriptingObject { Type = "Table", Schema = null, Name = null }
             Exclude ScriptingObject { Type = null, Schema = "HumanResources", Name = null } 
             -> matches all tables except tables in the "HumanResources" schema
            
             </remarks>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingObjectMatcher.Match(Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingObject,Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingObject,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingObject})">
            <summary>
            Given a collection of candidate scripting objects, filters the items that match 
            based on the passed include and exclude criteria.
            </summary>
            <param name="includeCriteria">The include object criteria.</param>
            <param name="excludeCriteria">The exclude object criteria.</param>
            <param name="includeSchemas">The include schema filter.</param>
            <param name="excludeSchemas">The exclude schema filter.</param>
            <param name="includeTypes">The include type filter.</param>
            <param name="excludeTypes">The exclude type filter.</param>
            <param name="candidates">The candidate object to filter.</param>
            <returns>The matching scripting objects.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingObjectMatcher.Match(System.Collections.Generic.IEnumerable{Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingObject},System.Collections.Generic.IEnumerable{Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingObject},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingObject})">
            <summary>
            Given a collection of candidate scripting objects, filters the items that match 
            based on the passed include and exclude criteria.
            </summary>
            <param name="includeCriteria">The collection of include object criteria items.</param>
            <param name="excludeCriteria">The collection of exclude object criteria items.</param>
            <param name="includeSchemas">The collection of include schema items.</param>
            <param name="excludeSchemas">The collection of exclude schema items.</param>
            <param name="includeTypes">The collection of include type items.</param>
            <param name="excludeTypes">The collection of exclude type items.</param>
            <param name="candidates">The candidate object to filter.</param>
            <returns>The matching scripting objects.</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingOperation">
            <summary>
            Base class for scripting operations.  Because scripting operations can be very long
            running, there my be multiple concurrent scripting operations.  To distinguish events
            between concurrent scripting operations, use the operation id.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingOperation.OperationId">
            <summary>
            Gets the unique id associated with this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingOperation.Execute">
            <summary>
            Excecutes the scripting operation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingOperation.Cancel">
            <summary>
            Cancels the scripting operation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingOperation.Dispose">
            <summary>
            Disposes the scripting operation.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingScriptOperation">
            <summary>
            Class to represent an in-progress script operation.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingService">
            <summary>
            Main class for Scripting Service functionality
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingService.ConnectionServiceInstance">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingService.ActiveOperations">
            <summary>
            The collection of active operations
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the Scripting Service instance
            </summary>
            <param name="serviceHost"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingService.HandleListObjectsRequest(Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingListObjectsParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingListObjectsResult})">
            <summary>
            Handles request to execute start the list objects operation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingService.HandleScriptExecuteRequest(Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingResult})">
            <summary>
            Handles request to start the scripting operation
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingService.HandleScriptCancelRequest(Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingCancelParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Scripting.Contracts.ScriptingCancelResult})">
            <summary>
            Handles request to cancel a script operation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingService.RunTask``1(Microsoft.SqlTools.Hosting.Protocol.RequestContext{``0},Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingOperation)">
            <summary>
            Runs the async task that performs the scripting operation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.ScriptingService.Dispose">
            <summary>
            Disposes the scripting service and all active scripting operations.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Scripting.SmoScriptingOperation">
            <summary>
            Base class for all SMO scripting operations
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.Scripting.SmoScriptingOperation.CompleteNotification">
            <remarks>
            An event can be completed by the following conditions: success, cancel, error.
            </remarks>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.Scripting.SmoScriptingOperation.ProgressNotification">
            <summary>
            Event raised when a scripting operation has made forward progress.
            </summary>
        </member>
        <member name="E:Microsoft.SqlTools.ServiceLayer.Scripting.SmoScriptingOperation.PlanNotification">
            <summary>
            Event raised when a scripting operation has resolved which database objects will be scripted.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Scripting.SmoScriptingOperation.Dispose">
            <summary>
            Disposes the scripting operation.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Security.Contracts.CredentialInfo">
            <summary>
            a class for storing various credential properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Security.Contracts.GetCredentialsParams">
            <summary>
            Get Credential parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Security.Contracts.GetCredentialsRequest">
            <summary>
            SQL Agent Credentials request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Security.Contracts.GetCredentialsRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Security.Contracts.CreateCredentialParams">
            <summary>
            Create Credential parameters
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Security.Contracts.CredentialResult">
            <summary>
            Create Credential result
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Security.Contracts.CreateCredentialRequest">
            <summary>
            Create Credential request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Security.Contracts.CreateCredentialRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Security.Contracts.UpdateCredentialParams">
            <summary>
            Update Credential params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Security.Contracts.UpdateCredentialRequest">
            <summary>
            Update Credential request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Security.Contracts.UpdateCredentialRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Security.Contracts.DeleteCredentialParams">
            <summary>
            Delete Credential params
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Security.Contracts.DeleteCredentialRequest">
            <summary>
            Delete Credential request type
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Security.Contracts.DeleteCredentialRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Security.CredentialActions.#ctor(Microsoft.SqlTools.ServiceLayer.Management.CDataContainer,Microsoft.SqlTools.ServiceLayer.Security.Contracts.CredentialInfo,Microsoft.SqlTools.ServiceLayer.Management.ConfigAction)">
            <summary>
            required when loading from Object Explorer context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Security.CredentialActions.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Security.CredentialActions.OnRunNow(System.Object)">
            <summary>
            called on background thread by the framework to execute the action
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Security.CredentialData.LoadDataFromXmlContext">
            <summary>
            LoadDataFromXmlContext
            
            loads context information from xml - e.g. name of object
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Security.CredentialData.LoadDataFromServer">
            <summary>
             LoadDataFromServer
             
             talks with enumerator an retrieves info that is not available in the xml context but on server
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Security.CredentialData.SendDataToServer">
            <summary>
            SendDataToServer
            
            here we talk with server via smo and do the actual data changing
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Security.CredentialData.SendToServerCreateCredential">
            <summary>
            create credential - create mode
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Security.CredentialData.SendToServerAlterCredential">
            <summary>
            alter credential - properties mode
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Security.SecurityService">
            <summary>
            Main class for Security Service functionality
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Security.SecurityService.#ctor">
            <summary>
            Construct a new SecurityService instance with default parameters
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Security.SecurityService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Security.SecurityService.ConnectionServiceInstance">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Security.SecurityService.ServiceHost">
            <summary>
            Service host object for sending/receiving requests/events.
            Internal for testing purposes.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Security.SecurityService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the Security Service instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Security.SecurityService.HandleCreateCredentialRequest(Microsoft.SqlTools.ServiceLayer.Security.Contracts.CreateCredentialParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Security.Contracts.CredentialResult})">
            <summary>
            Handle request to create a credential
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Security.SecurityService.HandleUpdateCredentialRequest(Microsoft.SqlTools.ServiceLayer.Security.Contracts.UpdateCredentialParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Security.Contracts.CredentialResult})">
            <summary>
            Handle request to update a credential
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Security.SecurityService.HandleDeleteCredentialRequest(Microsoft.SqlTools.ServiceLayer.Security.Contracts.DeleteCredentialParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Utility.ResultStatus})">
            <summary>
            Handle request to delete a credential
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Security.SecurityService.HandleGetCredentialsRequest(Microsoft.SqlTools.ServiceLayer.Security.Contracts.GetCredentialsParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.Security.Contracts.GetCredentialsResult})">
            <summary>
            Handle request to get all credentials
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Security.SecurityService.Dispose">
            <summary>
            Disposes the service
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigListRequestParams.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigListRequestParams.ConfigNumber">
            <summary>
            Config Number
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigListResponseParams">
            <summary>
            Response class for config list
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigListResponseParams.ConfigProperties">
            <summary>
            Config Property
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigListRequest">
            <summary>
            Request class for config list
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigProperty">
            <summary>
            A wrapper for SMO config property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigUpdateRequestParams.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigUpdateRequestParams.ConfigNumber">
            <summary>
            Config number
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigUpdateRequestParams.ConfigValue">
            <summary>
            Config value
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigUpdateResponseParams">
            <summary>
            Response class for config update
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigUpdateResponseParams.ConfigProperty">
            <summary>
            Config Property
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigUpdateRequest">
            <summary>
            Request class for config update
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigViewRequestParams.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigViewRequestParams.ConfigNumber">
            <summary>
            Config Number
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigViewResponseParams">
            <summary>
            Response class for config view
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigViewResponseParams.ConfigProperty">
            <summary>
            Config Property
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigViewRequest">
            <summary>
            Request class for config view
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.ServerConfigException">
            <summary>
            Exception raised from machine learning services operations
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.ServerConfigService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.ServerConfigService.ConnectionServiceInstance">
            <summary>
            Internal for testing purposes only
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.ServerConfigService.HandleServerConfigViewRequest(Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigViewRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigViewResponseParams})">
            <summary>
            Handles config view request
            </summary>
            <param name="parameters">Request parameters</param>
            <param name="requestContext">Request Context</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.ServerConfigService.HandleServerConfigUpdateRequest(Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigUpdateRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigUpdateResponseParams})">
            <summary>
            Handles config update request
            </summary>
            <param name="parameters">Request parameters</param>
            <param name="requestContext">Request Context</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.ServerConfigService.HandleServerConfigListRequest(Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigListRequestParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.ServerConfigurations.Contracts.ServerConfigListResponseParams})">
            <summary>
            Handles config list request
            </summary>
            <param name="parameters">Request parameters</param>
            <param name="requestContext">Request Context</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.ServerConfigService.UpdateConfig(Microsoft.SqlServer.Management.Common.ServerConnection,System.Int32,System.Int32)">
            <summary>
            Updates external script in a given server. Throws exception if server doesn't support external script 
            </summary>
            <param name="serverConnection"></param>
            <param name="configValue"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.ServerConfigurations.ServerConfigService.GetConfig(Microsoft.SqlServer.Management.Common.ServerConnection,System.Int32)">
            <summary>
            Returns current value of external script config
            </summary>
            <param name="serverConnection"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost">
            <summary>
            SQL Tools VS Code Language Server request handler. Provides the entire JSON RPC
            implementation for sending/receiving JSON requests and dispatching the requests to
            handlers that are registered prior to startup.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost.ShutdownTimeoutInSeconds">
            <summary>
            This timeout limits the amount of time that shutdown tasks can take to complete
            prior to the process shutting down.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost.instance">
            <summary>
            Singleton instance of the service host for internal storage
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost.Instance">
            <summary>
            Current instance of the ServiceHost
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost.#ctor">
            <summary>
            Constructs new instance of ServiceHost using the host and profile details provided.
            Access is private to ensure only one instance exists at a time.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost.InitializeRequestHandlers">
            <summary>
            Provide initialization that must occur after the service host is started
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost.ShutdownCallback">
            <summary>
            Delegate definition for the host shutdown event
            </summary>
            <param name="shutdownParams"></param>
            <param name="shutdownRequestContext"></param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost.InitializeCallback">
            <summary>
            Delegate definition for the host initialization event
            </summary>
            <param name="startupParams"></param>
            <param name="requestContext"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost.RegisterShutdownTask(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost.ShutdownCallback)">
            <summary>
            Adds a new callback to be called when the shutdown request is submitted
            </summary>
            <param name="callback">Callback to perform when a shutdown request is submitted</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost.RegisterInitializeTask(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost.InitializeCallback)">
            <summary>
            Add a new method to be called when the initialize request is submitted
            </summary>
            <param name="callback">Callback to perform when an initialize request is submitted</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost.HandleShutdownRequest(System.Object,Microsoft.SqlTools.Hosting.Protocol.RequestContext{System.Object})">
            <summary>
            Handles the shutdown event for the Language Server
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost.HandleInitializeRequest(Microsoft.SqlTools.Hosting.Contracts.InitializeRequest,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.Hosting.Contracts.InitializeResult})">
            <summary>
            Handles the initialization request
            </summary>
            <param name="initializeParams"></param>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost.HandleCapabilitiesRequest(Microsoft.SqlTools.Hosting.Contracts.CapabilitiesRequest,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.Hosting.Contracts.CapabilitiesResult})">
            <summary>
            Handles a request for the capabilities request
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost.HandleVersionRequest(System.Object,Microsoft.SqlTools.Hosting.Protocol.RequestContext{System.String})">
            <summary>
            Handles the version request. Sends back the server version as result.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentParams">
            <summary>
            Parameters for executing a query from a provided string
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentParams.OwnerUri">
            <summary>
            Gets or sets the owner uri to get connection from
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentParams.TargetType">
            <summary>
            Gets or sets the target type
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentItemInfo">
            <summary>
            Describes an item returned by SQL Assessment RPC methods
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentItemInfo.RulesetVersion">
            <summary>
            Gets or sets assessment ruleset version.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentItemInfo.RulesetName">
            <summary>
            Gets or sets assessment ruleset name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentItemInfo.TargetType">
            <summary>
            Gets or sets assessed target's type.
            Supported values: 1 - server, 2 - database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentItemInfo.TargetName">
            <summary>
            Gets or sets the assessed object's name. 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentItemInfo.CheckId">
            <summary>
            Gets or sets check's ID.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentItemInfo.Tags">
            <summary>
            Gets or sets tags assigned to this item.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentItemInfo.DisplayName">
            <summary>
            Gets or sets a display name for this item.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentItemInfo.Description">
            <summary>
            Gets or sets a brief description of the item's purpose.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentItemInfo.HelpLink">
            <summary>
            Gets or sets a <see cref="T:System.String"/> containing
            an link to a page providing detailed explanation
            of the best practice.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentItemInfo.Level">
            <summary>
            Gets or sets a <see cref="T:System.String"/> indicating
            severity level assigned to this items.
            Values are: "Information", "Low", "Medium", "High".
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentResultData`1">
            <summary>
            Generic SQL Assessment Result
            </summary>
            <typeparam name="T">
            Result item's type derived from <see cref="T:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentItemInfo"/>
            </typeparam>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentResultData`1.Items">
            <summary>
            Gets the collection of assessment results.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentResultData`1.ApiVersion">
            <summary>
            Gets or sets SQL Assessment API version.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentResult`1">
            <summary>
            Generic SQL Assessment Result
            </summary>
            <typeparam name="T">
            Result item's type derived from <see cref="T:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentItemInfo"/>
            </typeparam>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentResult`1.Success">
            <summary>
            Gets or sets a value indicating
            if assessment operation was successful.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentResult`1.ErrorMessage">
            <summary>
            Gets or sets an status message for the operation.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.GenerateScriptParams">
            <summary>
            Parameters for executing a query from a provided string
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.GenerateScriptParams.Items">
            <summary>
            Gets or sets a list of assessment result items
            to be written to a table
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.GenerateScriptResult.Success">
            <summary>
            Gets or sets a value indicating
            if assessment operation was successful
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.GenerateScriptResult.ErrorMessage">
            <summary>
            Gets or sets an status message for the operation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.GenerateScriptResult.Script">
            <summary>
            Gets or sets script text
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.GetAssessmentItemsParams">
            <summary>
            Parameters for executing a query from a provided string
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.CheckInfo">
            <summary>
            Describes a check used to assess SQL Server objects.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.InvokeParams">
            <summary>
            Parameters for executing a query from a provided string
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentResultItemKind">
            <summary>
            SQL Assessment result item kind.
            </summary>
            <remarks>
            SQL Assessment run is a set of checks. Every check
            may return a result item. Normally it is a note containing
            recommendations on improving target's configuration.
            But some checks may fail to obtain data due to access
            restrictions or data integrity. In this case
            the check produces an error or a warning.
            </remarks>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentResultItemKind.Note">
            <summary>
            SQL Assessment item contains recommendation
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentResultItemKind.Warning">
            <summary>
            SQL Assessment item contains a warning on
            limited assessment capabilities
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentResultItemKind.Error">
            <summary>
            SQL Assessment item contain a description of
            error occured in the course of assessment run
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentResultItem">
            <summary>
            Describes an assessment result item
            containing a recommendation based on best practices.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentResultItem.Message">
            <summary>
            Gets or sets a message to the user
            containing the recommendation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentResultItem.Kind">
            <summary>
            Gets or sets result type:
            0 - real result, 1 - warning, 2 - error.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentResultItem.Timestamp">
            <summary>
            Gets or sets date and time
            when the item had been acquired.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlAssessment.GenerateScriptOperation">
            <summary>
            Generates a script storing SQL Assessment results to a table.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.GenerateScriptOperation.OperationId">
            <summary>
            Gets the unique id associated with this instance.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.GenerateScriptOperation.Parameters">
            <summary>
            Gets the parameters containing assessment results
            to be stored in a data table.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.GenerateScriptOperation.ErrorMessage">
            <summary>
            Gets or sets the error message text
            if an error occurred during task execution
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.GenerateScriptOperation.SqlTask">
            <summary>
            Gets or sets the sql task that's executing the operation
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SqlAssessment.GenerateScriptOperation.Execute(Microsoft.SqlTools.ServiceLayer.TaskServices.TaskExecutionMode)">
            <summary>
            Execute a task
            </summary>
            <param name="mode">Task execution mode (e.g. script or execute)</param>
            <exception cref="T:System.InvalidOperationException">
            The method has been called twice in parallel for the same instance.
            </exception>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlAssessment.SqlAssessmentService">
            <summary>
            Service for running SQL Assessment.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.SqlAssessmentService.Instance">
            <summary>
            Singleton instance of the query execution service
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.SqlAssessmentService.Engine">
            <summary>
            Gets the <see cref="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.SqlAssessmentService.Engine"/> used to run assessment operations.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.SqlAssessmentService.ConnectionService">
            <summary>
            Gets the instance of the connection service,
            used to get the connection info for a given owner URI.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlAssessment.SqlAssessmentService.activeRequests">
            <summary>
            Holds a map from the <see cref="T:System.Guid"/>
            to a <see cref="T:System.Threading.Tasks.Task"/> that is being ran.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlAssessment.SqlAssessmentService.ActiveRequests">
            <summary>
            Gets a map from the <see cref="T:System.Guid"/>
            to a <see cref="T:System.Threading.Tasks.Task"/> that is being ran.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SqlAssessment.SqlAssessmentService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the service with the service host,
            registers request handlers and shutdown event handler.
            </summary>
            <param name="serviceHost">The service host instance to register with</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SqlAssessment.SqlAssessmentService.CallAssessmentEngine``1(Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentParams,Microsoft.SqlTools.ServiceLayer.Connection.Contracts.ConnectParams,System.String,System.Func{Microsoft.SqlServer.Management.Assessment.SqlObjectLocator,System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}})">
            <summary>
            This function obtains a live connection, then calls
            an assessment operation specified by <paramref name="assessmentFunc"/>
            </summary>
            <typeparam name="TResult">
            SQL Assessment result item type.
            </typeparam>
            <param name="requestParams">
            Request parameters passed from the host.
            </param>
            <param name="connectParams">
            Connection parameters used to identify and access the target.
            </param>
            <param name="taskUri">
            An URI identifying the request task to enable concurrent execution.
            </param>
            <param name="assessmentFunc">
            A function performing assessment operation for given target.
            </param>
            <returns>
            Returns <see cref="T:Microsoft.SqlTools.ServiceLayer.SqlAssessment.Contracts.AssessmentResult`1"/> for given target.
            </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SqlAssessment.SqlAssessmentService.InvokeSqlAssessment(Microsoft.SqlServer.Management.Assessment.SqlObjectLocator)">
            <summary>
            Invokes SQL Assessment and formats results.
            </summary>
            <param name="target">
            A sequence of target servers or databases to be assessed.
            </param>
            <returns>
            Returns a <see cref="T:System.Collections.Generic.List`1"/>
            containing assessment results.
            </returns>
            <remarks>
            Internal for testing
            </remarks>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SqlAssessment.SqlAssessmentService.GetAssessmentItems(Microsoft.SqlServer.Management.Assessment.SqlObjectLocator)">
            <summary>
            Gets the list of checks for given target servers or databases.
            </summary>
            <param name="target">
            A sequence of target servers or databases.
            </param>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            containing checks available for given <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SqlAssessment.SqlAssessmentService.GetDatabaseLocator(Microsoft.SqlServer.Management.Assessment.SqlObjectLocator,System.String)">
            <summary>
            Constructs a <see cref="T:Microsoft.SqlServer.Management.Assessment.SqlObjectLocator"/> for specified database.
            </summary>
            <param name="server">Target server locator.</param>
            <param name="databaseName">Target database name.</param>
            <returns>Returns a locator for target database.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SqlAssessment.SqlAssessmentService.GetEngineEdition(System.Int32)">
            <summary>
            Converts numeric <paramref name="representation"/> of engine edition
            returned by SERVERPROPERTY('EngineEdition').
            </summary>
            <param name="representation">
            A number returned by SERVERPROPERTY('EngineEdition').
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">Engine edition is not supported.</exception>
            <returns>
            Returns a <see cref="T:Microsoft.SqlServer.Management.Assessment.Configuration.SqlEngineEdition"/>
            corresponding to the <paramref name="representation"/>.
            </returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlContext.CompoundToolsSettingsValues">
            <summary>
            Handles backwards compatibility of settings by checking for settings in a priority list. If a settings
            group such as Intellisense is defined on a serialized setting it's used in the order of mssql, then sql, then
            falls back to a default value.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.CompoundToolsSettingsValues.IntelliSense">
            <summary>
            Gets or sets the detailed IntelliSense settings
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.CompoundToolsSettingsValues.QueryExecutionSettings">
            <summary>
            Gets or sets the query execution settings
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.CompoundToolsSettingsValues.Format">
            <summary>
            Gets or sets the formatter settings
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.CompoundToolsSettingsValues.ObjectExplorer">
            <summary>
            Gets or sets the object explorer settings
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlContext.FormatterSettings">
            <summary>
            Contract for receiving formatter-specific settings as part of workspace settings
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.FormatterSettings.UseBracketForIdentifiers">
            <summary>
            Should names be escaped, for example converting dbo.T1 to [dbo].[T1]
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.FormatterSettings.PlaceCommasBeforeNextStatement">
            <summary>
            Should comma separated lists have the comma be at the start of a new line.
            <code>
            CREATE TABLE T1 (
                C1 INT
                , C2 INT)
            </code>
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.FormatterSettings.PlaceSelectStatementReferencesOnNewLine">
            <summary>
            Should each reference be on its own line or should references to multiple objects
            be kept on a single line
            <code>
            SELECT * 
            FROM T1,
                 T2
            </code>
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.FormatterSettings.KeywordCasing">
            <summary>
            Should keyword casing be ignored, converted to all uppercase, or
            converted to all lowercase
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.FormatterSettings.DatatypeCasing">
            <summary>
            Should data type casing be ignored, converted to all uppercase, or
            converted to all lowercase
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.FormatterSettings.AlignColumnDefinitionsInColumns">
            <summary>
            Should column definitions be aligned or left non-aligned?
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlContext.IntelliSenseSettings">
            <summary>
            Class for serialization and deserialization of IntelliSense settings
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SqlContext.IntelliSenseSettings.#ctor">
            <summary>
            Initialize the IntelliSense settings defaults
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.IntelliSenseSettings.EnableIntellisense">
            <summary>
            Gets or sets a flag determining if IntelliSense is enabled
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.IntelliSenseSettings.EnableSuggestions">
            <summary>
            Gets or sets a flag determining if suggestions are enabled
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.IntelliSenseSettings.LowerCaseSuggestions">
            <summary>
            Gets or sets a flag determining if built-in suggestions should be lowercase
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.IntelliSenseSettings.EnableErrorChecking">
            <summary>
            Gets or sets a flag determining if diagnostics are enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.IntelliSenseSettings.EnableQuickInfo">
            <summary>
            Gets or sets a flag determining if quick info is enabled
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SqlContext.IntelliSenseSettings.Update(Microsoft.SqlTools.ServiceLayer.SqlContext.IntelliSenseSettings)">
            <summary>
            Update the Intellisense settings
            </summary>
            <param name="settings"></param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlContext.ISqlToolsSettingsValues">
            <summary>
            Defines the common settings used by the tools service
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.ISqlToolsSettingsValues.IntelliSense">
            <summary>
            Intellisense specific settings
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.ISqlToolsSettingsValues.QueryExecutionSettings">
            <summary>
            Query execution specific settings
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.ISqlToolsSettingsValues.Format">
            <summary>
            Formatter settings
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.ISqlToolsSettingsValues.ObjectExplorer">
            <summary>
            Object Explorer specific settings
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlContext.ObjectExplorerSettings">
            <summary>
            Contract for receiving object explorer settings as part of workspace settings
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.ObjectExplorerSettings.CreateSessionTimeout">
            <summary>
            Number of seconds to wait before fail create session request with timeout error
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.ObjectExplorerSettings.ExpandTimeout">
            <summary>
            Number of seconds to wait before fail expand request with timeout error
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings">
            <summary>
            Collection of settings related to the execution of queries
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultBatchSeparator">
            <summary>
            Default value for batch separator (de facto standard as per SSMS)
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultMaxCharsToStore">
            <summary>
            Default number of chars to store for long text fields (de facto standard as per SSMS)
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultMaxXmlCharsToStore">
            <summary>
            Default number of chars to store of XML values (de facto standard as per SSMS)
            xml is a special case so number of chars to store is usually greater than for other long types 
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultExecutionPlanOptions">
            <summary>
            Default selection of returning an actual XML showplan with all batches
            Do not return any execution plan by default
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultDisplayBitAsNumber">
            <summary>
            Default option for displaying a bit column as a number. (defacto standard as per SSMS)
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultRowCount">
            <summary>
            default row count
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultTextSize">
            <summary>
            default text size
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultExecutionTimeout">
            <summary>
            default execution timeout
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultNoCount">
            <summary>
            default no count
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultNoExec">
            <summary>
            default no exec
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultParseOnly">
            <summary>
            default parse only
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultArithAbort">
            <summary>
            default arith abort
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultConcatNullYieldsNull">
            <summary>
            default concat null yields null
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultStatisticsTime">
            <summary>
            default statistics time
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultStatisticsIO">
            <summary>
            default statistics IO
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultXactAbortOn">
            <summary>
            default transaction abort ON
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultAnsiPadding">
            <summary>
            default ANSI padding
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultAnsiWarnings">
            <summary>
            default ANSI warnings
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultAnsiNulls">
            <summary>
            default ANSI Nulls
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultAnsiDefaults">
            <summary>
            default use ANSI defaults
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultQuotedIdentifier">
            <summary>
            default quoted identifier
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultAnsiNullDefaultOn">
            <summary>
            default ANSI NULL default ON
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultImplicitTransactions">
            <summary>
            default implicit transactions
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultCursorCloseOnCommit">
            <summary>
            default cursor close on commit
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultTransactionIsolationLevel">
            <summary>
            default transaction isolation level
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultDeadlockPriority">
            <summary>
            default deadlock priority
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultLockTimeout">
            <summary>
            default lock timeout
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultQueryGovernorCostLimit">
            <summary>
            default query governor cost limit
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultSqlCmdMode">
            <summary>
            Default value for flag to run query in sqlcmd mode
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DefaultAlwaysEncryptedParameterizationValue">
            <summary>
            Default value for flag to enable Always Encrypted Parameterization
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.BatchSeparator">
            <summary>
            The configured batch separator, will use a default if a value was not configured
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.MaxCharsToStore">
            <summary>
            Maximum number of characters to store in temp file for long character fields and binary
            fields. Will use a default if a value was not configured.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.MaxXmlCharsToStore">
            <summary>
            Maximum number of characters to store in temp file for XML columns. Will use a default
            value if one was not configured.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.ExecutionPlanOptions">
            <summary>
            Options for returning execution plans when executing queries
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DisplayBitAsNumber">
            <summary>
            Determines how to generate display value for bit columns. If <c>true</c>, bit columns
            will be rendered as "1" or "0". If <c>false</c>, bit columns will be rendered as
            "true" or "false"
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.RowCount">
            <summary>
            Set row count
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.TextSize">
            <summary>
            Set text size
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.ExecutionTimeout">
            <summary>
            Set execution timeout
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.NoCount">
            <summary>
            Set no count
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.NoExec">
            <summary>
            Set no exec
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.ParseOnly">
            <summary>
            Set parse only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.ArithAbort">
            <summary>
            Set arith abort
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.ConcatNullYieldsNull">
            <summary>
            Set concat null yields null
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.StatisticsTime">
            <summary>
            Set statistics time
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.StatisticsIO">
            <summary>
            Set statistics I\O
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.XactAbortOn">
            <summary>
            Set transaction abort ON
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.TransactionIsolationLevel">
            <summary>
            Set transaction isolation level
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.DeadlockPriority">
            <summary>
            Set deadlock priority
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.LockTimeout">
            <summary>
            Set lock timeout
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.QueryGovernorCostLimit">
            <summary>
            Set query governor cost limit
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.AnsiDefaults">
            <summary>
            Set ANSI defaults ON
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.QuotedIdentifier">
            <summary>
            Set quoted identifier
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.AnsiNullDefaultOn">
            <summary>
            Set ANSI null default on
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.ImplicitTransactions">
            <summary>
            Set implicit transactions
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.CursorCloseOnCommit">
            <summary>
            Set cursor close on commit
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.AnsiPadding">
            <summary>
            Set ANSI padding
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.AnsiWarnings">
            <summary>
            Set ANSI warnings
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.AnsiNulls">
            <summary>
            Set ANSI nulls
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.IncludeActualExecutionPlanXml">
            <summary>
            Setting to return the actual execution plan as XML
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.IncludeEstimatedExecutionPlanXml">
            <summary>
            Setting to return the estimated execution plan as XML
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.IsSqlCmdMode">
            <summary>
            Set sqlCmd Mode
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.IsAlwaysEncryptedParameterizationEnabled">
            <summary>
            Set Always Encrypted Parameterization Mode
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings.Update(Microsoft.SqlTools.ServiceLayer.SqlContext.QueryExecutionSettings)">
            <summary>
            Update the current settings with the new settings
            </summary>
            <param name="newSettings">The new settings</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings">
            <summary>
            Class for serialization and deserialization of the settings the SQL Tools Service needs.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings.MssqlTools">
            <summary>
            Gets or sets the underlying settings value object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings.AllSqlTools">
            <summary>
            Gets or sets the underlying settings value object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings.QueryExecutionSettings">
            <summary>
            Query execution settings forwarding property
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings.Update(Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings)">
            <summary>
            Updates the extension settings
            </summary>
            <param name="settings"></param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings.IsDiagnosticsEnabled">
            <summary>
            Gets a flag determining if diagnostics are enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings.IsSuggestionsEnabled">
            <summary>
            Gets a flag determining if suggestions are enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings.IsQuickInfoEnabled">
            <summary>
            Gets a flag determining if quick info is enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettings.IsIntelliSenseEnabled">
            <summary>
            Gets a flag determining if IntelliSense is enabled
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettingsValues">
            <summary>
            Class that is used to serialize and deserialize SQL Tools settings
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettingsValues.#ctor(System.Boolean)">
            <summary>
            Initializes the Sql Tools settings values
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettingsValues.IntelliSense">
            <summary>
            Gets or sets the detailed IntelliSense settings
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettingsValues.QueryExecutionSettings">
            <summary>
            Gets or sets the query execution settings
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettingsValues.Format">
            <summary>
            Gets or sets the formatter settings
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.SqlContext.SqlToolsSettingsValues.ObjectExplorer">
            <summary>
            Gets or sets the formatter settings
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.CheckBoxProperties">
            <summary>
            Checkbox properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.ComponentPropertiesBase">
            <summary>
            Base class for component properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.DropdownProperties">
            <summary>
            Dropdown properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.InputBoxProperties">
            <summary>
            Inputbox properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableComponentProperties`1">
            <summary>
            Table component properties
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableComponentProperties`1.Columns">
            <summary>
            The column names to be displayed
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableComponentProperties`1.ObjectTypeDisplayName">
            <summary>
            The object type display name of the objects in this table
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableComponentProperties`1.ItemProperties">
            <summary>
            All properties of the object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableComponentProperties`1.Data">
            <summary>
            The object list.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableComponentProperties`1.CanAddRows">
            <summary>
            Whether new rows can be added.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableComponentProperties`1.CanRemoveRows">
            <summary>
            Whether rows can be deleted.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableComponentProperties`1.CanMoveRows">
            <summary>
            Whether rows can be moved.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableComponentProperties`1.CanInsertRows">
            <summary>
            Whether rows can be inserted.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableComponentProperties`1.ShowRemoveRowConfirmation">
            <summary>
            Whether a confirmation should be shown when a row is about to be removed.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableComponentProperties`1.RemoveRowConfirmationMessage">
            <summary>
            The confirmation message to be displayed when a row is about to be removed.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableComponentProperties`1.LabelForAddNewButton">
            <summary>
            The label for the add new button for this table.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.DesignerDataPropertyInfo">
            <summary>
            Represents a component/property in the table designer
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.DesignerDataPropertyInfo.PropertyName">
            <summary>
            The name of the property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.DesignerDataPropertyInfo.Description">
            <summary>
            The description of the property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.DesignerDataPropertyInfo.ComponentType">
            <summary>
            The component type of the property
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.DesignerDataPropertyInfo.Group">
            <summary>
            The name of the group the property will be placed in whe displayed in
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.DesignerDataPropertyInfo.ShowInPropertiesView">
            <summary>
            The name of the group the property will be placed in whe displayed in
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.DesignerDataPropertyInfo.ComponentProperties">
            <summary>
            The properties of component
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.DisposeTableDesignerRequest">
            <summary>
            The request to dispose the table designer.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.DisposeTableDesignerRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.GeneratePreviewReportResult">
            <summary>
            The service request to generate preview report describing the changes.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.GeneratePreviewReportResult.Report">
            <summary>
            The report generated for publish preview
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.GeneratePreviewReportResult.MimeType">
            <summary>
            format (mimetype) of the string
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.GeneratePreviewReportResult.Metadata">
            <summary>
            Metadata about the table
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.GeneratePreviewReportResult.SchemaValidationError">
            <summary>
            The table schema validation error
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.GeneratePreviewReportRequest">
            <summary>
            The service request to generate preview report describing the changes.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.GeneratePreviewReportRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.GenerateScriptRequest">
            <summary>
            The service request to generate script for the changes.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.GenerateScriptRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.InitializeTableDesignerRequest">
            <summary>
            The service request to initialize a table designer.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.InitializeTableDesignerRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.ProcessTableDesignerEditRequest">
            <summary>
            The service request to process the changes made in the table designer.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.ProcessTableDesignerEditRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.PublishTableChangesRequest">
            <summary>
            The service request to publish the changes.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.PublishTableChangesRequest.Type">
            <summary>
            Request definition
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableDesignerChangeInfo">
            <summary>
            The information about a change made inside the table designer.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableDesignerInfo">
            <summary>
            The information requested by the table designer UI.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableDesignerIssue">
            <summary>
            Table Designer Issue
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableDesignerIssue.Description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableDesignerIssue.PropertyPath">
            <summary>
            The property path associated with the message
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableDesignerIssue.Severity">
            <summary>
            The severity of the message. Default value is Error.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableDesignerIssue.MoreInfoLink">
            <summary>
            Any link to docs associated with error for more information
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableDesignerView">
            <summary>
            Table designer's view definition, there are predefined common properties.
            Specify the additional properties in this class.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableInfo">
            <summary>
            The information of the table being designed.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.CheckConstraintViewModel">
            <summary>
            The view model of check constraint
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.EdgeConstraintViewModel">
            <summary>
            The view model of edge constraint.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.ForeignKeyViewModel">
            <summary>
            The view model of foreign key.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.IndexViewModel">
            <summary>
            The view model of index.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.ObjectViewModelBase">
            <summary>
            The base class for view model object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableColumnViewModel">
            <summary>
            The view model of a table column object
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.TableViewModel">
            <summary>
            The view model for a table object
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlTools.ServiceLayer.TableDesigner.DesignerPathUtils.Validate(System.Object[],Microsoft.SqlTools.ServiceLayer.TableDesigner.Contracts.DesignerEditType)" -->
        <member name="T:Microsoft.SqlTools.ServiceLayer.TableDesigner.TableDesignerService">
            <summary>
            Class that handles the Table Designer related requests
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.TableDesignerService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TableDesigner.TableDesignerService.ServiceHost">
            <summary>
            Service host object for sending/receiving requests/events.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TableDesigner.TableDesignerService.InitializeService(Microsoft.SqlTools.ServiceLayer.Hosting.ServiceHost)">
            <summary>
            Initializes the table designer service instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TableDesigner.TableDesignerService.Dispose">
            <summary>
            Disposes the table designer Service
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TableDesigner.TableDesignerValidator.Validate(Microsoft.Data.Tools.Sql.DesignServices.TableDesigner.TableDesigner)">
            <summary>
            Validate the table and return the validation errors.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.CancelTaskParams.TaskId">
            <summary>
            An id to unify the task
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.TaskInfo.TaskId">
            <summary>
            An id to unify the task
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.TaskInfo.Status">
            <summary>
            Task status
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.TaskInfo.TaskExecutionMode">
            <summary>
            Task execution mode
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.TaskInfo.ServerName">
            <summary>
            Database server name this task is created for
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.TaskInfo.DatabaseName">
            <summary>
            Database name this task is created for
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.TaskInfo.TargetLocation">
            <summary>
            Target location for this task
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.TaskInfo.Name">
            <summary>
            Task name which defines the type of the task (e.g. CreateDatabase, Backup)
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.TaskInfo.ProviderName">
            <summary>
            Provider Name
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.TaskInfo.Description">
            <summary>
            Task description
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.TaskInfo.IsCancelable">
            <summary>
            Defines if the task can be canceled
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.TaskCreatedNotification">
            <summary>
            Expand notification mapping entry 
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.TaskStatusChangedNotification">
            <summary>
            Expand notification mapping entry 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.TaskProgressInfo.TaskId">
            <summary>
            An id to unify the task
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.TaskProgressInfo.Status">
            <summary>
            Task status
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.TaskProgressInfo.Message">
            <summary>
            Progress message
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.TaskProgressInfo.Script">
            <summary>
            Script for the task execution
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.TaskProgressInfo.Duration">
            <summary>
            The number of millisecond the task was running
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TaskServices.ITaskOperation">
            <summary>
            Defines interface for task operations
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.ITaskOperation.Execute(Microsoft.SqlTools.ServiceLayer.TaskServices.TaskExecutionMode)">
            <summary>
            Execute a task
            </summary>
            <param name="mode">Task execution mode (e.g. script or execute)</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.ITaskOperation.Cancel">
            <summary>
            Cancel a task
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.ITaskOperation.ErrorMessage">
            <summary>
            If an error occurred during task execution, this field contains the error message text
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.ITaskOperation.SqlTask">
            <summary>
            The sql task that's executing the operation
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TaskServices.IScriptableTaskOperation">
            <summary>
            Defines interface for scriptable task operations
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.IScriptableTaskOperation.ScriptContent">
            <summary>
            Script for the task operation
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SmoScriptableOperationWithFullDbAccess.ErrorMessage">
            <summary>
            If an error occurred during task execution, this field contains the error message text
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SmoScriptableOperationWithFullDbAccess.Server">
            <summary>
            SMO Server instance used for the operation
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SmoScriptableOperationWithFullDbAccess.Cancel">
            <summary>
            Cancels the operation
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SmoScriptableOperationWithFullDbAccess.Execute">
            <summary>
            Executes the operations
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SmoScriptableOperationWithFullDbAccess.Execute(Microsoft.SqlTools.ServiceLayer.TaskServices.TaskExecutionMode)">
            <summary>
            Execute the operation for given execution mode
            </summary>
            <param name="mode"></param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TaskServices.SmoScriptableTaskOperation">
            <summary>
            Any SMO operation that supports scripting should implement this class. 
            It provides all of the configuration needed to choose between scripting or execution mode, 
            hook into the Task manager framework, and send success / completion notifications to the caller.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SmoScriptableTaskOperation.ScriptContent">
            <summary>
            Script content
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SmoScriptableTaskOperation.ErrorMessage">
            <summary>
            If an error occurred during task execution, this field contains the error message text
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SmoScriptableTaskOperation.Server">
            <summary>
            SMO Server instance used for the operation
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SmoScriptableTaskOperation.Cancel">
            <summary>
            Cancels the operation
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SmoScriptableTaskOperation.OnMessageAdded(Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMessage)">
            <summary>
            Updates messages in sql task given new progress message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SmoScriptableTaskOperation.OnScriptAdded(Microsoft.SqlTools.ServiceLayer.TaskServices.TaskScript)">
            <summary>
            Updates scripts in sql task given new script
            </summary>
            <param name="script"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SmoScriptableTaskOperation.Execute">
            <summary>
            Executes the operations
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SmoScriptableTaskOperation.Execute(Microsoft.SqlTools.ServiceLayer.TaskServices.TaskExecutionMode)">
            <summary>
            Execute the operation for given execution mode
            </summary>
            <param name="mode"></param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SmoScriptableTaskOperation.SqlTask">
            <summary>
            The sql task to run the operations
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask">
            <summary>
            A wrapper to a long running database operation. The class holds a refrence to the actual task that's running 
            and keeps track of the task status to send notifications
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.#ctor">
            <summary>
            Default constructor to create the geenric type. calling Initialize method is required after creating
            the insance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.#ctor(Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata,System.Func{Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask,System.Threading.Tasks.Task{Microsoft.SqlTools.ServiceLayer.TaskServices.TaskResult}},System.Func{Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask,System.Threading.Tasks.Task{Microsoft.SqlTools.ServiceLayer.TaskServices.TaskResult}})">
            <summary>
            Creates new instance of SQL task
            </summary>
            <param name="taskMetdata">Task Metadata</param>
            <param name="taskToRun">The function to run to start the task</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.Init(Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata,System.Func{Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask,System.Threading.Tasks.Task{Microsoft.SqlTools.ServiceLayer.TaskServices.TaskResult}},System.Func{Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask,System.Threading.Tasks.Task{Microsoft.SqlTools.ServiceLayer.TaskServices.TaskResult}})">
            <summary>
            Initializes the Sql task
            </summary>
            <param name="taskMetadata">Task metadata</param>
            <param name="taskToRun">The function to execute the operation</param>
            <param name="taskToCancel">The function to cancel the operation</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.TokenSource">
            <summary>
            Cancellation token
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.TaskMetadata">
            <summary>
            Task Metadata
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.TaskToRun">
            <summary>
            The function to run 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.TaskToCancel">
            <summary>
            The function to cancel the operation 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.TaskId">
            <summary>
            Task unique id
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.RunAsync">
            <summary>
            Starts the task and monitor the task progress
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.RunAndCancel">
            <summary>
            Create a backup task for execution and cancellation
            </summary>
            <param name="sqlTask"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.CancelTaskAsync(System.Threading.CancellationToken,System.Threading.AutoResetEvent)">
            <summary>
            Async task to cancel backup
            </summary>
            <param name="backupOperation"></param>
            <param name="token"></param>
            <param name="onCompletedEvent"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.HasMessages">
            <summary>
            Returns true if task has any messages
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.IsCancelRequested">
            <summary>
            Setting this to True will not change the Slot status.
            Setting the Slot status to Canceled will set this to true.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.IsCompleted">
            <summary>
            Returns true if task is canceled, failed or succeed 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.Messages">
            <summary>
            Task Messages
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.StartTime">
            <summary>
            Start Time
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.Duration">
            <summary>
            The total number of seconds to run the task
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.TaskStatus">
            <summary>
            Task Status
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.StopTime">
            <summary>
            The date time that the task was complete
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.Cancel">
            <summary>
            Try to cancel the task, and event to cancel the task will be raised 
            but the status won't change until that task actually get canceled by it's owner
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.AddScript(Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTaskStatus,System.String,System.String)">
            <summary>
            Add script result of the operation
            </summary>
            <param name="script">Script content</param>
            <param name="errorMessage">Error occured during script</param>
            <param name="status">Status of the script</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.AddMessage(System.String,Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTaskStatus,System.Boolean)">
            <summary>
            Adds a new message to the task messages
            </summary>
            <param name="description">Message description</param>
            <param name="status">Status of the message</param>
            <param name="insertAboveLast">If true, the new messages will be added to the top. Default is false</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.ToTaskInfo">
            <summary>
            Converts the task to Task info to be used in the contracts 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.CompleteLastMessageStatus(System.Nullable{System.Boolean})">
            <summary>
            Makes sure the last message has a 'completed' status if it has a status of InProgress.
            If success is true, then sets the status to Succeeded.  Sets it to Failed if success is false.
            If success is null (default), then the message status is based on the status of the slot.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask.GetLastMessage">
            <summary>
            Returns the most recently created message.  Returns null if there are no messages on the slot.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTaskManager">
            <summary>
            A singleton class to manager the current long running operations 
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTaskManager.#ctor">
            <summary>
            Constructor to create an instance for test purposes use only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTaskManager.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTaskManager.Tasks">
            <summary>
            Task connections
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTaskManager.ClearCompletedTasks">
            <summary>
            Clear completed tasks
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTaskManager.CreateTask(Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata,System.Func{Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask,System.Threading.Tasks.Task{Microsoft.SqlTools.ServiceLayer.TaskServices.TaskResult}},System.Func{Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask,System.Threading.Tasks.Task{Microsoft.SqlTools.ServiceLayer.TaskServices.TaskResult}})">
            <summary>
            Creates a new task
            </summary>
            <param name="taskMetadata">Task Metadata</param>
            <param name="taskToRun">The function to run the operation</param>
            <param name="taskToCancel">The function to cancel the operation</param>
            <returns>The new sql task</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTaskManager.CreateTask``1(Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata)">
            <summary>
            Creates a new task
            </summary>
            <param name="taskMetadata">Task Metadata</param>
            <returns>The new sql task</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTaskManager.CreateTask``1(Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata,System.Func{Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask,System.Threading.Tasks.Task{Microsoft.SqlTools.ServiceLayer.TaskServices.TaskResult}},System.Func{Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask,System.Threading.Tasks.Task{Microsoft.SqlTools.ServiceLayer.TaskServices.TaskResult}})">
            <summary>
            Creates a new task
            </summary>
            <param name="taskMetadata">Task Metadata</param>
            <param name="taskToRun">The function to run the operation</param>
            <param name="taskToCancel">The function to cancel the operation</param>
            <returns>The new sql task</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTaskManager.CreateTask(Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata,System.Func{Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask,System.Threading.Tasks.Task{Microsoft.SqlTools.ServiceLayer.TaskServices.TaskResult}})">
            <summary>
            Creates a new task
            </summary>
            <param name="taskMetadata">Task Metadata</param>
            <param name="taskToRun">The function to run the operation</param>
            <returns>The new sql task</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTaskManager.CreateTask``1(Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata,System.Func{Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask,System.Threading.Tasks.Task{Microsoft.SqlTools.ServiceLayer.TaskServices.TaskResult}})">
            <summary>
            Creates a new task
            </summary>
            <param name="taskMetadata">Task Metadata</param>
            <param name="taskToRun">The function to run the operation</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTaskManager.CreateAndRun(Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata,System.Func{Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask,System.Threading.Tasks.Task{Microsoft.SqlTools.ServiceLayer.TaskServices.TaskResult}},System.Func{Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask,System.Threading.Tasks.Task{Microsoft.SqlTools.ServiceLayer.TaskServices.TaskResult}})">
            <summary>
            Creates a new task and starts the task
            </summary>
            <param name="taskMetadata">Task Metadata</param>
            <param name="taskToRun">The function to run the operation</param>
            <param name="taskToCancel">The function to cancel the operation</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTaskManager.CreateAndRun``1(Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata,System.Func{Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask,System.Threading.Tasks.Task{Microsoft.SqlTools.ServiceLayer.TaskServices.TaskResult}},System.Func{Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask,System.Threading.Tasks.Task{Microsoft.SqlTools.ServiceLayer.TaskServices.TaskResult}})">
            <summary>
            Creates a new task and starts the task
            </summary>
            <param name="taskMetadata">Task Metadata</param>
            <param name="taskToRun">The function to run the operation</param>
            <param name="taskToCancel">The function to cancel the operation</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTaskManager.HasCompletedTasks">
            <summary>
            Returns true if there's any completed task
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTaskManager.CancelTask(System.Guid)">
            <summary>
            Cancel a task
            </summary>
            <param name="taskId"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTaskManager.Reset">
            <summary>
            Internal for test purposes only.
            Removes all tasks regardless of status from the model.
            This is used as a test aid since Monitor is a singleton class.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskExecutionMode">
            <summary>
            Task execution mode
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskExecutionMode.Execute">
            <summary>
            Execute task
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskExecutionMode.Script">
            <summary>
            Script task
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskExecutionMode.ExecuteAndScript">
            <summary>
            Execute and script task
            Needed for tasks that will show the script when execution completes
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata.Description">
            <summary>
            Task Description
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata.Name">
            <summary>
            Task name to define the type of the task e.g. Create Db, back up
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata.TaskExecutionMode">
            <summary>
            Task execution mode (e.g. execute or script)
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata.Timeout">
            <summary>
            The number of seconds to wait before canceling the task. 
            This is a optional field and 0 or negative numbers means no timeout
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata.ServerName">
            <summary>
            Database server name this task is created for
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata.DatabaseName">
            <summary>
            Database name this task is created for
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata.TargetLocation">
            <summary>
            Target location of this task
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata.TaskOperation">
            <summary>
            Data required to perform the task
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata.OwnerUri">
            <summary>
            Connection uri
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskMetadata.Create(Microsoft.SqlTools.ServiceLayer.Utility.IRequestParams,System.String,Microsoft.SqlTools.ServiceLayer.TaskServices.ITaskOperation,Microsoft.SqlTools.ServiceLayer.Connection.ConnectionService,System.String)">
            <summary>
            Creates task metadata given the request parameters
            </summary>
            <param name="requestParam">Request parameters</param>
            <param name="taskName">Task name</param>
            <param name="taskOperation">Task operation</param>
            <param name="connectionService">Connection Service</param>
            <returns>Task metadata</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskOperationHelper">
            <summary>
            Helper class for task operations
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskOperationHelper.ExecuteTaskAsync(Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask)">
            <summary>
            Async method to execute the operation
            </summary>
            <param name="sqlTask">Sql Task</param>
            <returns>Task Result</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskOperationHelper.CancelTaskAsync(Microsoft.SqlTools.ServiceLayer.TaskServices.SqlTask)">
            <summary>
            Async method to cancel the operations
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskRequestDetails.TaskExecutionMode">
            <summary>
            The executation mode for the operation. default is execution
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskScript">
            <summary>
            Task script message
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskScript.Status">
            <summary>
            Status of script
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskScript.Script">
            <summary>
            Script content
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskScript.ErrorMessage">
            <summary>
            Error occurred during script
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskService.Instance">
            <summary>
            Gets the singleton instance object
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskService.TaskManager">
            <summary>
            Task Manager Instance to use for testing
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskService.InitializeService(Microsoft.SqlTools.Hosting.Protocol.IProtocolEndpoint)">
            <summary>
            Initializes the service instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.TaskServices.TaskService.HandleListTasksRequest(Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.ListTasksParams,Microsoft.SqlTools.Hosting.Protocol.RequestContext{Microsoft.SqlTools.ServiceLayer.TaskServices.Contracts.ListTasksResponse})">
            <summary>
            Handles a list tasks request
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Utility.CommonConstants">
            <summary>
            Common Constant values used across multiple services
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.DatabaseUtils.IsSystemDatabaseConnection(System.String)">
            <summary>
            Check if the database is a system database
            </summary>
            <param name="databaseName">the name of database</param>
            <returns>return true if the database is a system database</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.FileUtilities.SafeFileExists(System.String)">
            <summary>
            Checks if file exists and swallows exceptions, if any
            </summary>
            <param name="path"> path of the file</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.FileUtilities.SafeFileDelete(System.String)">
            <summary>
            Deletes a file and swallows exceptions, if any
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.FileUtilities.SafeDirectoryExists(System.String)">
            <summary>
            Checks if file exists and swallows exceptions, if any
            </summary>
            <param name="path"> path of the file</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.FileUtilities.SafeDirectoryDelete(System.String,System.Boolean)">
            <summary>
            Deletes a directory and swallows exceptions, if any
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.FileUtilities.SetFileReadWrite(System.String)">
            <summary>
            Turns off the read-only attribute for this file
            </summary>
            <param name="fullFilePath"></param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.FileUtilities.TryGetFullPath(System.String,System.String)">
            <summary>
            Attempts to resolve the given filePath to an absolute path to a file on disk, 
            defaulting to the original filePath if that fails. 
            </summary>
            <param name="filePath">The file path to resolve</param>
            <param name="clientUri">The full file path URI used by the client</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Utility.IRequestParams.OwnerUri">
            <summary>
            The Uri to find the connection to do the restore operations
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Utility.IScriptableRequestParams.TaskExecutionMode">
            <summary>
            The executation mode for the operation. default is execution
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1">
            <summary>
            Collection class that permits storage of over <c>int.MaxValue</c> items. This is performed
            by using a 2D list of lists. The internal lists are only initialized as necessary. This
            collection implements IEnumerable to make it easier to run LINQ queries against it.
            </summary>
            <remarks>
            This class is based on code from $\Data Tools\SSMS_Main\sql\ssms\core\DataStorage\ArrayList64.cs
            with additions to bring it up to .NET 4.5 standards
            </remarks>
            <typeparam name="T">Type of the values to store</typeparam>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.#ctor">
            <summary>   
            Creates a new long list
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.Count">
            <summary>
            The total number of elements in the array
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.Item(System.Int64)">
            <summary>
            Used to get or set the value at a given index in the list
            </summary>
            <param name="index">Index into the list to access</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.ExpandListSize">
            <summary>
            The number of elements to store in a single list before expanding into multiple lists
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.Add(`0)">
            <summary>
            Adds the specified value to the end of the list
            </summary>
            <param name="val">Value to add to the list</param>
            <returns>Index of the item that was just added</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.GetItem(System.Int64)">
            <summary>
            Returns the item at the specified index
            </summary>
            <param name="index">Index of the item to return</param>
            <returns>The item at the index specified</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.LongSkip(System.Int64)">
            <summary>
            Skips ahead the number of elements requested and returns the elements after that many elements
            </summary>
            <param name="start">The number of elements to skip</param>
            <returns>All elements after the number of elements to skip</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.SetItem(System.Int64,`0)">
            <summary>
            Sets the item at the specified index
            </summary>
            <param name="index">Index of the item to set</param>
            <param name="value">The item to store at the index specified</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.RemoveAt(System.Int64)">
            <summary>
            Removes an item at the specified location and shifts all the items after the provided
            index up by one.
            </summary>
            <param name="index">The index to remove from the list</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.GetEnumerator">
            <summary>
            Returns a generic enumerator for enumeration of this LongList
            </summary>
            <returns>Enumerator for LongList</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for enumeration of this LongList
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.LongListEnumerator`1.localList">
            <summary>
            The current list that we're iterating over.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.LongListEnumerator`1.index">
            <summary>
            The current index into the list
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.LongListEnumerator`1.#ctor(Microsoft.SqlTools.ServiceLayer.Utility.LongList{`1})">
            <summary>
            Constructs a new enumerator for a given LongList
            </summary>
            <param name="list">The list to enumerate</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.LongListEnumerator`1.Index">
            <summary>
            The index into the list of the item that is the current item. Upon setting,
            <see cref="P:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.LongListEnumerator`1.Current"/> will be updated if the index is in range. Otherwise,
            <c>default(<see cref="!:TEt"/>)</c> will be used.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.LongListEnumerator`1.Current">
            <summary>
            Returns the current item in the enumeration
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.LongListEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current item in the enumeration
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.LongListEnumerator`1.MoveNext">
            <summary>
            Moves to the next item in the list we're iterating over
            </summary>
            <returns>Whether or not the move was successful</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.LongListEnumerator`1.Reset">
            <summary>
            Resets the enumeration
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.LongList`1.LongListEnumerator`1.Dispose">
            <summary>
            Disposal method. Does nothing.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Utility.ResolvedFile">
             <summary>
             Utility object holding a result of a file resolve action.
            
             Workspace APIs support reading from disk if a file hasn't been
             officially opened via VSCode APIs with a buffer. This is problematic
             in the case where it's not a file on disk as any attempt will cause
             an exception to be thrown.
             
             To mitigate this a ResolvedFile object has an additional flag indicating
             if the file can be read from disk.
             </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Utility.ServiceLayerCommandOptions.contributors">
            List of contributors to this project, used as part of the onboarding process.
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Utility.SqlScriptFormatters.FromSqlScript">
            <summary>
            Provides utilities for converting from SQL script syntax into POCOs.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.SqlScriptFormatters.FromSqlScript.DecodeMultipartIdentifier(System.String)">
            <summary>
            Decodes a multipart identifier as used in a SQL script into an array of the multiple
            parts of the identifier. Implemented as a state machine that iterates over the
            characters of the multipart identifier.
            </summary>
            <param name="multipartIdentifier">Multipart identifier to decode (eg, "[dbo].[test]")</param>
            <returns>The parts of the multipart identifier in an array (eg, "dbo", "test")</returns>
            <exception cref="T:System.FormatException">
            Thrown if an invalid state transition is made, indicating that the multipart identifer
            is not valid. 
            </exception>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.SqlScriptFormatters.FromSqlScript.UnwrapLiteral(System.String)">
            <summary>
            Converts a value from a script into a plain version by unwrapping literal wrappers
            and unescaping characters.
            </summary>
            <param name="literal">The value to unwrap (eg, "(N'foo''bar')")</param>
            <returns>The unwrapped/unescaped literal (eg, "foo'bar")</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.SqlScriptFormatters.FromSqlScript.IsIdentifierBracketed(System.String)">
            <summary>
            Tests whether an identifier is escaped with brackets e.g. [Northwind].[dbo].[Orders]
            </summary>
            <param name="identifer">Identifier to check.</param>
            <returns>Boolean indicating if identifier is escaped with brackets.</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Utility.SqlScriptFormatters.ToSqlScript">
            <summary>
            Provides utility for converting arbitrary objects into strings that are ready to be
            inserted into SQL strings
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.SqlScriptFormatters.ToSqlScript.FormatColumnType(System.Data.Common.DbColumn,System.Boolean)">
            <summary>
            Extracts a DbColumn's datatype and turns it into script ready 
            </summary>
            <param name="column"></param>
            <returns></returns>
            <seealso cref="M:Microsoft.SqlTools.ServiceLayer.ObjectExplorer.SmoModel.SmoColumnCustomNodeHelper.GetTypeSpecifierLabel(Microsoft.SqlServer.Management.Smo.DataType,Microsoft.SqlServer.Management.Smo.UserDefinedDataTypeCollection)"/>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.SqlScriptFormatters.ToSqlScript.FormatIdentifier(System.String)">
            <summary>
            Escapes an identifier such as a table name or column name by wrapping it in square brackets
            </summary>
            <param name="identifier">The identifier to format</param>
            <returns>Identifier formatted for use in a SQL script</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.SqlScriptFormatters.ToSqlScript.FormatMultipartIdentifier(System.String)">
            <summary>
            Escapes a multi-part identifier such as a table name or column name with multiple
            parts split by '.'
            </summary>
            <param name="identifier">The identifier to escape (eg, "dbo.test")</param>
            <returns>The escaped identifier (eg, "[dbo].[test]")</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.SqlScriptFormatters.ToSqlScript.FormatMultipartIdentifier(System.String[])">
            <summary>
            Escapes a multipart identifier such as a table name, given an array of the parts of the
            multipart identifier.
            </summary>
            <param name="identifiers">The parts of the identifier to escape (eg, "dbo", "test")</param>
            <returns>An escaped version of the multipart identifier (eg, "[dbo].[test]")</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.SqlScriptFormatters.ToSqlScript.FormatValue(System.Object,System.Data.Common.DbColumn)">
            <summary>
            Converts an object into a string for SQL script
            </summary>
            <param name="value">The object to convert</param>
            <param name="column">The column metadata for the cell to insert</param>
            <returns>String version of the cell value for use in SQL scripts</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.SqlScriptFormatters.ToSqlScript.FormatValue(Microsoft.SqlTools.ServiceLayer.QueryExecution.Contracts.DbCellValue,System.Data.Common.DbColumn)">
            <summary>
            Converts a cell value into a string for SQL script
            </summary>
            <param name="value">The cell to convert</param>
            <param name="column">The column metadata for the cell to insert</param>
            <returns>String version of the cell value for use in SQL scripts</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.SqlScriptFormatters.ToSqlScript.EscapeQuotedSqlString(System.String)">
            <summary>
            Returns a valid SQL string packaged in single quotes with single quotes inside escaped
            </summary>
            <param name="rawString">String to be formatted</param>
            <returns>Formatted SQL string</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.SqlScriptFormatters.ToSqlScript.EscapeString(System.String,System.Char)">
            <summary>
            Replaces all instances of <paramref name="escapeCharacter"/> with a duplicate of 
            <paramref name="escapeCharacter"/>. For example "can't" becomes "can''t"
            </summary>
            <param name="value">The string to escape</param>
            <param name="escapeCharacter">The character to escape</param>
            <returns>The escaped string</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.TaskExtensions.ContinueWithOnFaulted(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task})">
            <summary>
            Adds handling to check the Exception field of a task and log it if the task faulted
            </summary>
            <remarks>
            This will effectively swallow exceptions in the task chain.
            </remarks>
            <param name="antecedent">The task to continue</param>
            <param name="continuationAction">
            An optional operation to perform after exception handling has occurred
            </param>
            <returns>Task with exception handling on continuation</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.TaskExtensions.ContinueWithOnFaulted(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,System.Threading.Tasks.Task})">
            <summary>
            Adds handling to check the Exception field of a task and log it if the task faulted.
            This version allows for async code to be ran in the continuation function.
            </summary>
            <remarks>
            This will effectively swallow exceptions in the task chain.
            </remarks>
            <param name="antecedent">The task to continue</param>
            <param name="continuationFunc">
            An optional operation to perform after exception handling has occurred
            </param>
            <returns>Task with exception handling on continuation</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.TaskExtensions.WithTimeout``1(System.Threading.Tasks.Task{``0},System.Int32)">
            <summary>
            This will enforce time out to run an async task with returning result
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task">The async task to run</param>
            <param name="timeout">Time out in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Utility.TaskExtensions.WithTimeout(System.Threading.Tasks.Task,System.Int32)">
            <summary>
            This will enforce time out to run an async task without returning result
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task">The async task to run</param>
            <param name="timeout">Time out in milliseconds</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition">
            <summary>
            Provides details about a position in a file buffer.  All
            positions are expressed in 1-based positions (i.e. the
            first line and column in the file is position 1,1).
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition.None">
            <summary>
            Provides an instance that represents a position that has not been set.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition.Line">
            <summary>
            Gets the line number of the position in the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition.Column">
            <summary>
            Gets the column number of the position in the buffer.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the BufferPosition class.
            </summary>
            <param name="line">The line number of the position.</param>
            <param name="column">The column number of the position.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition.Equals(System.Object)">
            <summary>
            Compares two instances of the BufferPosition class.
            </summary>
            <param name="obj">The object to which this instance will be compared.</param>
            <returns>True if the positions are equal, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition.GetHashCode">
            <summary>
            Calculates a unique hash code that represents this instance.
            </summary>
            <returns>A hash code representing this instance.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition.op_GreaterThan(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition)">
            <summary>
            Compares two positions to check if one is greater than the other.
            </summary>
            <param name="positionOne">The first position to compare.</param>
            <param name="positionTwo">The second position to compare.</param>
            <returns>True if positionOne is greater than positionTwo.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition.op_LessThan(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition)">
            <summary>
            Compares two positions to check if one is less than the other.
            </summary>
            <param name="positionOne">The first position to compare.</param>
            <param name="positionTwo">The second position to compare.</param>
            <returns>True if positionOne is less than positionTwo.</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferRange">
            <summary>
            Provides details about a range between two positions in
            a file buffer.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferRange.None">
            <summary>
            Provides an instance that represents a range that has not been set.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferRange.Start">
            <summary>
            Gets the start position of the range in the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferRange.End">
            <summary>
            Gets the end position of the range in the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferRange.HasRange">
            <summary>
            Returns true if the current range is non-zero, i.e.
            contains valid start and end positions.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferRange.#ctor(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition)">
            <summary>
            Creates a new instance of the BufferRange class.
            </summary>
            <param name="start">The start position of the range.</param>
            <param name="end">The end position of the range.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the BufferRange class.
            </summary>
            <param name="startLine">The 1-based starting line number of the range.</param>
            <param name="startColumn">The 1-based starting column number of the range.</param>
            <param name="endLine">The 1-based ending line number of the range.</param>
            <param name="endColumn">The 1-based ending column number of the range.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferRange.Equals(System.Object)">
            <summary>
            Compares two instances of the BufferRange class.
            </summary>
            <param name="obj">The object to which this instance will be compared.</param>
            <returns>True if the ranges are equal, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferRange.GetHashCode">
            <summary>
            Calculates a unique hash code that represents this instance.
            </summary>
            <returns>A hash code representing this instance.</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.FileChange">
            <summary>
            Contains details relating to a content change in an open file.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.FileChange.InsertString">
            <summary>
            The string which is to be inserted in the file.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.FileChange.Line">
            <summary>
            The 1-based line number where the change starts.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.FileChange.Offset">
            <summary>
            The 1-based column offset where the change starts.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.FileChange.EndLine">
            <summary>
            The 1-based line number where the change ends.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.FileChange.EndOffset">
            <summary>
            The 1-based column offset where the change ends.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.FilePosition">
            <summary>
            Provides details and operations for a buffer position in a
            specific file.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.FilePosition.#ctor(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile,System.Int32,System.Int32)">
            <summary>
            Creates a new FilePosition instance for the 1-based line and
            column numbers in the specified file.
            </summary>
            <param name="scriptFile">The ScriptFile in which the position is located.</param>
            <param name="line">The 1-based line number in the file.</param>
            <param name="column">The 1-based column number in the file.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.FilePosition.#ctor(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile,Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition)">
            <summary>
            Creates a new FilePosition instance for the specified file by
            copying the specified BufferPosition
            </summary>
            <param name="scriptFile">The ScriptFile in which the position is located.</param>
            <param name="copiedPosition">The original BufferPosition from which the line and column will be copied.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.FilePosition.AddOffset(System.Int32,System.Int32)">
            <summary>
            Gets a FilePosition relative to this position by adding the
            provided line and column offset relative to the contents of
            the current file.
            </summary>
            <param name="lineOffset">The line offset to add to this position.</param>
            <param name="columnOffset">The column offset to add to this position.</param>
            <returns>A new FilePosition instance for the calculated position.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.FilePosition.GetLineStart">
            <summary>
            Gets a FilePosition for the line and column position
            of the beginning of the current line after any initial
            whitespace for indentation.
            </summary>
            <returns>A new FilePosition instance for the calculated position.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.FilePosition.GetLineEnd">
            <summary>
            Gets a FilePosition for the line and column position
            of the end of the current line.
            </summary>
            <returns>A new FilePosition instance for the calculated position.</returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile">
            <summary>
            Contains the details and contents of an open script file.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.Id">
            <summary>
            Gets a unique string that identifies this file.  At this time,
            this property returns a normalized version of the value stored
            in the ClientUri property.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.FilePath">
            <summary>
            Gets the path at which this file resides.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.ClientUri">
            <summary>
            Gets or sets the URI which the editor client uses to identify this file.
            Setter for testing purposes only
            virtual to allow mocking.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.IsAnalysisEnabled">
            <summary>
            Gets or sets a boolean that determines whether
            semantic analysis should be enabled for this file.
            For internal use only.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.IsInMemory">
            <summary>
            Gets a boolean that determines whether this file is
            in-memory or not (either unsaved or non-file content).
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.Contents">
            <summary>
            Gets or sets a string containing the full contents of the file.
            Setter for testing purposes only
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.FileRange">
            <summary>
            Gets a BufferRange that represents the entire content
            range of the file.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.SyntaxMarkers">
            <summary>
            Gets the list of syntax markers found by parsing this
            file's contents.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.FileLines">
            <summary>
            Gets the list of strings for each line of the file.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.#ctor">
            <summary>
            Add a default constructor for testing
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.#ctor(System.String,System.String,System.IO.TextReader)">
            <summary>
            Creates a new ScriptFile instance by reading file contents from
            the given TextReader.
            </summary>
            <param name="filePath">The path at which the script file resides.</param>
            <param name="clientUri">The URI which the client uses to identify the file.</param>
            <param name="textReader">The TextReader to use for reading the file's contents.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new ScriptFile instance with the specified file contents.
            </summary>
            <param name="filePath">The path at which the script file resides.</param>
            <param name="clientUri">The path which the client uses to identify the file.</param>
            <param name="initialBuffer">The initial contents of the script file.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.GetLine(System.Int32)">
            <summary>
            Gets a line from the file's contents.
            </summary>
            <param name="lineNumber">The 1-based line number in the file.</param>
            <returns>The complete line at the given line number.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.GetTextInRange(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferRange)">
            <summary>
            Gets the text under a specific range
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.GetLinesInRange(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferRange)">
            <summary>
            Gets a range of lines from the file's contents. Virtual method to allow for
            mocking.
            </summary>
            <param name="bufferRange">The buffer range from which lines will be extracted.</param>
            <returns>An array of strings from the specified range of the file.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.ValidatePosition(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition)">
            <summary>
            Throws ArgumentOutOfRangeException if the given position is outside
            of the file's buffer extents.
            </summary>
            <param name="bufferPosition">The position in the buffer to be validated.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.ValidatePosition(System.Int32,System.Int32)">
            <summary>
            Throws ArgumentOutOfRangeException if the given position is outside
            of the file's buffer extents.
            </summary>
            <param name="line">The 1-based line to be validated.</param>
            <param name="column">The 1-based column to be validated.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.ApplyChange(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.FileChange)">
            <summary>
            Applies the provided FileChange to the file's contents
            </summary>
            <param name="fileChange">The FileChange to apply to the file's contents.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.GetOffsetAtPosition(System.Int32,System.Int32)">
            <summary>
            Calculates the zero-based character offset of a given
            line and column position in the file.
            </summary>
            <param name="lineNumber">The 1-based line number from which the offset is calculated.</param>
            <param name="columnNumber">The 1-based column number from which the offset is calculated.</param>
            <returns>The zero-based offset for the given file position.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.CalculatePosition(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.BufferPosition,System.Int32,System.Int32)">
            <summary>
            Calculates a FilePosition relative to a starting BufferPosition
            using the given 1-based line and column offset.
            </summary>
            <param name="originalPosition">The original BufferPosition from which an new position should be calculated.</param>
            <param name="lineOffset">The 1-based line offset added to the original position in this file.</param>
            <param name="columnOffset">The 1-based column offset added to the original position in this file.</param>
            <returns>A new FilePosition instance with the resulting line and column number.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.GetPositionAtOffset(System.Int32)">
            <summary>
            Calculates the 1-based line and column number position based
            on the given buffer offset.
            </summary>
            <param name="bufferOffset">The buffer offset to convert.</param>
            <returns>A new BufferPosition containing the position of the offset.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.GetRangeBetweenOffsets(System.Int32,System.Int32)">
            <summary>
            Calculates the 1-based line and column number range based on
            the given start and end buffer offsets.
            </summary>
            <param name="startOffset">The start offset of the range.</param>
            <param name="endOffset">The end offset of the range.</param>
            <returns>A new BufferRange containing the positions in the offset range.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile.SetFileContents(System.String)">
            <summary>
            Set the script files contents
            </summary>
            <param name="fileContents"></param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFileMarkerLevel">
            <summary>
            Defines the message level of a script file marker.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFileMarkerLevel.Information">
            <summary>
            The marker represents an informational message.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFileMarkerLevel.Warning">
            <summary>
            The marker represents a warning message.
            </summary>
        </member>
        <member name="F:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFileMarkerLevel.Error">
            <summary>
            The marker represents an error message.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFileMarker">
            <summary>
            Contains details about a marker that should be displayed
            for the a script file.  The marker information could come
            from syntax parsing or semantic analysis of the script.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFileMarker.Message">
            <summary>
            Gets or sets the marker's message string.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFileMarker.Level">
            <summary>
            Gets or sets the marker's message level.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFileMarker.ScriptRegion">
            <summary>
            Gets or sets the ScriptRegion where the marker should appear.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptRegion">
            <summary>
            Contains details about a specific region of text in script file.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptRegion.File">
            <summary>
            Gets the file path of the script file in which this region is contained.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptRegion.Text">
            <summary>
            Gets or sets the text that is contained within the region.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptRegion.StartLineNumber">
            <summary>
            Gets or sets the starting line number of the region.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptRegion.StartColumnNumber">
            <summary>
            Gets or sets the starting column number of the region.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptRegion.StartOffset">
            <summary>
            Gets or sets the starting file offset of the region.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptRegion.EndLineNumber">
            <summary>
            Gets or sets the ending line number of the region.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptRegion.EndColumnNumber">
            <summary>
            Gets or sets the ending column number of the region.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptRegion.EndOffset">
            <summary>
            Gets or sets the ending file offset of the region.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentIdentifier">
            <summary>
            Defines a base parameter class for identifying a text document.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentIdentifier.Uri">
            <summary>
            Gets or sets the URI which identifies the path of the
            text document.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentPosition">
            <summary>
            Defines a position in a text document.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentPosition.TextDocument">
            <summary>
            Gets or sets the document identifier.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentPosition.Position">
            <summary>
            Gets or sets the position in the document.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentItem">
            <summary>
            Defines a text document.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentItem.Uri">
            <summary>
            Gets or sets the URI which identifies the path of the
            text document.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentItem.LanguageId">
            <summary>
            Gets or sets the language of the document
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentItem.Version">
            <summary>
            Gets or sets the version of the document
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentItem.Text">
            <summary>
            Gets or sets the full content of the document.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.DidOpenTextDocumentNotification.TextDocument">
            <summary>
            Gets or sets the opened document.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.DidCloseTextDocumentParams.TextDocument">
            <summary>
            Gets or sets the closed document.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.DidChangeTextDocumentParams.TextDocument">
            <summary>
            Gets or sets the changed document.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.DidChangeTextDocumentParams.ContentChanges">
            <summary>
            Gets or sets the list of changes to the document content.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.VersionedTextDocumentIdentifier">
            <summary>
            Define a specific version of a text document
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.VersionedTextDocumentIdentifier.Version">
            <summary>
            Gets or sets the Version of the changed text document 
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentChangeEvent.Range">
            <summary>
            Gets or sets the Range where the document was changed.  Will
            be null if the server's TextDocumentSyncKind is Full.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentChangeEvent.RangeLength">
            <summary>
            Gets or sets the length of the Range being replaced in the
            document.  Will be null if the server's TextDocumentSyncKind is 
            Full.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.TextDocumentChangeEvent.Text">
            <summary>
            Gets or sets the new text of the document.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.Position.Line">
            <summary>
            Gets or sets the zero-based line number.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.Position.Character">
            <summary>
            Gets or sets the zero-based column number.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.Position.Equals(System.Object)">
            <summary>
            Overrides the base equality method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.Position.GetHashCode">
            <summary>
            Overrides the base GetHashCode method
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.Range.Start">
            <summary>
            Gets or sets the starting position of the range.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.Range.End">
            <summary>
            Gets or sets the ending position of the range.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.Range.Equals(System.Object)">
            <summary>
            Overrides the base equality method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.Range.GetHashCode">
            <summary>
            Overrides the base GetHashCode method
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.Location.Uri">
            <summary>
            Gets or sets the URI indicating the file in which the location refers.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.Location.Range">
            <summary>
            Gets or sets the Range indicating the range in which location refers.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.Location.Equals(System.Object)">
            <summary>
            Overrides the base equality method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.Location.GetHashCode">
            <summary>
            Overrides the base GetHashCode method
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.DocumentSymbolParams">
            <summary>
            Defines a set of parameters to send document symbol request
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.Workspace">
            <summary>
            Manages a "workspace" of script files that are open for a particular
            editing session.  Also helps to navigate references between ScriptFiles.
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.Workspace.WorkspacePath">
            <summary>
            Gets or sets the root path of the workspace.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Workspace.#ctor">
            <summary>
            Creates a new instance of the Workspace class.
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Workspace.ContainsFile(System.String)">
            <summary>
            Checks if a given URI is contained in a workspace 
            </summary>
            <param name="filePath"></param>
            <returns>Flag indicating if the file is tracked in workspace</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Workspace.GetFile(System.String)">
            <summary>
            Gets an open file in the workspace.  If the file isn't open but
            exists on the filesystem, load and return it. Virtual method to
            allow for mocking
            </summary>
            <param name="filePath">The file path at which the script resides.</param>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="filePath"/> is not found.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="filePath"/> contains a null or empty string.
            </exception>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Workspace.ResolveFilePath(System.String)">
            <summary>
            Resolves a URI identifier into an actual file on disk if it exists. 
            </summary>
            <param name="clientUri">The URI identifying the file</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Workspace.UnescapePath(System.String)">
            <summary>
            Unescapes any escaped [, ] or space characters. Typically use this before calling a
            .NET API that doesn't understand PowerShell escaped chars.
            </summary>
            <param name="path">The path to unescape.</param>
            <returns>The path with the ` character before [, ] and spaces removed.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Workspace.GetFileBuffer(System.String,System.String)">
            <summary>
            Gets a new ScriptFile instance which is identified by the given file
            path and initially contains the given buffer contents.
            </summary>
            <param name="filePath"></param>
            <param name="initialBuffer"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Workspace.GetOpenedFiles">
            <summary>
            Gets an array of all opened ScriptFiles in the workspace.
            </summary>
            <returns>An array of all opened ScriptFiles in the workspace.</returns>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Workspace.CloseFile(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.ScriptFile)">
            <summary>
            Closes a currently open script file with the given file path.
            </summary>
            <param name="scriptFile">The file path at which the script resides.</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.Workspace.Dispose">
            <summary>
            Disposes of any Runspaces that were created for the
            services used in this session.
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1">
            <summary>
            Class for handling requests/events that deal with the state of the workspace, including the
            opening and closing of files, the changing of configuration, etc.
            </summary>
            <typeparam name="TConfig">
            The type of the class used for serializing and deserializing the configuration. Must be the
            actual type of the instance otherwise deserialization will be incomplete.
            </typeparam>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.#ctor">
            <summary>
            Default, parameterless constructor.
            TODO: Figure out how to make this truely singleton even with dependency injection for tests
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.Workspace">
            <summary>
            Workspace object for the service. Virtual to allow for mocking
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.CurrentSettings">
            <summary>
            Current settings for the workspace
            </summary>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.ConfigChangeCallback">
            <summary>
            Delegate for callbacks that occur when the configuration for the workspace changes
            </summary>
            <param name="newSettings">The settings that were just set</param>
            <param name="oldSettings">The settings before they were changed</param>
            <param name="eventContext">Context of the event that triggered the callback</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.TextDocChangeCallback">
            <summary>
            Delegate for callbacks that occur when the current text document changes
            </summary>
            <param name="changedFiles">Array of files that changed</param>
            <param name="eventContext">Context of the event raised for the changed files</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.TextDocOpenCallback">
            <summary>
            Delegate for callbacks that occur when a text document is opened
            </summary>
            <param name="uri">Request uri</param>
            <param name="openFile">File that was opened</param>
            <param name="eventContext">Context of the event raised for the changed files</param>
        </member>
        <member name="T:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.TextDocCloseCallback">
            <summary>
            Delegate for callbacks that occur when a text document is closed
            </summary>
            <param name="uri">Request uri</param>
            <param name="closedFile">File that was closed</param>
            <param name="eventContext">Context of the event raised for changed files</param>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.ConfigChangeCallbacks">
            <summary>
            List of callbacks to call when the configuration of the workspace changes
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.TextDocChangeCallbacks">
            <summary>
            List of callbacks to call when the current text document changes
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.TextDocOpenCallbacks">
            <summary>
            List of callbacks to call when a text document is opened
            </summary>
        </member>
        <member name="P:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.TextDocCloseCallbacks">
            <summary>
            List of callbacks to call when a text document is closed
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.RegisterConfigChangeCallback(Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService{`0}.ConfigChangeCallback)">
            <summary>
            Adds a new task to be called when the configuration has been changed. Use this to
            handle changing configuration and changing the current configuration.
            </summary>
            <param name="task">Task to handle the request</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.RegisterTextDocChangeCallback(Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService{`0}.TextDocChangeCallback)">
            <summary>
            Adds a new task to be called when the text of a document changes.
            </summary>
            <param name="task">Delegate to call when the document changes</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.RegisterTextDocCloseCallback(Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService{`0}.TextDocCloseCallback)">
            <summary>
            Adds a new task to be called when a text document closes.
            </summary>
            <param name="task">Delegate to call when the document closes</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.RegisterTextDocOpenCallback(Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService{`0}.TextDocOpenCallback)">
            <summary>
            Adds a new task to be called when a file is opened
            </summary>
            <param name="task">Delegate to call when a document is opened</param>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.HandleDidChangeTextDocumentNotification(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.DidChangeTextDocumentParams,Microsoft.SqlTools.Hosting.Protocol.EventContext)">
            <summary>
            Handles text document change events
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.HandleDidChangeConfigurationNotification(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.DidChangeConfigurationParams{`0},Microsoft.SqlTools.Hosting.Protocol.EventContext)">
            <summary>
            Handles the configuration change event
            </summary>
        </member>
        <member name="M:Microsoft.SqlTools.ServiceLayer.Workspace.WorkspaceService`1.GetFileChangeDetails(Microsoft.SqlTools.ServiceLayer.Workspace.Contracts.Range,System.String)">
            <summary>
            Switch from 0-based offsets to 1 based offsets
            </summary>
            <param name="changeRange"></param>
            <param name="insertString"></param>
        </member>
    </members>
</doc>
